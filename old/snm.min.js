/* build 2017/03/09 14:54:00 */
/*! jQuery v1.11.2 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
! function(a, b) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function(a) {
        if (!a.document) throw new Error("jQuery requires a window with a document");
        return b(a)
    } : b(a)
}("undefined" != typeof window ? window : this, function(a, b) {
    var c = [],
        d = c.slice,
        e = c.concat,
        f = c.push,
        g = c.indexOf,
        h = {},
        i = h.toString,
        j = h.hasOwnProperty,
        k = {},
        l = "1.11.2",
        m = function(a, b) {
            return new m.fn.init(a, b)
        },
        n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        o = /^-ms-/,
        p = /-([\da-z])/gi,
        q = function(a, b) {
            return b.toUpperCase()
        };
    m.fn = m.prototype = {
        jquery: l,
        constructor: m,
        selector: "",
        length: 0,
        toArray: function() {
            return d.call(this)
        },
        get: function(a) {
            return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this)
        },
        pushStack: function(a) {
            var b = m.merge(this.constructor(), a);
            return b.prevObject = this, b.context = this.context, b
        },
        each: function(a, b) {
            return m.each(this, a, b)
        },
        map: function(a) {
            return this.pushStack(m.map(this, function(b, c) {
                return a.call(b, c, b)
            }))
        },
        slice: function() {
            return this.pushStack(d.apply(this, arguments))
        },
        first: function() {
            return this.eq(0)
        },
        last: function() {
            return this.eq(-1)
        },
        eq: function(a) {
            var b = this.length,
                c = +a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [this[c]] : [])
        },
        end: function() {
            return this.prevObject || this.constructor(null)
        },
        push: f,
        sort: c.sort,
        splice: c.splice
    }, m.extend = m.fn.extend = function() {
        var a, b, c, d, e, f, g = arguments[0] || {},
            h = 1,
            i = arguments.length,
            j = !1;
        for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++)
            if (null != (e = arguments[h]))
                for (d in e) a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));
        return g
    }, m.extend({
        expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(a) {
            throw new Error(a)
        },
        noop: function() {},
        isFunction: function(a) {
            return "function" === m.type(a)
        },
        isArray: Array.isArray || function(a) {
            return "array" === m.type(a)
        },
        isWindow: function(a) {
            return null != a && a == a.window
        },
        isNumeric: function(a) {
            return !m.isArray(a) && a - parseFloat(a) + 1 >= 0
        },
        isEmptyObject: function(a) {
            var b;
            for (b in a) return !1;
            return !0
        },
        isPlainObject: function(a) {
            var b;
            if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;
            try {
                if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1
            } catch (c) {
                return !1
            }
            if (k.ownLast)
                for (b in a) return j.call(a, b);
            for (b in a);
            return void 0 === b || j.call(a, b)
        },
        type: function(a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a
        },
        globalEval: function(b) {
            b && m.trim(b) && (a.execScript || function(b) {
                a.eval.call(a, b)
            })(b)
        },
        camelCase: function(a) {
            return a.replace(o, "ms-").replace(p, q)
        },
        nodeName: function(a, b) {
            return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
        },
        each: function(a, b, c) {
            var d, e = 0,
                f = a.length,
                g = r(a);
            if (c) {
                if (g) {
                    for (; f > e; e++)
                        if (d = b.apply(a[e], c), d === !1) break
                } else
                    for (e in a)
                        if (d = b.apply(a[e], c), d === !1) break
            } else if (g) {
                for (; f > e; e++)
                    if (d = b.call(a[e], e, a[e]), d === !1) break
            } else
                for (e in a)
                    if (d = b.call(a[e], e, a[e]), d === !1) break; return a
        },
        trim: function(a) {
            return null == a ? "" : (a + "").replace(n, "")
        },
        makeArray: function(a, b) {
            var c = b || [];
            return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c
        },
        inArray: function(a, b, c) {
            var d;
            if (b) {
                if (g) return g.call(b, a, c);
                for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++)
                    if (c in b && b[c] === a) return c
            }
            return -1
        },
        merge: function(a, b) {
            var c = +b.length,
                d = 0,
                e = a.length;
            while (c > d) a[e++] = b[d++];
            if (c !== c)
                while (void 0 !== b[d]) a[e++] = b[d++];
            return a.length = e, a
        },
        grep: function(a, b, c) {
            for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) d = !b(a[f], f), d !== h && e.push(a[f]);
            return e
        },
        map: function(a, b, c) {
            var d, f = 0,
                g = a.length,
                h = r(a),
                i = [];
            if (h)
                for (; g > f; f++) d = b(a[f], f, c), null != d && i.push(d);
            else
                for (f in a) d = b(a[f], f, c), null != d && i.push(d);
            return e.apply([], i)
        },
        guid: 1,
        proxy: function(a, b) {
            var c, e, f;
            return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function() {
                return a.apply(b || this, c.concat(d.call(arguments)))
            }, e.guid = a.guid = a.guid || m.guid++, e) : void 0
        },
        now: function() {
            return +new Date
        },
        support: k
    }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(a, b) {
        h["[object " + b + "]"] = b.toLowerCase()
    });

    function r(a) {
        var b = a.length,
            c = m.type(a);
        return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a
    }
    var s = function(a) {
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date,
            v = a.document,
            w = 0,
            x = 0,
            y = hb(),
            z = hb(),
            A = hb(),
            B = function(a, b) {
                return a === b && (l = !0), 0
            },
            C = 1 << 31,
            D = {}.hasOwnProperty,
            E = [],
            F = E.pop,
            G = E.push,
            H = E.push,
            I = E.slice,
            J = function(a, b) {
                for (var c = 0, d = a.length; d > c; c++)
                    if (a[c] === b) return c;
                return -1
            },
            K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            L = "[\\x20\\t\\r\\n\\f]",
            M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            N = M.replace("w", "w#"),
            O = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + N + "))|)" + L + "*\\]",
            P = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + O + ")*)|.*)\\)|)",
            Q = new RegExp(L + "+", "g"),
            R = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
            S = new RegExp("^" + L + "*," + L + "*"),
            T = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
            U = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"),
            V = new RegExp(P),
            W = new RegExp("^" + N + "$"),
            X = {
                ID: new RegExp("^#(" + M + ")"),
                CLASS: new RegExp("^\\.(" + M + ")"),
                TAG: new RegExp("^(" + M.replace("w", "w*") + ")"),
                ATTR: new RegExp("^" + O),
                PSEUDO: new RegExp("^" + P),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + K + ")$", "i"),
                needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i")
            },
            Y = /^(?:input|select|textarea|button)$/i,
            Z = /^h\d$/i,
            $ = /^[^{]+\{\s*\[native \w/,
            _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            ab = /[+~]/,
            bb = /'|\\/g,
            cb = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"),
            db = function(a, b, c) {
                var d = "0x" + b - 65536;
                return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320)
            },
            eb = function() {
                m()
            };
        try {
            H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType
        } catch (fb) {
            H = {
                apply: E.length ? function(a, b) {
                    G.apply(a, I.call(b))
                } : function(a, b) {
                    var c = a.length,
                        d = 0;
                    while (a[c++] = b[d++]);
                    a.length = c - 1
                }
            }
        }

        function gb(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, "string" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;
            if (!e && p) {
                if (11 !== k && (f = _.exec(a)))
                    if (j = f[1]) {
                        if (9 === k) {
                            if (h = b.getElementById(j), !h || !h.parentNode) return d;
                            if (h.id === j) return d.push(h), d
                        } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d
                    } else {
                        if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;
                        if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), d
                    }
                if (c.qsa && (!q || !q.test(a))) {
                    if (s = r = u, w = b, x = 1 !== k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
                        o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;
                        while (l--) o[l] = s + rb(o[l]);
                        w = ab.test(a) && pb(b.parentNode) || b, x = o.join(",")
                    }
                    if (x) try {
                        return H.apply(d, w.querySelectorAll(x)), d
                    } catch (y) {} finally {
                        r || b.removeAttribute("id")
                    }
                }
            }
            return i(a.replace(R, "$1"), b, d, e)
        }

        function hb() {
            var a = [];

            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e
            }
            return b
        }

        function ib(a) {
            return a[u] = !0, a
        }

        function jb(a) {
            var b = n.createElement("div");
            try {
                return !!a(b)
            } catch (c) {
                return !1
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null
            }
        }

        function kb(a, b) {
            var c = a.split("|"),
                e = a.length;
            while (e--) d.attrHandle[c[e]] = b
        }

        function lb(a, b) {
            var c = b && a,
                d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);
            if (d) return d;
            if (c)
                while (c = c.nextSibling)
                    if (c === b) return -1;
            return a ? 1 : -1
        }

        function mb(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a
            }
        }

        function nb(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a
            }
        }

        function ob(a) {
            return ib(function(b) {
                return b = +b, ib(function(c, d) {
                    var e, f = a([], c.length, b),
                        g = f.length;
                    while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e]))
                })
            })
        }

        function pb(a) {
            return a && "undefined" != typeof a.getElementsByTagName && a
        }
        c = gb.support = {}, f = gb.isXML = function(a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return b ? "HTML" !== b.nodeName : !1
        }, m = gb.setDocument = function(a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener("unload", eb, !1) : e.attachEvent && e.attachEvent("onunload", eb)), p = !f(g), c.attributes = jb(function(a) {
                return a.className = "i", !a.getAttribute("className")
            }), c.getElementsByTagName = jb(function(a) {
                return a.appendChild(g.createComment("")), !a.getElementsByTagName("*").length
            }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = jb(function(a) {
                return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length
            }), c.getById ? (d.find.ID = function(a, b) {
                if ("undefined" != typeof b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [c] : []
                }
            }, d.filter.ID = function(a) {
                var b = a.replace(cb, db);
                return function(a) {
                    return a.getAttribute("id") === b
                }
            }) : (delete d.find.ID, d.filter.ID = function(a) {
                var b = a.replace(cb, db);
                return function(a) {
                    var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
                    return c && c.value === b
                }
            }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
                return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0
            } : function(a, b) {
                var c, d = [],
                    e = 0,
                    f = b.getElementsByTagName(a);
                if ("*" === a) {
                    while (c = f[e++]) 1 === c.nodeType && d.push(c);
                    return d
                }
                return f
            }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
                return p ? b.getElementsByClassName(a) : void 0
            }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (jb(function(a) {
                o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\f]' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]")
            }), jb(function(a) {
                var b = g.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:")
            })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && jb(function(a) {
                c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", P)
            }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function(a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a,
                    d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)))
            } : function(a, b) {
                if (b)
                    while (b = b.parentNode)
                        if (b === a) return !0;
                return !1
            }, B = b ? function(a, b) {
                if (a === b) return l = !0, 0;
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1)
            } : function(a, b) {
                if (a === b) return l = !0, 0;
                var c, d = 0,
                    e = a.parentNode,
                    f = b.parentNode,
                    h = [a],
                    i = [b];
                if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;
                if (e === f) return lb(a, b);
                c = a;
                while (c = c.parentNode) h.unshift(c);
                c = b;
                while (c = c.parentNode) i.unshift(c);
                while (h[d] === i[d]) d++;
                return d ? lb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0
            }, g) : n
        }, gb.matches = function(a, b) {
            return gb(a, null, null, b)
        }, gb.matchesSelector = function(a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
                var d = s.call(a, b);
                if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d
            } catch (e) {}
            return gb(b, n, null, [a]).length > 0
        }, gb.contains = function(a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b)
        }, gb.attr = function(a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()],
                f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
            return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null
        }, gb.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a)
        }, gb.uniqueSort = function(a) {
            var b, d = [],
                e = 0,
                f = 0;
            if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                while (b = a[f++]) b === a[f] && (e = d.push(f));
                while (e--) a.splice(d[e], 1)
            }
            return k = null, a
        }, e = gb.getText = function(a) {
            var b, c = "",
                d = 0,
                f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ("string" == typeof a.textContent) return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling) c += e(a)
                } else if (3 === f || 4 === f) return a.nodeValue
            } else
                while (b = a[d++]) c += e(b);
            return c
        }, d = gb.selectors = {
            cacheLength: 50,
            createPseudo: ib,
            match: X,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(a) {
                    return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4)
                },
                CHILD: function(a) {
                    return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || gb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && gb.error(a[0]), a
                },
                PSEUDO: function(a) {
                    var b, c = !a[6] && a[2];
                    return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3))
                }
            },
            filter: {
                TAG: function(a) {
                    var b = a.replace(cb, db).toLowerCase();
                    return "*" === a ? function() {
                        return !0
                    } : function(a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b
                    }
                },
                CLASS: function(a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function(a) {
                        return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "")
                    })
                },
                ATTR: function(a, b, c) {
                    return function(d) {
                        var e = gb.attr(d, a);
                        return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(Q, " ") + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0
                    }
                },
                CHILD: function(a, b, c, d, e) {
                    var f = "nth" !== a.slice(0, 3),
                        g = "last" !== a.slice(-4),
                        h = "of-type" === b;
                    return 1 === d && 0 === e ? function(a) {
                        return !!a.parentNode
                    } : function(b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling",
                            q = b.parentNode,
                            r = h && b.nodeName.toLowerCase(),
                            s = !i && !h;
                        if (q) {
                            if (f) {
                                while (p) {
                                    l = b;
                                    while (l = l[p])
                                        if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                                    o = p = "only" === a && !o && "nextSibling"
                                }
                                return !0
                            }
                            if (o = [g ? q.firstChild : q.lastChild], g && s) {
                                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];
                                while (l = ++n && l && l[p] || (m = n = 0) || o.pop())
                                    if (1 === l.nodeType && ++m && l === b) {
                                        k[a] = [w, n, m];
                                        break
                                    }
                            } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];
                            else
                                while (l = ++n && l && l[p] || (m = n = 0) || o.pop())
                                    if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break; return m -= e, m === d || m % d === 0 && m / d >= 0
                        }
                    }
                },
                PSEUDO: function(a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || gb.error("unsupported pseudo: " + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ib(function(a, c) {
                        var d, f = e(a, b),
                            g = f.length;
                        while (g--) d = J(a, f[g]), a[d] = !(c[d] = f[g])
                    }) : function(a) {
                        return e(a, 0, c)
                    }) : e
                }
            },
            pseudos: {
                not: ib(function(a) {
                    var b = [],
                        c = [],
                        d = h(a.replace(R, "$1"));
                    return d[u] ? ib(function(a, b, c, e) {
                        var f, g = d(a, null, e, []),
                            h = a.length;
                        while (h--)(f = g[h]) && (a[h] = !(b[h] = f))
                    }) : function(a, e, f) {
                        return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop()
                    }
                }),
                has: ib(function(a) {
                    return function(b) {
                        return gb(a, b).length > 0
                    }
                }),
                contains: ib(function(a) {
                    return a = a.replace(cb, db),
                        function(b) {
                            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1
                        }
                }),
                lang: ib(function(a) {
                    return W.test(a || "") || gb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(),
                        function(b) {
                            var c;
                            do
                                if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
                            while ((b = b.parentNode) && 1 === b.nodeType);
                            return !1
                        }
                }),
                target: function(b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id
                },
                root: function(a) {
                    return a === o
                },
                focus: function(a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex)
                },
                enabled: function(a) {
                    return a.disabled === !1
                },
                disabled: function(a) {
                    return a.disabled === !0
                },
                checked: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && !!a.checked || "option" === b && !!a.selected
                },
                selected: function(a) {
                    return a.parentNode && a.parentNode.selectedIndex, a.selected === !0
                },
                empty: function(a) {
                    for (a = a.firstChild; a; a = a.nextSibling)
                        if (a.nodeType < 6) return !1;
                    return !0
                },
                parent: function(a) {
                    return !d.pseudos.empty(a)
                },
                header: function(a) {
                    return Z.test(a.nodeName)
                },
                input: function(a) {
                    return Y.test(a.nodeName)
                },
                button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && "button" === a.type || "button" === b
                },
                text: function(a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase())
                },
                first: ob(function() {
                    return [0]
                }),
                last: ob(function(a, b) {
                    return [b - 1]
                }),
                eq: ob(function(a, b, c) {
                    return [0 > c ? c + b : c]
                }),
                even: ob(function(a, b) {
                    for (var c = 0; b > c; c += 2) a.push(c);
                    return a
                }),
                odd: ob(function(a, b) {
                    for (var c = 1; b > c; c += 2) a.push(c);
                    return a
                }),
                lt: ob(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; --d >= 0;) a.push(d);
                    return a
                }),
                gt: ob(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; ++d < b;) a.push(d);
                    return a
                })
            }
        }, d.pseudos.nth = d.pseudos.eq;
        for (b in {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            }) d.pseudos[b] = mb(b);
        for (b in {
                submit: !0,
                reset: !0
            }) d.pseudos[b] = nb(b);

        function qb() {}
        qb.prototype = d.filters = d.pseudos, d.setFilters = new qb, g = gb.tokenize = function(a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k) return b ? 0 : k.slice(0);
            h = a, i = [], j = d.preFilter;
            while (h) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(R, " ")
                }), h = h.slice(c.length));
                for (g in d.filter) !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
                    value: c,
                    type: g,
                    matches: e
                }), h = h.slice(c.length));
                if (!c) break
            }
            return b ? h.length : h ? gb.error(a) : z(a, i).slice(0)
        };

        function rb(a) {
            for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
            return d
        }

        function sb(a, b, c) {
            var d = b.dir,
                e = c && "parentNode" === d,
                f = x++;
            return b.first ? function(b, c, f) {
                while (b = b[d])
                    if (1 === b.nodeType || e) return a(b, c, f)
            } : function(b, c, g) {
                var h, i, j = [w, f];
                if (g) {
                    while (b = b[d])
                        if ((1 === b.nodeType || e) && a(b, c, g)) return !0
                } else
                    while (b = b[d])
                        if (1 === b.nodeType || e) {
                            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
                            if (i[d] = j, j[2] = a(b, c, g)) return !0
                        }
            }
        }

        function tb(a) {
            return a.length > 1 ? function(b, c, d) {
                var e = a.length;
                while (e--)
                    if (!a[e](b, c, d)) return !1;
                return !0
            } : a[0]
        }

        function ub(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++) gb(a, b[d], c);
            return c
        }

        function vb(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)(f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
            return g
        }

        function wb(a, b, c, d, e, f) {
            return d && !d[u] && (d = wb(d)), e && !e[u] && (e = wb(e, f)), ib(function(f, g, h, i) {
                var j, k, l, m = [],
                    n = [],
                    o = g.length,
                    p = f || ub(b || "*", h.nodeType ? [h] : h, []),
                    q = !a || !f && b ? p : vb(p, m, a, h, i),
                    r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = vb(r, n), d(j, [], h, i), k = j.length;
                    while (k--)(l = j[k]) && (r[n[k]] = !(q[n[k]] = l))
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            while (k--)(l = r[k]) && j.push(q[k] = l);
                            e(null, r = [], j, i)
                        }
                        k = r.length;
                        while (k--)(l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l))
                    }
                } else r = vb(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r)
            })
        }

        function xb(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = sb(function(a) {
                    return a === b
                }, h, !0), l = sb(function(a) {
                    return J(b, a) > -1
                }, h, !0), m = [function(a, c, d) {
                    var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                    return b = null, e
                }]; f > i; i++)
                if (c = d.relative[a[i].type]) m = [sb(tb(m), c)];
                else {
                    if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                        for (e = ++i; f > e; e++)
                            if (d.relative[a[e].type]) break;
                        return wb(i > 1 && tb(m), i > 1 && rb(a.slice(0, i - 1).concat({
                            value: " " === a[i - 2].type ? "*" : ""
                        })).replace(R, "$1"), c, e > i && xb(a.slice(i, e)), f > e && xb(a = a.slice(e)), f > e && rb(a))
                    }
                    m.push(c)
                }
            return tb(m)
        }

        function yb(a, b) {
            var c = b.length > 0,
                e = a.length > 0,
                f = function(f, g, h, i, k) {
                    var l, m, o, p = 0,
                        q = "0",
                        r = f && [],
                        s = [],
                        t = j,
                        u = f || e && d.find.TAG("*", k),
                        v = w += null == t ? 1 : Math.random() || .1,
                        x = u.length;
                    for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                        if (e && l) {
                            m = 0;
                            while (o = a[m++])
                                if (o(l, g, h)) {
                                    i.push(l);
                                    break
                                }
                            k && (w = v)
                        }
                        c && ((l = !o && l) && p--, f && r.push(l))
                    }
                    if (p += q, c && q !== p) {
                        m = 0;
                        while (o = b[m++]) o(r, s, g, h);
                        if (f) {
                            if (p > 0)
                                while (q--) r[q] || s[q] || (s[q] = F.call(i));
                            s = vb(s)
                        }
                        H.apply(i, s), k && !f && s.length > 0 && p + b.length > 1 && gb.uniqueSort(i)
                    }
                    return k && (w = v, j = t), r
                };
            return c ? ib(f) : f
        }
        return h = gb.compile = function(a, b) {
            var c, d = [],
                e = [],
                f = A[a + " "];
            if (!f) {
                b || (b = g(a)), c = b.length;
                while (c--) f = xb(b[c]), f[u] ? d.push(f) : e.push(f);
                f = A(a, yb(e, d)), f.selector = a
            }
            return f
        }, i = gb.select = function(a, b, e, f) {
            var i, j, k, l, m, n = "function" == typeof a && a,
                o = !f && g(a = n.selector || a);
            if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                    if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;
                    n && (b = b.parentNode), a = a.slice(j.shift().value.length)
                }
                i = X.needsContext.test(a) ? 0 : j.length;
                while (i--) {
                    if (k = j[i], d.relative[l = k.type]) break;
                    if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && pb(b.parentNode) || b))) {
                        if (j.splice(i, 1), a = f.length && rb(j), !a) return H.apply(e, f), e;
                        break
                    }
                }
            }
            return (n || h(a, o))(f, b, !p, e, ab.test(a) && pb(b.parentNode) || b), e
        }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = jb(function(a) {
            return 1 & a.compareDocumentPosition(n.createElement("div"))
        }), jb(function(a) {
            return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href")
        }) || kb("type|href|height|width", function(a, b, c) {
            return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2)
        }), c.attributes && jb(function(a) {
            return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value")
        }) || kb("value", function(a, b, c) {
            return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue
        }), jb(function(a) {
            return null == a.getAttribute("disabled")
        }) || kb(K, function(a, b, c) {
            var d;
            return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
        }), gb
    }(a);
    m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;
    var t = m.expr.match.needsContext,
        u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        v = /^.[^:#\[\.,]*$/;

    function w(a, b, c) {
        if (m.isFunction(b)) return m.grep(a, function(a, d) {
            return !!b.call(a, d, a) !== c
        });
        if (b.nodeType) return m.grep(a, function(a) {
            return a === b !== c
        });
        if ("string" == typeof b) {
            if (v.test(b)) return m.filter(b, a, c);
            b = m.filter(b, a)
        }
        return m.grep(a, function(a) {
            return m.inArray(a, b) >= 0 !== c
        })
    }
    m.filter = function(a, b, c) {
        var d = b[0];
        return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function(a) {
            return 1 === a.nodeType
        }))
    }, m.fn.extend({
        find: function(a) {
            var b, c = [],
                d = this,
                e = d.length;
            if ("string" != typeof a) return this.pushStack(m(a).filter(function() {
                for (b = 0; e > b; b++)
                    if (m.contains(d[b], this)) return !0
            }));
            for (b = 0; e > b; b++) m.find(a, d[b], c);
            return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c
        },
        filter: function(a) {
            return this.pushStack(w(this, a || [], !1))
        },
        not: function(a) {
            return this.pushStack(w(this, a || [], !0))
        },
        is: function(a) {
            return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length
        }
    });
    var x, y = a.document,
        z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
        A = m.fn.init = function(a, b) {
            var c, d;
            if (!a) return this;
            if ("string" == typeof a) {
                if (c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);
                if (c[1]) {
                    if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b))
                        for (c in b) m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                    return this
                }
                if (d = y.getElementById(c[2]), d && d.parentNode) {
                    if (d.id !== c[2]) return x.find(a);
                    this.length = 1, this[0] = d
                }
                return this.context = y, this.selector = a, this
            }
            return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? "undefined" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this))
        };
    A.prototype = m.fn, x = m(y);
    var B = /^(?:parents|prev(?:Until|All))/,
        C = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    m.extend({
        dir: function(a, b, c) {
            var d = [],
                e = a[b];
            while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) 1 === e.nodeType && d.push(e), e = e[b];
            return d
        },
        sibling: function(a, b) {
            for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
            return c
        }
    }), m.fn.extend({
        has: function(a) {
            var b, c = m(a, this),
                d = c.length;
            return this.filter(function() {
                for (b = 0; d > b; b++)
                    if (m.contains(this, c[b])) return !0
            })
        },
        closest: function(a, b) {
            for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++)
                for (c = this[d]; c && c !== b; c = c.parentNode)
                    if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                        f.push(c);
                        break
                    }
            return this.pushStack(f.length > 1 ? m.unique(f) : f)
        },
        index: function(a) {
            return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function(a, b) {
            return this.pushStack(m.unique(m.merge(this.get(), m(a, b))))
        },
        addBack: function(a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
        }
    });

    function D(a, b) {
        do a = a[b]; while (a && 1 !== a.nodeType);
        return a
    }
    m.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null
        },
        parents: function(a) {
            return m.dir(a, "parentNode")
        },
        parentsUntil: function(a, b, c) {
            return m.dir(a, "parentNode", c)
        },
        next: function(a) {
            return D(a, "nextSibling")
        },
        prev: function(a) {
            return D(a, "previousSibling")
        },
        nextAll: function(a) {
            return m.dir(a, "nextSibling")
        },
        prevAll: function(a) {
            return m.dir(a, "previousSibling")
        },
        nextUntil: function(a, b, c) {
            return m.dir(a, "nextSibling", c)
        },
        prevUntil: function(a, b, c) {
            return m.dir(a, "previousSibling", c)
        },
        siblings: function(a) {
            return m.sibling((a.parentNode || {}).firstChild, a)
        },
        children: function(a) {
            return m.sibling(a.firstChild)
        },
        contents: function(a) {
            return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes)
        }
    }, function(a, b) {
        m.fn[a] = function(c, d) {
            var e = m.map(this, b, c);
            return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e)
        }
    });
    var E = /\S+/g,
        F = {};

    function G(a) {
        var b = F[a] = {};
        return m.each(a.match(E) || [], function(a, c) {
            b[c] = !0
        }), b
    }
    m.Callbacks = function(a) {
        a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);
        var b, c, d, e, f, g, h = [],
            i = !a.once && [],
            j = function(l) {
                for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++)
                    if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                        c = !1;
                        break
                    }
                b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable())
            },
            k = {
                add: function() {
                    if (h) {
                        var d = h.length;
                        ! function f(b) {
                            m.each(b, function(b, c) {
                                var d = m.type(c);
                                "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c)
                            })
                        }(arguments), b ? e = h.length : c && (g = d, j(c))
                    }
                    return this
                },
                remove: function() {
                    return h && m.each(arguments, function(a, c) {
                        var d;
                        while ((d = m.inArray(c, h, d)) > -1) h.splice(d, 1), b && (e >= d && e--, f >= d && f--)
                    }), this
                },
                has: function(a) {
                    return a ? m.inArray(a, h) > -1 : !(!h || !h.length)
                },
                empty: function() {
                    return h = [], e = 0, this
                },
                disable: function() {
                    return h = i = c = void 0, this
                },
                disabled: function() {
                    return !h
                },
                lock: function() {
                    return i = void 0, c || k.disable(), this
                },
                locked: function() {
                    return !i
                },
                fireWith: function(a, c) {
                    return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this
                },
                fire: function() {
                    return k.fireWith(this, arguments), this
                },
                fired: function() {
                    return !!d
                }
            };
        return k
    }, m.extend({
        Deferred: function(a) {
            var b = [
                    ["resolve", "done", m.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", m.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", m.Callbacks("memory")]
                ],
                c = "pending",
                d = {
                    state: function() {
                        return c
                    },
                    always: function() {
                        return e.done(arguments).fail(arguments), this
                    },
                    then: function() {
                        var a = arguments;
                        return m.Deferred(function(c) {
                            m.each(b, function(b, f) {
                                var g = m.isFunction(a[b]) && a[b];
                                e[f[1]](function() {
                                    var a = g && g.apply(this, arguments);
                                    a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments)
                                })
                            }), a = null
                        }).promise()
                    },
                    promise: function(a) {
                        return null != a ? m.extend(a, d) : d
                    }
                },
                e = {};
            return d.pipe = d.then, m.each(b, function(a, f) {
                var g = f[2],
                    h = f[3];
                d[f[1]] = g.add, h && g.add(function() {
                    c = h
                }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function() {
                    return e[f[0] + "With"](this === e ? d : this, arguments), this
                }, e[f[0] + "With"] = g.fireWith
            }), d.promise(e), a && a.call(e, e), e
        },
        when: function(a) {
            var b = 0,
                c = d.call(arguments),
                e = c.length,
                f = 1 !== e || a && m.isFunction(a.promise) ? e : 0,
                g = 1 === f ? a : m.Deferred(),
                h = function(a, b, c) {
                    return function(e) {
                        b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c)
                    }
                },
                i, j, k;
            if (e > 1)
                for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
            return f || g.resolveWith(k, c), g.promise()
        }
    });
    var H;
    m.fn.ready = function(a) {
        return m.ready.promise().done(a), this
    }, m.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(a) {
            a ? m.readyWait++ : m.ready(!0)
        },
        ready: function(a) {
            if (a === !0 ? !--m.readyWait : !m.isReady) {
                if (!y.body) return setTimeout(m.ready);
                m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), m(y).off("ready")))
            }
        }
    });

    function I() {
        y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J))
    }

    function J() {
        (y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), m.ready())
    }
    m.ready.promise = function(b) {
        if (!H)
            if (H = m.Deferred(), "complete" === y.readyState) setTimeout(m.ready);
            else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), a.addEventListener("load", J, !1);
        else {
            y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);
            var c = !1;
            try {
                c = null == a.frameElement && y.documentElement
            } catch (d) {}
            c && c.doScroll && ! function e() {
                if (!m.isReady) {
                    try {
                        c.doScroll("left")
                    } catch (a) {
                        return setTimeout(e, 50)
                    }
                    I(), m.ready()
                }
            }()
        }
        return H.promise(b)
    };
    var K = "undefined",
        L;
    for (L in m(k)) break;
    k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function() {
            var a, b, c, d;
            c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d))
        }),
        function() {
            var a = y.createElement("div");
            if (null == k.deleteExpando) {
                k.deleteExpando = !0;
                try {
                    delete a.test
                } catch (b) {
                    k.deleteExpando = !1
                }
            }
            a = null
        }(), m.acceptData = function(a) {
            var b = m.noData[(a.nodeName + " ").toLowerCase()],
                c = +a.nodeType || 1;
            return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b
        };
    var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        N = /([A-Z])/g;

    function O(a, b, c) {
        if (void 0 === c && 1 === a.nodeType) {
            var d = "data-" + b.replace(N, "-$1").toLowerCase();
            if (c = a.getAttribute(d), "string" == typeof c) {
                try {
                    c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c
                } catch (e) {}
                m.data(a, b, c)
            } else c = void 0
        }
        return c
    }

    function P(a) {
        var b;
        for (b in a)
            if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
        return !0
    }

    function Q(a, b, d, e) {
        if (m.acceptData(a)) {
            var f, g, h = m.expando,
                i = a.nodeType,
                j = i ? m.cache : a,
                k = i ? a[h] : a[h] && h;
            if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : {
                toJSON: m.noop
            }), ("object" == typeof b || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f
        }
    }

    function R(a, b, c) {
        if (m.acceptData(a)) {
            var d, e, f = a.nodeType,
                g = f ? m.cache : a,
                h = f ? a[m.expando] : m.expando;
            if (g[h]) {
                if (b && (d = c ? g[h] : g[h].data)) {
                    m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length;
                    while (e--) delete d[b[e]];
                    if (c ? !P(d) : !m.isEmptyObject(d)) return
                }(c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null)
            }
        }
    }
    m.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(a) {
            return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a)
        },
        data: function(a, b, c) {
            return Q(a, b, c)
        },
        removeData: function(a, b) {
            return R(a, b)
        },
        _data: function(a, b, c) {
            return Q(a, b, c, !0)
        },
        _removeData: function(a, b) {
            return R(a, b, !0)
        }
    }), m.fn.extend({
        data: function(a, b) {
            var c, d, e, f = this[0],
                g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {
                    c = g.length;
                    while (c--) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));
                    m._data(f, "parsedAttrs", !0)
                }
                return e
            }
            return "object" == typeof a ? this.each(function() {
                m.data(this, a)
            }) : arguments.length > 1 ? this.each(function() {
                m.data(this, a, b)
            }) : f ? O(f, a, m.data(f, a)) : void 0
        },
        removeData: function(a) {
            return this.each(function() {
                m.removeData(this, a)
            })
        }
    }), m.extend({
        queue: function(a, b, c) {
            var d;
            return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = m.queue(a, b),
                d = c.length,
                e = c.shift(),
                f = m._queueHooks(a, b),
                g = function() {
                    m.dequeue(a, b)
                };
            "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire()
        },
        _queueHooks: function(a, b) {
            var c = b + "queueHooks";
            return m._data(a, c) || m._data(a, c, {
                empty: m.Callbacks("once memory").add(function() {
                    m._removeData(a, b + "queue"), m._removeData(a, c)
                })
            })
        }
    }), m.fn.extend({
        queue: function(a, b) {
            var c = 2;
            return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function() {
                var c = m.queue(this, a, b);
                m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a)
            })
        },
        dequeue: function(a) {
            return this.each(function() {
                m.dequeue(this, a)
            })
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", [])
        },
        promise: function(a, b) {
            var c, d = 1,
                e = m.Deferred(),
                f = this,
                g = this.length,
                h = function() {
                    --d || e.resolveWith(f, [f])
                };
            "string" != typeof a && (b = a, a = void 0), a = a || "fx";
            while (g--) c = m._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b)
        }
    });
    var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        T = ["Top", "Right", "Bottom", "Left"],
        U = function(a, b) {
            return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a)
        },
        V = m.access = function(a, b, c, d, e, f, g) {
            var h = 0,
                i = a.length,
                j = null == c;
            if ("object" === m.type(c)) {
                e = !0;
                for (h in c) m.access(a, b, h, c[h], !0, f, g)
            } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function(a, b, c) {
                    return j.call(m(a), c)
                })), b))
                for (; i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
            return e ? a : j ? b.call(a) : i ? b(a[0], c) : f
        },
        W = /^(?:checkbox|radio)$/i;
    ! function() {
        var a = y.createElement("input"),
            b = y.createElement("div"),
            c = y.createDocumentFragment();
        if (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent("onclick", function() {
                k.noCloneEvent = !1
            }), b.cloneNode(!0).click()), null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete b.test
            } catch (d) {
                k.deleteExpando = !1
            }
        }
    }(),
    function() {
        var b, c, d = y.createElement("div");
        for (b in {
                submit: !0,
                change: !0,
                focusin: !0
            }) c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = d.attributes[c].expando === !1);
        d = null
    }();
    var X = /^(?:input|select|textarea)$/i,
        Y = /^key/,
        Z = /^(?:mouse|pointer|contextmenu)|click/,
        $ = /^(?:focusinfocus|focusoutblur)$/,
        _ = /^([^.]*)(?:\.(.+)|)$/;

    function ab() {
        return !0
    }

    function bb() {
        return !1
    }

    function cb() {
        try {
            return y.activeElement
        } catch (a) {}
    }
    m.event = {
        global: {},
        add: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m._data(a);
            if (r) {
                c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function(a) {
                    return typeof m === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments)
                }, k.elem = a), b = (b || "").match(E) || [""], h = b.length;
                while (h--) f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({
                    type: o,
                    origType: q,
                    data: d,
                    handler: c,
                    guid: c.guid,
                    selector: e,
                    needsContext: e && m.expr.match.needsContext.test(e),
                    namespace: p.join(".")
                }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);
                a = null
            }
        },
        remove: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m.hasData(a) && m._data(a);
            if (r && (k = r.events)) {
                b = (b || "").match(E) || [""], j = b.length;
                while (j--)
                    if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
                        l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;
                        while (f--) g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
                        i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o])
                    } else
                        for (o in k) m.event.remove(a, o + b[j], c, d, !0);
                m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"))
            }
        },
        trigger: function(b, c, d, e) {
            var f, g, h, i, k, l, n, o = [d || y],
                p = j.call(b, "type") ? b.type : b,
                q = j.call(b, "namespace") ? b.namespace.split(".") : [];
            if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {
                if (!e && !k.noBubble && !m.isWindow(d)) {
                    for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), l = h;
                    l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a)
                }
                n = 0;
                while ((h = o[n++]) && !b.isPropagationStopped()) b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());
                if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {
                    l = d[g], l && (d[g] = null), m.event.triggered = p;
                    try {
                        d[p]()
                    } catch (r) {}
                    m.event.triggered = void 0, l && (d[g] = l)
                }
                return b.result
            }
        },
        dispatch: function(a) {
            a = m.event.fix(a);
            var b, c, e, f, g, h = [],
                i = d.call(arguments),
                j = (m._data(this, "events") || {})[a.type] || [],
                k = m.event.special[a.type] || {};
            if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
                h = m.event.handlers.call(this, a, j), b = 0;
                while ((f = h[b++]) && !a.isPropagationStopped()) {
                    a.currentTarget = f.elem, g = 0;
                    while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped())(!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()))
                }
                return k.postDispatch && k.postDispatch.call(this, a), a.result
            }
        },
        handlers: function(a, b) {
            var c, d, e, f, g = [],
                h = b.delegateCount,
                i = a.target;
            if (h && i.nodeType && (!a.button || "click" !== a.type))
                for (; i != this; i = i.parentNode || this)
                    if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
                        for (e = [], f = 0; h > f; f++) d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);
                        e.length && g.push({
                            elem: i,
                            handlers: e
                        })
                    }
            return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
            }), g
        },
        fix: function(a) {
            if (a[m.expando]) return a;
            var b, c, d, e = a.type,
                f = a,
                g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;
            while (b--) c = d[b], a[c] = f[c];
            return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(a, b) {
                var c, d, e, f = b.button,
                    g = b.fromElement;
                return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== cb() && this.focus) try {
                        return this.focus(), !1
                    } catch (a) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    return this === cb() && this.blur ? (this.blur(), !1) : void 0
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0
                },
                _default: function(a) {
                    return m.nodeName(a.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function(a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result)
                }
            }
        },
        simulate: function(a, b, c, d) {
            var e = m.extend(new m.Event, c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault()
        }
    }, m.removeEvent = y.removeEventListener ? function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1)
    } : function(a, b, c) {
        var d = "on" + b;
        a.detachEvent && (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c))
    }, m.Event = function(a, b) {
        return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void(this[m.expando] = !0)) : new m.Event(a, b)
    }, m.Event.prototype = {
        isDefaultPrevented: bb,
        isPropagationStopped: bb,
        isImmediatePropagationStopped: bb,
        preventDefault: function() {
            var a = this.originalEvent;
            this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1)
        },
        stopPropagation: function() {
            var a = this.originalEvent;
            this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0)
        },
        stopImmediatePropagation: function() {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation()
        }
    }, m.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(a, b) {
        m.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c, d = this,
                    e = a.relatedTarget,
                    f = a.handleObj;
                return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c
            }
        }
    }), k.submitBubbles || (m.event.special.submit = {
        setup: function() {
            return m.nodeName(this, "form") ? !1 : void m.event.add(this, "click._submit keypress._submit", function(a) {
                var b = a.target,
                    c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;
                c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function(a) {
                    a._submit_bubble = !0
                }), m._data(c, "submitBubbles", !0))
            })
        },
        postDispatch: function(a) {
            a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0))
        },
        teardown: function() {
            return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit")
        }
    }), k.changeBubbles || (m.event.special.change = {
        setup: function() {
            return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function(a) {
                "checked" === a.originalEvent.propertyName && (this._just_changed = !0)
            }), m.event.add(this, "click._change", function(a) {
                this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0)
            })), !1) : void m.event.add(this, "beforeactivate._change", function(a) {
                var b = a.target;
                X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function(a) {
                    !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0)
                }), m._data(b, "changeBubbles", !0))
            })
        },
        handle: function(a) {
            var b = a.target;
            return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0
        },
        teardown: function() {
            return m.event.remove(this, "._change"), !X.test(this.nodeName)
        }
    }), k.focusinBubbles || m.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var c = function(a) {
            m.event.simulate(b, a.target, m.event.fix(a), !0)
        };
        m.event.special[b] = {
            setup: function() {
                var d = this.ownerDocument || this,
                    e = m._data(d, b);
                e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1)
            },
            teardown: function() {
                var d = this.ownerDocument || this,
                    e = m._data(d, b) - 1;
                e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b))
            }
        }
    }), m.fn.extend({
        on: function(a, b, c, d, e) {
            var f, g;
            if ("object" == typeof a) {
                "string" != typeof b && (c = c || b, b = void 0);
                for (f in a) this.on(f, b, c, a[f], e);
                return this
            }
            if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = bb;
            else if (!d) return this;
            return 1 === e && (g = d, d = function(a) {
                return m().off(a), g.apply(this, arguments)
            }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function() {
                m.event.add(this, a, d, c, b)
            })
        },
        one: function(a, b, c, d) {
            return this.on(a, b, c, d, 1)
        },
        off: function(a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
            if ("object" == typeof a) {
                for (e in a) this.off(e, b, a[e]);
                return this
            }
            return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function() {
                m.event.remove(this, a, c, b)
            })
        },
        trigger: function(a, b) {
            return this.each(function() {
                m.event.trigger(a, b, this)
            })
        },
        triggerHandler: function(a, b) {
            var c = this[0];
            return c ? m.event.trigger(a, b, c, !0) : void 0
        }
    });

    function db(a) {
        var b = eb.split("|"),
            c = a.createDocumentFragment();
        if (c.createElement)
            while (b.length) c.createElement(b.pop());
        return c
    }
    var eb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        fb = / jQuery\d+="(?:null|\d+)"/g,
        gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"),
        hb = /^\s+/,
        ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        jb = /<([\w:]+)/,
        kb = /<tbody/i,
        lb = /<|&#?\w+;/,
        mb = /<(?:script|style|link)/i,
        nb = /checked\s*(?:[^=]|=\s*.checked.)/i,
        ob = /^$|\/(?:java|ecma)script/i,
        pb = /^true\/(.*)/,
        qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        rb = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            area: [1, "<map>", "</map>"],
            param: [1, "<object>", "</object>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
        },
        sb = db(y),
        tb = sb.appendChild(y.createElement("div"));
    rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;

    function ub(a, b) {
        var c, d, e = 0,
            f = typeof a.getElementsByTagName !== K ? a.getElementsByTagName(b || "*") : typeof a.querySelectorAll !== K ? a.querySelectorAll(b || "*") : void 0;
        if (!f)
            for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));
        return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f
    }

    function vb(a) {
        W.test(a.type) && (a.defaultChecked = a.checked)
    }

    function wb(a, b) {
        return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
    }

    function xb(a) {
        return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a
    }

    function yb(a) {
        var b = pb.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute("type"), a
    }

    function zb(a, b) {
        for (var c, d = 0; null != (c = a[d]); d++) m._data(c, "globalEval", !b || m._data(b[d], "globalEval"))
    }

    function Ab(a, b) {
        if (1 === b.nodeType && m.hasData(a)) {
            var c, d, e, f = m._data(a),
                g = m._data(b, f),
                h = f.events;
            if (h) {
                delete g.handle, g.events = {};
                for (c in h)
                    for (d = 0, e = h[c].length; e > d; d++) m.event.add(b, c, h[c][d])
            }
            g.data && (g.data = m.extend({}, g.data))
        }
    }

    function Bb(a, b) {
        var c, d, e;
        if (1 === b.nodeType) {
            if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {
                e = m._data(b);
                for (d in e.events) m.removeEvent(b, d, e.handle);
                b.removeAttribute(m.expando)
            }
            "script" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue)
        }
    }
    m.extend({
        clone: function(a, b, c) {
            var d, e, f, g, h, i = m.contains(a.ownerDocument, a);
            if (k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a)))
                for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) d[g] && Bb(e, d[g]);
            if (b)
                if (c)
                    for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) Ab(e, d[g]);
                else Ab(a, f);
            return d = ub(f, "script"), d.length > 0 && zb(d, !i && ub(a, "script")), d = h = e = null, f
        },
        buildFragment: function(a, b, c, d) {
            for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++)
                if (f = a[q], f || 0 === f)
                    if ("object" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);
                    else if (lb.test(f)) {
                h = h || o.appendChild(b.createElement("div")), i = (jb.exec(f) || ["", ""])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2], e = l[0];
                while (e--) h = h.lastChild;
                if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody) {
                    f = "table" !== i || kb.test(f) ? "<table>" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;
                    while (e--) m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j)
                }
                m.merge(p, h.childNodes), h.textContent = "";
                while (h.firstChild) h.removeChild(h.firstChild);
                h = o.lastChild
            } else p.push(b.createTextNode(f));
            h && o.removeChild(h), k.appendChecked || m.grep(ub(p, "input"), vb), q = 0;
            while (f = p[q++])
                if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), "script"), g && zb(h), c)) {
                    e = 0;
                    while (f = h[e++]) ob.test(f.type || "") && c.push(f)
                }
            return h = null, o
        },
        cleanData: function(a, b) {
            for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++)
                if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {
                    if (g.events)
                        for (e in g.events) n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
                    j[f] && (delete j[f], l ? delete d[i] : typeof d.removeAttribute !== K ? d.removeAttribute(i) : d[i] = null, c.push(f))
                }
        }
    }), m.fn.extend({
        text: function(a) {
            return V(this, function(a) {
                return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a))
            }, null, a, arguments.length)
        },
        append: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.appendChild(a)
                }
            })
        },
        prepend: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wb(this, a);
                    b.insertBefore(a, b.firstChild)
                }
            })
        },
        before: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this)
            })
        },
        after: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling)
            })
        },
        remove: function(a, b) {
            for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")), c.parentNode.removeChild(c));
            return this
        },
        empty: function() {
            for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && m.cleanData(ub(a, !1));
                while (a.firstChild) a.removeChild(a.firstChild);
                a.options && m.nodeName(a, "select") && (a.options.length = 0)
            }
            return this
        },
        clone: function(a, b) {
            return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function() {
                return m.clone(this, a, b)
            })
        },
        html: function(a) {
            return V(this, function(a) {
                var b = this[0] || {},
                    c = 0,
                    d = this.length;
                if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;
                if (!("string" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || ["", ""])[1].toLowerCase()])) {
                    a = a.replace(ib, "<$1></$2>");
                    try {
                        for (; d > c; c++) b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);
                        b = 0
                    } catch (e) {}
                }
                b && this.empty().append(a)
            }, null, a, arguments.length)
        },
        replaceWith: function() {
            var a = arguments[0];
            return this.domManip(arguments, function(b) {
                a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this)
            }), a && (a.length || a.nodeType) ? this : this.remove()
        },
        detach: function(a) {
            return this.remove(a, !0)
        },
        domManip: function(a, b) {
            a = e.apply([], a);
            var c, d, f, g, h, i, j = 0,
                l = this.length,
                n = this,
                o = l - 1,
                p = a[0],
                q = m.isFunction(p);
            if (q || l > 1 && "string" == typeof p && !k.checkClone && nb.test(p)) return this.each(function(c) {
                var d = n.eq(c);
                q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b)
            });
            if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {
                for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, "script"))), b.call(this[j], d, j);
                if (f)
                    for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) d = g[j], ob.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qb, "")));
                i = c = null
            }
            return this
        }
    }), m.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        m.fn[a] = function(a) {
            for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());
            return this.pushStack(e)
        }
    });
    var Cb, Db = {};

    function Eb(b, c) {
        var d, e = m(c.createElement(b)).appendTo(c.body),
            f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");
        return e.detach(), f
    }

    function Fb(a) {
        var b = y,
            c = Db[a];
        return c || (c = Eb(a, b), "none" !== c && c || (Cb = (Cb || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c
    }! function() {
        var a;
        k.shrinkWrapBlocks = function() {
            if (null != a) return a;
            a = !1;
            var b, c, d;
            return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0
        }
    }();
    var Gb = /^margin/,
        Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"),
        Ib, Jb, Kb = /^(top|right|bottom|left)$/;
    a.getComputedStyle ? (Ib = function(b) {
        return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null)
    }, Jb = function(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + ""
    }) : y.documentElement.currentStyle && (Ib = function(a) {
        return a.currentStyle
    }, Jb = function(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto"
    });

    function Lb(a, b) {
        return {
            get: function() {
                var c = a();
                if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments)
            }
        }
    }! function() {
        var b, c, d, e, f, g, h;
        if (b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = d && d.style) {
            c.cssText = "float:left;opacity:.5", k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, m.extend(k, {
                reliableHiddenOffsets: function() {
                    return null == g && i(), g
                },
                boxSizingReliable: function() {
                    return null == f && i(), f
                },
                pixelPosition: function() {
                    return null == e && i(), e
                },
                reliableMarginRight: function() {
                    return null == h && i(), h
                }
            });

            function i() {
                var b, c, d, i;
                c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, f = "4px" === (a.getComputedStyle(b, null) || {
                    width: "4px"
                }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight), b.removeChild(i)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", g = 0 === i[0].offsetHeight), c.removeChild(d))
            }
        }
    }(), m.swap = function(a, b, c, d) {
        var e, f, g = {};
        for (f in b) g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b) a.style[f] = g[f];
        return e
    };
    var Mb = /alpha\([^)]*\)/i,
        Nb = /opacity\s*=\s*([^)]*)/,
        Ob = /^(none|table(?!-c[ea]).+)/,
        Pb = new RegExp("^(" + S + ")(.*)$", "i"),
        Qb = new RegExp("^([+-])=(" + S + ")", "i"),
        Rb = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        Sb = {
            letterSpacing: "0",
            fontWeight: "400"
        },
        Tb = ["Webkit", "O", "Moz", "ms"];

    function Ub(a, b) {
        if (b in a) return b;
        var c = b.charAt(0).toUpperCase() + b.slice(1),
            d = b,
            e = Tb.length;
        while (e--)
            if (b = Tb[e] + c, b in a) return b;
        return d
    }

    function Vb(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fb(d.nodeName)))) : (e = U(d), (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
        for (g = 0; h > g; g++) d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
        return a
    }

    function Wb(a, b, c) {
        var d = Pb.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b
    }

    function Xb(a, b, c, d, e) {
        for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) "margin" === c && (g += m.css(a, c + T[f], !0, e)), d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));
        return g
    }

    function Yb(a, b, c) {
        var d = !0,
            e = "width" === b ? a.offsetWidth : a.offsetHeight,
            f = Ib(a),
            g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);
        if (0 >= e || null == e) {
            if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e)) return e;
            d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0
        }
        return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px"
    }
    m.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = Jb(a, "opacity");
                        return "" === c ? "1" : c
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": k.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = m.camelCase(b),
                    i = a.style;
                if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
                if (f = typeof c, "string" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try {
                    i[b] = c
                } catch (j) {}
            }
        },
        css: function(a, b, c, d) {
            var e, f, g, h = m.camelCase(b);
            return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), "normal" === f && b in Sb && (f = Sb[b]), "" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f
        }
    }), m.each(["height", "width"], function(a, b) {
        m.cssHooks[b] = {
            get: function(a, c, d) {
                return c ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Rb, function() {
                    return Yb(a, b, d)
                }) : Yb(a, b, d) : void 0
            },
            set: function(a, c, d) {
                var e = d && Ib(a);
                return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0)
            }
        }
    }), k.opacity || (m.cssHooks.opacity = {
        get: function(a, b) {
            return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : ""
        },
        set: function(a, b) {
            var c = a.style,
                d = a.currentStyle,
                e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
                f = d && d.filter || c.filter || "";
            c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Mb, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e)
        }
    }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function(a, b) {
        return b ? m.swap(a, {
            display: "inline-block"
        }, Jb, [a, "marginRight"]) : void 0
    }), m.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(a, b) {
        m.cssHooks[a + b] = {
            expand: function(c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
                return e
            }
        }, Gb.test(a) || (m.cssHooks[a + b].set = Wb)
    }), m.fn.extend({
        css: function(a, b) {
            return V(this, function(a, b, c) {
                var d, e, f = {},
                    g = 0;
                if (m.isArray(b)) {
                    for (d = Ib(a), e = b.length; e > g; g++) f[b[g]] = m.css(a, b[g], !1, d);
                    return f
                }
                return void 0 !== c ? m.style(a, b, c) : m.css(a, b)
            }, a, b, arguments.length > 1)
        },
        show: function() {
            return Vb(this, !0)
        },
        hide: function() {
            return Vb(this)
        },
        toggle: function(a) {
            return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                U(this) ? m(this).show() : m(this).hide()
            })
        }
    });

    function Zb(a, b, c, d, e) {
        return new Zb.prototype.init(a, b, c, d, e)
    }
    m.Tween = Zb, Zb.prototype = {
        constructor: Zb,
        init: function(a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px")
        },
        cur: function() {
            var a = Zb.propHooks[this.prop];
            return a && a.get ? a.get(this) : Zb.propHooks._default.get(this)
        },
        run: function(a) {
            var b, c = Zb.propHooks[this.prop];
            return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this
        }
    }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = {
        _default: {
            get: function(a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop]
            },
            set: function(a) {
                m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now
            }
        }
    }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {
        set: function(a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now)
        }
    }, m.easing = {
        linear: function(a) {
            return a
        },
        swing: function(a) {
            return .5 - Math.cos(a * Math.PI) / 2
        }
    }, m.fx = Zb.prototype.init, m.fx.step = {};
    var $b, _b, ac = /^(?:toggle|show|hide)$/,
        bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"),
        cc = /queueHooks$/,
        dc = [ic],
        ec = {
            "*": [function(a, b) {
                var c = this.createTween(a, b),
                    d = c.cur(),
                    e = bc.exec(b),
                    f = e && e[3] || (m.cssNumber[a] ? "" : "px"),
                    g = (m.cssNumber[a] || "px" !== f && +d) && bc.exec(m.css(c.elem, a)),
                    h = 1,
                    i = 20;
                if (g && g[3] !== f) {
                    f = f || g[3], e = e || [], g = +d || 1;
                    do h = h || ".5", g /= h, m.style(c.elem, a, g + f); while (h !== (h = c.cur() / d) && 1 !== h && --i)
                }
                return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c
            }]
        };

    function fc() {
        return setTimeout(function() {
            $b = void 0
        }), $b = m.now()
    }

    function gc(a, b) {
        var c, d = {
                height: a
            },
            e = 0;
        for (b = b ? 1 : 0; 4 > e; e += 2 - b) c = T[e], d["margin" + c] = d["padding" + c] = a;
        return b && (d.opacity = d.width = a), d
    }

    function hc(a, b, c) {
        for (var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length; g > f; f++)
            if (d = e[f].call(c, b, a)) return d
    }

    function ic(a, b, c) {
        var d, e, f, g, h, i, j, l, n = this,
            o = {},
            p = a.style,
            q = a.nodeType && U(a),
            r = m._data(a, "fxshow");
        c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function() {
            h.unqueued || i()
        }), h.unqueued++, n.always(function() {
            n.always(function() {
                h.unqueued--, m.queue(a, "fx").length || h.empty.fire()
            })
        })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, "display"), l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j, "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function() {
            p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2]
        }));
        for (d in b)
            if (e = b[d], ac.exec(e)) {
                if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) {
                    if ("show" !== e || !r || void 0 === r[d]) continue;
                    q = !0
                }
                o[d] = r && r[d] || m.style(a, d)
            } else j = void 0;
        if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j);
        else {
            r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function() {
                m(a).hide()
            }), n.done(function() {
                var b;
                m._removeData(a, "fxshow");
                for (b in o) m.style(a, b, o[b])
            });
            for (d in o) g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0))
        }
    }

    function jc(a, b) {
        var c, d, e, f, g;
        for (c in a)
            if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && "expand" in g) {
                f = g.expand(f), delete a[d];
                for (c in f) c in a || (a[c] = f[c], b[c] = e)
            } else b[d] = e
    }

    function kc(a, b, c) {
        var d, e, f = 0,
            g = dc.length,
            h = m.Deferred().always(function() {
                delete i.elem
            }),
            i = function() {
                if (e) return !1;
                for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) j.tweens[g].run(f);
                return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1)
            },
            j = h.promise({
                elem: a,
                props: m.extend({}, b),
                opts: m.extend(!0, {
                    specialEasing: {}
                }, c),
                originalProperties: b,
                originalOptions: c,
                startTime: $b || fc(),
                duration: c.duration,
                tweens: [],
                createTween: function(b, c) {
                    var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                    return j.tweens.push(d), d
                },
                stop: function(b) {
                    var c = 0,
                        d = b ? j.tweens.length : 0;
                    if (e) return this;
                    for (e = !0; d > c; c++) j.tweens[c].run(1);
                    return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this
                }
            }),
            k = j.props;
        for (jc(k, j.opts.specialEasing); g > f; f++)
            if (d = dc[f].call(j, a, k, j.opts)) return d;
        return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always)
    }
    m.Animation = m.extend(kc, {
            tweener: function(a, b) {
                m.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");
                for (var c, d = 0, e = a.length; e > d; d++) c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b)
            },
            prefilter: function(a, b) {
                b ? dc.unshift(a) : dc.push(a)
            }
        }), m.speed = function(a, b, c) {
            var d = a && "object" == typeof a ? m.extend({}, a) : {
                complete: c || !c && b || m.isFunction(a) && a,
                duration: a,
                easing: c && b || b && !m.isFunction(b) && b
            };
            return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function() {
                m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue)
            }, d
        }, m.fn.extend({
            fadeTo: function(a, b, c, d) {
                return this.filter(U).css("opacity", 0).show().end().animate({
                    opacity: b
                }, a, c, d)
            },
            animate: function(a, b, c, d) {
                var e = m.isEmptyObject(a),
                    f = m.speed(b, c, d),
                    g = function() {
                        var b = kc(this, m.extend({}, a), f);
                        (e || m._data(this, "finish")) && b.stop(!0)
                    };
                return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
            },
            stop: function(a, b, c) {
                var d = function(a) {
                    var b = a.stop;
                    delete a.stop, b(c)
                };
                return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function() {
                    var b = !0,
                        e = null != a && a + "queueHooks",
                        f = m.timers,
                        g = m._data(this);
                    if (e) g[e] && g[e].stop && d(g[e]);
                    else
                        for (e in g) g[e] && g[e].stop && cc.test(e) && d(g[e]);
                    for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
                    (b || !c) && m.dequeue(this, a)
                })
            },
            finish: function(a) {
                return a !== !1 && (a = a || "fx"), this.each(function() {
                    var b, c = m._data(this),
                        d = c[a + "queue"],
                        e = c[a + "queueHooks"],
                        f = m.timers,
                        g = d ? d.length : 0;
                    for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                    for (b = 0; g > b; b++) d[b] && d[b].finish && d[b].finish.call(this);
                    delete c.finish
                })
            }
        }), m.each(["toggle", "show", "hide"], function(a, b) {
            var c = m.fn[b];
            m.fn[b] = function(a, d, e) {
                return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e)
            }
        }), m.each({
            slideDown: gc("show"),
            slideUp: gc("hide"),
            slideToggle: gc("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function(a, b) {
            m.fn[a] = function(a, c, d) {
                return this.animate(b, a, c, d)
            }
        }), m.timers = [], m.fx.tick = function() {
            var a, b = m.timers,
                c = 0;
            for ($b = m.now(); c < b.length; c++) a = b[c], a() || b[c] !== a || b.splice(c--, 1);
            b.length || m.fx.stop(), $b = void 0
        }, m.fx.timer = function(a) {
            m.timers.push(a), a() ? m.fx.start() : m.timers.pop()
        }, m.fx.interval = 13, m.fx.start = function() {
            _b || (_b = setInterval(m.fx.tick, m.fx.interval))
        }, m.fx.stop = function() {
            clearInterval(_b), _b = null
        }, m.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        }, m.fn.delay = function(a, b) {
            return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function(b, c) {
                var d = setTimeout(b, a);
                c.stop = function() {
                    clearTimeout(d)
                }
            })
        },
        function() {
            var a, b, c, d, e;
            b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), k.radioValue = "t" === a.value
        }();
    var lc = /\r/g;
    m.fn.extend({
        val: function(a) {
            var b, c, d, e = this[0]; {
                if (arguments.length) return d = m.isFunction(a), this.each(function(c) {
                    var e;
                    1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function(a) {
                        return null == a ? "" : a + ""
                    })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e))
                });
                if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c)
            }
        }
    }), m.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = m.find.attr(a, "value");
                    return null != b ? b : m.trim(m.text(a))
                }
            },
            select: {
                get: function(a) {
                    for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)
                        if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))) {
                            if (b = m(c).val(), f) return b;
                            g.push(b)
                        }
                    return g
                },
                set: function(a, b) {
                    var c, d, e = a.options,
                        f = m.makeArray(b),
                        g = e.length;
                    while (g--)
                        if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0) try {
                            d.selected = c = !0
                        } catch (h) {
                            d.scrollHeight
                        } else d.selected = !1;
                    return c || (a.selectedIndex = -1), e
                }
            }
        }
    }), m.each(["radio", "checkbox"], function() {
        m.valHooks[this] = {
            set: function(a, b) {
                return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0
            }
        }, k.checkOn || (m.valHooks[this].get = function(a) {
            return null === a.getAttribute("value") ? "on" : a.value
        })
    });
    var mc, nc, oc = m.expr.attrHandle,
        pc = /^(?:checked|selected)$/i,
        qc = k.getSetAttribute,
        rc = k.input;
    m.fn.extend({
        attr: function(a, b) {
            return V(this, m.attr, a, b, arguments.length > 1)
        },
        removeAttr: function(a) {
            return this.each(function() {
                m.removeAttr(this, a)
            })
        }
    }), m.extend({
        attr: function(a, b, c) {
            var d, e, f = a.nodeType;
            if (a && 3 !== f && 8 !== f && 2 !== f) return typeof a.getAttribute === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void m.removeAttr(a, b))
        },
        removeAttr: function(a, b) {
            var c, d, e = 0,
                f = b && b.match(E);
            if (f && 1 === a.nodeType)
                while (c = f[e++]) d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), a.removeAttribute(qc ? c : d)
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b
                    }
                }
            }
        }
    }), nc = {
        set: function(a, b, c) {
            return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, c
        }
    }, m.each(m.expr.match.bool.source.match(/\w+/g), function(a, b) {
        var c = oc[b] || m.find.attr;
        oc[b] = rc && qc || !pc.test(b) ? function(a, b, d) {
            var e, f;
            return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e
        } : function(a, b, c) {
            return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null
        }
    }), rc && qc || (m.attrHooks.value = {
        set: function(a, b, c) {
            return m.nodeName(a, "input") ? void(a.defaultValue = b) : mc && mc.set(a, b, c)
        }
    }), qc || (mc = {
        set: function(a, b, c) {
            var d = a.getAttributeNode(c);
            return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0
        }
    }, oc.id = oc.name = oc.coords = function(a, b, c) {
        var d;
        return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null
    }, m.valHooks.button = {
        get: function(a, b) {
            var c = a.getAttributeNode(b);
            return c && c.specified ? c.value : void 0
        },
        set: mc.set
    }, m.attrHooks.contenteditable = {
        set: function(a, b, c) {
            mc.set(a, "" === b ? !1 : b, c)
        }
    }, m.each(["width", "height"], function(a, b) {
        m.attrHooks[b] = {
            set: function(a, c) {
                return "" === c ? (a.setAttribute(b, "auto"), c) : void 0
            }
        }
    })), k.style || (m.attrHooks.style = {
        get: function(a) {
            return a.style.cssText || void 0
        },
        set: function(a, b) {
            return a.style.cssText = b + ""
        }
    });
    var sc = /^(?:input|select|textarea|button|object)$/i,
        tc = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function(a, b) {
            return V(this, m.prop, a, b, arguments.length > 1)
        },
        removeProp: function(a) {
            return a = m.propFix[a] || a, this.each(function() {
                try {
                    this[a] = void 0, delete this[a]
                } catch (b) {}
            })
        }
    }), m.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(a, b, c) {
            var d, e, f, g = a.nodeType;
            if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    var b = m.find.attr(a, "tabindex");
                    return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1
                }
            }
        }
    }), k.hrefNormalized || m.each(["href", "src"], function(a, b) {
        m.propHooks[b] = {
            get: function(a) {
                return a.getAttribute(b, 4)
            }
        }
    }), k.optSelected || (m.propHooks.selected = {
        get: function(a) {
            var b = a.parentNode;
            return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null
        }
    }), m.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        m.propFix[this.toLowerCase()] = this
    }), k.enctype || (m.propFix.enctype = "encoding");
    var uc = /[\t\r\n\f]/g;
    m.fn.extend({
        addClass: function(a) {
            var b, c, d, e, f, g, h = 0,
                i = this.length,
                j = "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).addClass(a.call(this, b, this.className))
            });
            if (j)
                for (b = (a || "").match(E) || []; i > h; h++)
                    if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : " ")) {
                        f = 0;
                        while (e = b[f++]) d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                        g = m.trim(d), c.className !== g && (c.className = g)
                    }
            return this
        },
        removeClass: function(a) {
            var b, c, d, e, f, g, h = 0,
                i = this.length,
                j = 0 === arguments.length || "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).removeClass(a.call(this, b, this.className))
            });
            if (j)
                for (b = (a || "").match(E) || []; i > h; h++)
                    if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : "")) {
                        f = 0;
                        while (e = b[f++])
                            while (d.indexOf(" " + e + " ") >= 0) d = d.replace(" " + e + " ", " ");
                        g = a ? m.trim(d) : "", c.className !== g && (c.className = g)
                    }
            return this
        },
        toggleClass: function(a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function(c) {
                m(this).toggleClass(a.call(this, c, this.className, b), b)
            } : function() {
                if ("string" === c) {
                    var b, d = 0,
                        e = m(this),
                        f = a.match(E) || [];
                    while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b)
                } else(c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || "")
            })
        },
        hasClass: function(a) {
            for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++)
                if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0) return !0;
            return !1
        }
    }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) {
        m.fn[b] = function(a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
        }
    }), m.fn.extend({
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        },
        bind: function(a, b, c) {
            return this.on(a, null, b, c)
        },
        unbind: function(a, b) {
            return this.off(a, null, b)
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d)
        },
        undelegate: function(a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c)
        }
    });
    var vc = m.now(),
        wc = /\?/,
        xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    m.parseJSON = function(b) {
        if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
        var c, d = null,
            e = m.trim(b + "");
        return e && !m.trim(e.replace(xc, function(a, b, e, f) {
            return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "")
        })) ? Function("return " + e)() : m.error("Invalid JSON: " + b)
    }, m.parseXML = function(b) {
        var c, d;
        if (!b || "string" != typeof b) return null;
        try {
            a.DOMParser ? (d = new DOMParser, c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b))
        } catch (e) {
            c = void 0
        }
        return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), c
    };
    var yc, zc, Ac = /#.*$/,
        Bc = /([?&])_=[^&]*/,
        Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
        Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Ec = /^(?:GET|HEAD)$/,
        Fc = /^\/\//,
        Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
        Hc = {},
        Ic = {},
        Jc = "*/".concat("*");
    try {
        zc = location.href
    } catch (Kc) {
        zc = y.createElement("a"), zc.href = "", zc = zc.href
    }
    yc = Gc.exec(zc.toLowerCase()) || [];

    function Lc(a) {
        return function(b, c) {
            "string" != typeof b && (c = b, b = "*");
            var d, e = 0,
                f = b.toLowerCase().match(E) || [];
            if (m.isFunction(c))
                while (d = f[e++]) "+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c)
        }
    }

    function Mc(a, b, c, d) {
        var e = {},
            f = a === Ic;

        function g(h) {
            var i;
            return e[h] = !0, m.each(a[h] || [], function(a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1)
            }), i
        }
        return g(b.dataTypes[0]) || !e["*"] && g("*")
    }

    function Nc(a, b) {
        var c, d, e = m.ajaxSettings.flatOptions || {};
        for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
        return c && m.extend(!0, a, c), a
    }

    function Oc(a, b, c) {
        var d, e, f, g, h = a.contents,
            i = a.dataTypes;
        while ("*" === i[0]) i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
        if (e)
            for (g in h)
                if (h[g] && h[g].test(e)) {
                    i.unshift(g);
                    break
                }
        if (i[0] in c) f = i[0];
        else {
            for (g in c) {
                if (!i[0] || a.converters[g + " " + i[0]]) {
                    f = g;
                    break
                }
                d || (d = g)
            }
            f = f || d
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0
    }

    function Pc(a, b, c, d) {
        var e, f, g, h, i, j = {},
            k = a.dataTypes.slice();
        if (k[1])
            for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        while (f)
            if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())
                if ("*" === f) f = i;
                else if ("*" !== i && i !== f) {
            if (g = j[i + " " + f] || j["* " + f], !g)
                for (e in j)
                    if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                        g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                        break
                    }
            if (g !== !0)
                if (g && a["throws"]) b = g(b);
                else try {
                    b = g(b)
                } catch (l) {
                    return {
                        state: "parsererror",
                        error: g ? l : "No conversion from " + i + " to " + f
                    }
                }
        }
        return {
            state: "success",
            data: b
        }
    }
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: zc,
            type: "GET",
            isLocal: Dc.test(yc[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Jc,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": m.parseJSON,
                "text xml": m.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(a, b) {
            return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a)
        },
        ajaxPrefilter: Lc(Hc),
        ajaxTransport: Lc(Ic),
        ajax: function(a, b) {
            "object" == typeof a && (b = a, a = void 0), b = b || {};
            var c, d, e, f, g, h, i, j, k = m.ajaxSetup({}, b),
                l = k.context || k,
                n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,
                o = m.Deferred(),
                p = m.Callbacks("once memory"),
                q = k.statusCode || {},
                r = {},
                s = {},
                t = 0,
                u = "canceled",
                v = {
                    readyState: 0,
                    getResponseHeader: function(a) {
                        var b;
                        if (2 === t) {
                            if (!j) {
                                j = {};
                                while (b = Cc.exec(f)) j[b[1].toLowerCase()] = b[2]
                            }
                            b = j[a.toLowerCase()]
                        }
                        return null == b ? null : b
                    },
                    getAllResponseHeaders: function() {
                        return 2 === t ? f : null
                    },
                    setRequestHeader: function(a, b) {
                        var c = a.toLowerCase();
                        return t || (a = s[c] = s[c] || a, r[a] = b), this
                    },
                    overrideMimeType: function(a) {
                        return t || (k.mimeType = a), this
                    },
                    statusCode: function(a) {
                        var b;
                        if (a)
                            if (2 > t)
                                for (b in a) q[b] = [q[b], a[b]];
                            else v.always(a[v.status]);
                        return this
                    },
                    abort: function(a) {
                        var b = a || u;
                        return i && i.abort(b), x(0, b), this
                    }
                };
            if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + "").replace(Ac, "").replace(Fc, yc[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yc[3] || ("http:" === yc[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t) return v;
            h = m.event && k.global, h && 0 === m.active++ && m.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, "$1_=" + vc++) : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "") : k.accepts["*"]);
            for (d in k.headers) v.setRequestHeader(d, k.headers[d]);
            if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
            u = "abort";
            for (d in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) v[d](k[d]);
            if (i = Mc(Ic, k, b, v)) {
                v.readyState = 1, h && n.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function() {
                    v.abort("timeout")
                }, k.timeout));
                try {
                    t = 1, i.send(r, x)
                } catch (w) {
                    if (!(2 > t)) throw w;
                    x(-1, w)
                }
            } else x(-1, "No Transport");

            function x(a, b, c, d) {
                var j, r, s, u, w, x = b;
                2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), w = v.getResponseHeader("etag"), w && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger("ajaxComplete", [v, k]), --m.active || m.event.trigger("ajaxStop")))
            }
            return v
        },
        getJSON: function(a, b, c) {
            return m.get(a, b, c, "json")
        },
        getScript: function(a, b) {
            return m.get(a, void 0, b, "script")
        }
    }), m.each(["get", "post"], function(a, b) {
        m[b] = function(a, c, d, e) {
            return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            })
        }
    }), m._evalUrl = function(a) {
        return m.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            "throws": !0
        })
    }, m.fn.extend({
        wrapAll: function(a) {
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).wrapAll(a.call(this, b))
            });
            if (this[0]) {
                var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                    var a = this;
                    while (a.firstChild && 1 === a.firstChild.nodeType) a = a.firstChild;
                    return a
                }).append(this)
            }
            return this
        },
        wrapInner: function(a) {
            return this.each(m.isFunction(a) ? function(b) {
                m(this).wrapInner(a.call(this, b))
            } : function() {
                var b = m(this),
                    c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a)
            })
        },
        wrap: function(a) {
            var b = m.isFunction(a);
            return this.each(function(c) {
                m(this).wrapAll(b ? a.call(this, c) : a)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                m.nodeName(this, "body") || m(this).replaceWith(this.childNodes)
            }).end()
        }
    }), m.expr.filters.hidden = function(a) {
        return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"))
    }, m.expr.filters.visible = function(a) {
        return !m.expr.filters.hidden(a)
    };
    var Qc = /%20/g,
        Rc = /\[\]$/,
        Sc = /\r?\n/g,
        Tc = /^(?:submit|button|image|reset|file)$/i,
        Uc = /^(?:input|select|textarea|keygen)/i;

    function Vc(a, b, c, d) {
        var e;
        if (m.isArray(b)) m.each(b, function(b, e) {
            c || Rc.test(a) ? d(a, e) : Vc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d)
        });
        else if (c || "object" !== m.type(b)) d(a, b);
        else
            for (e in b) Vc(a + "[" + e + "]", b[e], c, d)
    }
    m.param = function(a, b) {
        var c, d = [],
            e = function(a, b) {
                b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
            };
        if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function() {
            e(this.name, this.value)
        });
        else
            for (c in a) Vc(c, a[c], b, e);
        return d.join("&").replace(Qc, "+")
    }, m.fn.extend({
        serialize: function() {
            return m.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                var a = m.prop(this, "elements");
                return a ? m.makeArray(a) : this
            }).filter(function() {
                var a = this.type;
                return this.name && !m(this).is(":disabled") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a))
            }).map(function(a, b) {
                var c = m(this).val();
                return null == c ? null : m.isArray(c) ? m.map(c, function(a) {
                    return {
                        name: b.name,
                        value: a.replace(Sc, "\r\n")
                    }
                }) : {
                    name: b.name,
                    value: c.replace(Sc, "\r\n")
                }
            }).get()
        }
    }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c()
    } : Zc;
    var Wc = 0,
        Xc = {},
        Yc = m.ajaxSettings.xhr();
    a.attachEvent && a.attachEvent("onunload", function() {
        for (var a in Xc) Xc[a](void 0, !0)
    }), k.cors = !!Yc && "withCredentials" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function(a) {
        if (!a.crossDomain || k.cors) {
            var b;
            return {
                send: function(c, d) {
                    var e, f = a.xhr(),
                        g = ++Wc;
                    if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)
                        for (e in a.xhrFields) f[e] = a.xhrFields[e];
                    a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");
                    for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
                    f.send(a.hasContent && a.data || null), b = function(c, e) {
                        var h, i, j;
                        if (b && (e || 4 === f.readyState))
                            if (delete Xc[g], b = void 0, f.onreadystatechange = m.noop, e) 4 !== f.readyState && f.abort();
                            else {
                                j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);
                                try {
                                    i = f.statusText
                                } catch (k) {
                                    i = ""
                                }
                                h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404
                            }
                        j && d(h, i, j, f.getAllResponseHeaders())
                    }, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Xc[g] = b : b()
                },
                abort: function() {
                    b && b(void 0, !0)
                }
            }
        }
    });

    function Zc() {
        try {
            return new a.XMLHttpRequest
        } catch (b) {}
    }

    function $c() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP")
        } catch (b) {}
    }
    m.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(a) {
                return m.globalEval(a), a
            }
        }
    }), m.ajaxPrefilter("script", function(a) {
        void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1)
    }), m.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var b, c = y.head || m("head")[0] || y.documentElement;
            return {
                send: function(d, e) {
                    b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function(a, c) {
                        (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"))
                    }, c.insertBefore(b, c.firstChild)
                },
                abort: function() {
                    b && b.onload(void 0, !0)
                }
            }
        }
    });
    var _c = [],
        ad = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var a = _c.pop() || m.expando + "_" + vc++;
            return this[a] = !0, a
        }
    }), m.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e, f, g, h = b.jsonp !== !1 && (ad.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ad.test(b.data) && "data");
        return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, "$1" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function() {
            return g || m.error(e + " was not called"), g[0]
        }, b.dataTypes[0] = "json", f = a[e], a[e] = function() {
            g = arguments
        }, d.always(function() {
            a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0
        }), "script") : void 0
    }), m.parseHTML = function(a, b, c) {
        if (!a || "string" != typeof a) return null;
        "boolean" == typeof b && (c = b, b = !1), b = b || y;
        var d = u.exec(a),
            e = !c && [];
        return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes))
    };
    var bd = m.fn.load;
    m.fn.load = function(a, b, c) {
        if ("string" != typeof a && bd) return bd.apply(this, arguments);
        var d, e, f, g = this,
            h = a.indexOf(" ");
        return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (f = "POST"), g.length > 0 && m.ajax({
            url: a,
            type: f,
            dataType: "html",
            data: b
        }).done(function(a) {
            e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a)
        }).complete(c && function(a, b) {
            g.each(c, e || [a.responseText, b, a])
        }), this
    }, m.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(a, b) {
        m.fn[b] = function(a) {
            return this.on(b, a)
        }
    }), m.expr.filters.animated = function(a) {
        return m.grep(m.timers, function(b) {
            return a === b.elem
        }).length
    };
    var cd = a.document.documentElement;

    function dd(a) {
        return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1
    }
    m.offset = {
        setOffset: function(a, b, c) {
            var d, e, f, g, h, i, j, k = m.css(a, "position"),
                l = m(a),
                n = {};
            "static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n)
        }
    }, m.fn.extend({
        offset: function(a) {
            if (arguments.length) return void 0 === a ? this : this.each(function(b) {
                m.offset.setOffset(this, a, b)
            });
            var b, c, d = {
                    top: 0,
                    left: 0
                },
                e = this[0],
                f = e && e.ownerDocument;
            if (f) return b = f.documentElement, m.contains(b, e) ? (typeof e.getBoundingClientRect !== K && (d = e.getBoundingClientRect()), c = dd(f), {
                top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)
            }) : d
        },
        position: function() {
            if (this[0]) {
                var a, b, c = {
                        top: 0,
                        left: 0
                    },
                    d = this[0];
                return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), c.left += m.css(a[0], "borderLeftWidth", !0)), {
                    top: b.top - c.top - m.css(d, "marginTop", !0),
                    left: b.left - c.left - m.css(d, "marginLeft", !0)
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                var a = this.offsetParent || cd;
                while (a && !m.nodeName(a, "html") && "static" === m.css(a, "position")) a = a.offsetParent;
                return a || cd
            })
        }
    }), m.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(a, b) {
        var c = /Y/.test(b);
        m.fn[a] = function(d) {
            return V(this, function(a, d, e) {
                var f = dd(a);
                return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void(f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e)
            }, a, d, arguments.length, null)
        }
    }), m.each(["top", "left"], function(a, b) {
        m.cssHooks[b] = Lb(k.pixelPosition, function(a, c) {
            return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + "px" : c) : void 0
        })
    }), m.each({
        Height: "height",
        Width: "width"
    }, function(a, b) {
        m.each({
            padding: "inner" + a,
            content: b,
            "": "outer" + a
        }, function(c, d) {
            m.fn[d] = function(d, e) {
                var f = arguments.length && (c || "boolean" != typeof d),
                    g = c || (d === !0 || e === !0 ? "margin" : "border");
                return V(this, function(b, c, d) {
                    var e;
                    return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g)
                }, b, f ? d : void 0, f, null)
            }
        })
    }), m.fn.size = function() {
        return this.length
    }, m.fn.andSelf = m.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
        return m
    });
    var ed = a.jQuery,
        fd = a.$;
    return m.noConflict = function(b) {
        return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m
    }, typeof b === K && (a.jQuery = a.$ = m), m
});
/*! Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
*/
(function() {
    var n = this,
        t = n._,
        r = Array.prototype,
        e = Object.prototype,
        u = Function.prototype,
        i = r.push,
        a = r.slice,
        o = r.concat,
        l = e.toString,
        c = e.hasOwnProperty,
        f = Array.isArray,
        s = Object.keys,
        p = u.bind,
        h = function(n) {
            return n instanceof h ? n : this instanceof h ? void(this._wrapped = n) : new h(n)
        };
    "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = h), exports._ = h) : n._ = h, h.VERSION = "1.7.0";
    var g = function(n, t, r) {
        if (t === void 0) return n;
        switch (null == r ? 3 : r) {
            case 1:
                return function(r) {
                    return n.call(t, r)
                };
            case 2:
                return function(r, e) {
                    return n.call(t, r, e)
                };
            case 3:
                return function(r, e, u) {
                    return n.call(t, r, e, u)
                };
            case 4:
                return function(r, e, u, i) {
                    return n.call(t, r, e, u, i)
                }
        }
        return function() {
            return n.apply(t, arguments)
        }
    };
    h.iteratee = function(n, t, r) {
        return null == n ? h.identity : h.isFunction(n) ? g(n, t, r) : h.isObject(n) ? h.matches(n) : h.property(n)
    }, h.each = h.forEach = function(n, t, r) {
        if (null == n) return n;
        t = g(t, r);
        var e, u = n.length;
        if (u === +u)
            for (e = 0; u > e; e++) t(n[e], e, n);
        else {
            var i = h.keys(n);
            for (e = 0, u = i.length; u > e; e++) t(n[i[e]], i[e], n)
        }
        return n
    }, h.map = h.collect = function(n, t, r) {
        if (null == n) return [];
        t = h.iteratee(t, r);
        for (var e, u = n.length !== +n.length && h.keys(n), i = (u || n).length, a = Array(i), o = 0; i > o; o++) e = u ? u[o] : o, a[o] = t(n[e], e, n);
        return a
    };
    var v = "Reduce of empty array with no initial value";
    h.reduce = h.foldl = h.inject = function(n, t, r, e) {
        null == n && (n = []), t = g(t, e, 4);
        var u, i = n.length !== +n.length && h.keys(n),
            a = (i || n).length,
            o = 0;
        if (arguments.length < 3) {
            if (!a) throw new TypeError(v);
            r = n[i ? i[o++] : o++]
        }
        for (; a > o; o++) u = i ? i[o] : o, r = t(r, n[u], u, n);
        return r
    }, h.reduceRight = h.foldr = function(n, t, r, e) {
        null == n && (n = []), t = g(t, e, 4);
        var u, i = n.length !== +n.length && h.keys(n),
            a = (i || n).length;
        if (arguments.length < 3) {
            if (!a) throw new TypeError(v);
            r = n[i ? i[--a] : --a]
        }
        for (; a--;) u = i ? i[a] : a, r = t(r, n[u], u, n);
        return r
    }, h.find = h.detect = function(n, t, r) {
        var e;
        return t = h.iteratee(t, r), h.some(n, function(n, r, u) {
            return t(n, r, u) ? (e = n, !0) : void 0
        }), e
    }, h.filter = h.select = function(n, t, r) {
        var e = [];
        return null == n ? e : (t = h.iteratee(t, r), h.each(n, function(n, r, u) {
            t(n, r, u) && e.push(n)
        }), e)
    }, h.reject = function(n, t, r) {
        return h.filter(n, h.negate(h.iteratee(t)), r)
    }, h.every = h.all = function(n, t, r) {
        if (null == n) return !0;
        t = h.iteratee(t, r);
        var e, u, i = n.length !== +n.length && h.keys(n),
            a = (i || n).length;
        for (e = 0; a > e; e++)
            if (u = i ? i[e] : e, !t(n[u], u, n)) return !1;
        return !0
    }, h.some = h.any = function(n, t, r) {
        if (null == n) return !1;
        t = h.iteratee(t, r);
        var e, u, i = n.length !== +n.length && h.keys(n),
            a = (i || n).length;
        for (e = 0; a > e; e++)
            if (u = i ? i[e] : e, t(n[u], u, n)) return !0;
        return !1
    }, h.contains = h.include = function(n, t) {
        return null == n ? !1 : (n.length !== +n.length && (n = h.values(n)), h.indexOf(n, t) >= 0)
    }, h.invoke = function(n, t) {
        var r = a.call(arguments, 2),
            e = h.isFunction(t);
        return h.map(n, function(n) {
            return (e ? t : n[t]).apply(n, r)
        })
    }, h.pluck = function(n, t) {
        return h.map(n, h.property(t))
    }, h.where = function(n, t) {
        return h.filter(n, h.matches(t))
    }, h.findWhere = function(n, t) {
        return h.find(n, h.matches(t))
    }, h.max = function(n, t, r) {
        var e, u, i = -1 / 0,
            a = -1 / 0;
        if (null == t && null != n) {
            n = n.length === +n.length ? n : h.values(n);
            for (var o = 0, l = n.length; l > o; o++) e = n[o], e > i && (i = e)
        } else t = h.iteratee(t, r), h.each(n, function(n, r, e) {
            u = t(n, r, e), (u > a || u === -1 / 0 && i === -1 / 0) && (i = n, a = u)
        });
        return i
    }, h.min = function(n, t, r) {
        var e, u, i = 1 / 0,
            a = 1 / 0;
        if (null == t && null != n) {
            n = n.length === +n.length ? n : h.values(n);
            for (var o = 0, l = n.length; l > o; o++) e = n[o], i > e && (i = e)
        } else t = h.iteratee(t, r), h.each(n, function(n, r, e) {
            u = t(n, r, e), (a > u || 1 / 0 === u && 1 / 0 === i) && (i = n, a = u)
        });
        return i
    }, h.shuffle = function(n) {
        for (var t, r = n && n.length === +n.length ? n : h.values(n), e = r.length, u = Array(e), i = 0; e > i; i++) t = h.random(0, i), t !== i && (u[i] = u[t]), u[t] = r[i];
        return u
    }, h.sample = function(n, t, r) {
        return null == t || r ? (n.length !== +n.length && (n = h.values(n)), n[h.random(n.length - 1)]) : h.shuffle(n).slice(0, Math.max(0, t))
    }, h.sortBy = function(n, t, r) {
        return t = h.iteratee(t, r), h.pluck(h.map(n, function(n, r, e) {
            return {
                value: n,
                index: r,
                criteria: t(n, r, e)
            }
        }).sort(function(n, t) {
            var r = n.criteria,
                e = t.criteria;
            if (r !== e) {
                if (r > e || r === void 0) return 1;
                if (e > r || e === void 0) return -1
            }
            return n.index - t.index
        }), "value")
    };
    var m = function(n) {
        return function(t, r, e) {
            var u = {};
            return r = h.iteratee(r, e), h.each(t, function(e, i) {
                var a = r(e, i, t);
                n(u, e, a)
            }), u
        }
    };
    h.groupBy = m(function(n, t, r) {
        h.has(n, r) ? n[r].push(t) : n[r] = [t]
    }), h.indexBy = m(function(n, t, r) {
        n[r] = t
    }), h.countBy = m(function(n, t, r) {
        h.has(n, r) ? n[r] ++ : n[r] = 1
    }), h.sortedIndex = function(n, t, r, e) {
        r = h.iteratee(r, e, 1);
        for (var u = r(t), i = 0, a = n.length; a > i;) {
            var o = i + a >>> 1;
            r(n[o]) < u ? i = o + 1 : a = o
        }
        return i
    }, h.toArray = function(n) {
        return n ? h.isArray(n) ? a.call(n) : n.length === +n.length ? h.map(n, h.identity) : h.values(n) : []
    }, h.size = function(n) {
        return null == n ? 0 : n.length === +n.length ? n.length : h.keys(n).length
    }, h.partition = function(n, t, r) {
        t = h.iteratee(t, r);
        var e = [],
            u = [];
        return h.each(n, function(n, r, i) {
            (t(n, r, i) ? e : u).push(n)
        }), [e, u]
    }, h.first = h.head = h.take = function(n, t, r) {
        return null == n ? void 0 : null == t || r ? n[0] : 0 > t ? [] : a.call(n, 0, t)
    }, h.initial = function(n, t, r) {
        return a.call(n, 0, Math.max(0, n.length - (null == t || r ? 1 : t)))
    }, h.last = function(n, t, r) {
        return null == n ? void 0 : null == t || r ? n[n.length - 1] : a.call(n, Math.max(n.length - t, 0))
    }, h.rest = h.tail = h.drop = function(n, t, r) {
        return a.call(n, null == t || r ? 1 : t)
    }, h.compact = function(n) {
        return h.filter(n, h.identity)
    };
    var y = function(n, t, r, e) {
        if (t && h.every(n, h.isArray)) return o.apply(e, n);
        for (var u = 0, a = n.length; a > u; u++) {
            var l = n[u];
            h.isArray(l) || h.isArguments(l) ? t ? i.apply(e, l) : y(l, t, r, e) : r || e.push(l)
        }
        return e
    };
    h.flatten = function(n, t) {
        return y(n, t, !1, [])
    }, h.without = function(n) {
        return h.difference(n, a.call(arguments, 1))
    }, h.uniq = h.unique = function(n, t, r, e) {
        if (null == n) return [];
        h.isBoolean(t) || (e = r, r = t, t = !1), null != r && (r = h.iteratee(r, e));
        for (var u = [], i = [], a = 0, o = n.length; o > a; a++) {
            var l = n[a];
            if (t) a && i === l || u.push(l), i = l;
            else if (r) {
                var c = r(l, a, n);
                h.indexOf(i, c) < 0 && (i.push(c), u.push(l))
            } else h.indexOf(u, l) < 0 && u.push(l)
        }
        return u
    }, h.union = function() {
        return h.uniq(y(arguments, !0, !0, []))
    }, h.intersection = function(n) {
        if (null == n) return [];
        for (var t = [], r = arguments.length, e = 0, u = n.length; u > e; e++) {
            var i = n[e];
            if (!h.contains(t, i)) {
                for (var a = 1; r > a && h.contains(arguments[a], i); a++);
                a === r && t.push(i)
            }
        }
        return t
    }, h.difference = function(n) {
        var t = y(a.call(arguments, 1), !0, !0, []);
        return h.filter(n, function(n) {
            return !h.contains(t, n)
        })
    }, h.zip = function(n) {
        if (null == n) return [];
        for (var t = h.max(arguments, "length").length, r = Array(t), e = 0; t > e; e++) r[e] = h.pluck(arguments, e);
        return r
    }, h.object = function(n, t) {
        if (null == n) return {};
        for (var r = {}, e = 0, u = n.length; u > e; e++) t ? r[n[e]] = t[e] : r[n[e][0]] = n[e][1];
        return r
    }, h.indexOf = function(n, t, r) {
        if (null == n) return -1;
        var e = 0,
            u = n.length;
        if (r) {
            if ("number" != typeof r) return e = h.sortedIndex(n, t), n[e] === t ? e : -1;
            e = 0 > r ? Math.max(0, u + r) : r
        }
        for (; u > e; e++)
            if (n[e] === t) return e;
        return -1
    }, h.lastIndexOf = function(n, t, r) {
        if (null == n) return -1;
        var e = n.length;
        for ("number" == typeof r && (e = 0 > r ? e + r + 1 : Math.min(e, r + 1)); --e >= 0;)
            if (n[e] === t) return e;
        return -1
    }, h.range = function(n, t, r) {
        arguments.length <= 1 && (t = n || 0, n = 0), r = r || 1;
        for (var e = Math.max(Math.ceil((t - n) / r), 0), u = Array(e), i = 0; e > i; i++, n += r) u[i] = n;
        return u
    };
    var d = function() {};
    h.bind = function(n, t) {
        var r, e;
        if (p && n.bind === p) return p.apply(n, a.call(arguments, 1));
        if (!h.isFunction(n)) throw new TypeError("Bind must be called on a function");
        return r = a.call(arguments, 2), e = function() {
            if (!(this instanceof e)) return n.apply(t, r.concat(a.call(arguments)));
            d.prototype = n.prototype;
            var u = new d;
            d.prototype = null;
            var i = n.apply(u, r.concat(a.call(arguments)));
            return h.isObject(i) ? i : u
        }
    }, h.partial = function(n) {
        var t = a.call(arguments, 1);
        return function() {
            for (var r = 0, e = t.slice(), u = 0, i = e.length; i > u; u++) e[u] === h && (e[u] = arguments[r++]);
            for (; r < arguments.length;) e.push(arguments[r++]);
            return n.apply(this, e)
        }
    }, h.bindAll = function(n) {
        var t, r, e = arguments.length;
        if (1 >= e) throw new Error("bindAll must be passed function names");
        for (t = 1; e > t; t++) r = arguments[t], n[r] = h.bind(n[r], n);
        return n
    }, h.memoize = function(n, t) {
        var r = function(e) {
            var u = r.cache,
                i = t ? t.apply(this, arguments) : e;
            return h.has(u, i) || (u[i] = n.apply(this, arguments)), u[i]
        };
        return r.cache = {}, r
    }, h.delay = function(n, t) {
        var r = a.call(arguments, 2);
        return setTimeout(function() {
            return n.apply(null, r)
        }, t)
    }, h.defer = function(n) {
        return h.delay.apply(h, [n, 1].concat(a.call(arguments, 1)))
    }, h.throttle = function(n, t, r) {
        var e, u, i, a = null,
            o = 0;
        r || (r = {});
        var l = function() {
            o = r.leading === !1 ? 0 : h.now(), a = null, i = n.apply(e, u), a || (e = u = null)
        };
        return function() {
            var c = h.now();
            o || r.leading !== !1 || (o = c);
            var f = t - (c - o);
            return e = this, u = arguments, 0 >= f || f > t ? (clearTimeout(a), a = null, o = c, i = n.apply(e, u), a || (e = u = null)) : a || r.trailing === !1 || (a = setTimeout(l, f)), i
        }
    }, h.debounce = function(n, t, r) {
        var e, u, i, a, o, l = function() {
            var c = h.now() - a;
            t > c && c > 0 ? e = setTimeout(l, t - c) : (e = null, r || (o = n.apply(i, u), e || (i = u = null)))
        };
        return function() {
            i = this, u = arguments, a = h.now();
            var c = r && !e;
            return e || (e = setTimeout(l, t)), c && (o = n.apply(i, u), i = u = null), o
        }
    }, h.wrap = function(n, t) {
        return h.partial(t, n)
    }, h.negate = function(n) {
        return function() {
            return !n.apply(this, arguments)
        }
    }, h.compose = function() {
        var n = arguments,
            t = n.length - 1;
        return function() {
            for (var r = t, e = n[t].apply(this, arguments); r--;) e = n[r].call(this, e);
            return e
        }
    }, h.after = function(n, t) {
        return function() {
            return --n < 1 ? t.apply(this, arguments) : void 0
        }
    }, h.before = function(n, t) {
        var r;
        return function() {
            return --n > 0 ? r = t.apply(this, arguments) : t = null, r
        }
    }, h.once = h.partial(h.before, 2), h.keys = function(n) {
        if (!h.isObject(n)) return [];
        if (s) return s(n);
        var t = [];
        for (var r in n) h.has(n, r) && t.push(r);
        return t
    }, h.values = function(n) {
        for (var t = h.keys(n), r = t.length, e = Array(r), u = 0; r > u; u++) e[u] = n[t[u]];
        return e
    }, h.pairs = function(n) {
        for (var t = h.keys(n), r = t.length, e = Array(r), u = 0; r > u; u++) e[u] = [t[u], n[t[u]]];
        return e
    }, h.invert = function(n) {
        for (var t = {}, r = h.keys(n), e = 0, u = r.length; u > e; e++) t[n[r[e]]] = r[e];
        return t
    }, h.functions = h.methods = function(n) {
        var t = [];
        for (var r in n) h.isFunction(n[r]) && t.push(r);
        return t.sort()
    }, h.extend = function(n) {
        if (!h.isObject(n)) return n;
        for (var t, r, e = 1, u = arguments.length; u > e; e++) {
            t = arguments[e];
            for (r in t) c.call(t, r) && (n[r] = t[r])
        }
        return n
    }, h.pick = function(n, t, r) {
        var e, u = {};
        if (null == n) return u;
        if (h.isFunction(t)) {
            t = g(t, r);
            for (e in n) {
                var i = n[e];
                t(i, e, n) && (u[e] = i)
            }
        } else {
            var l = o.apply([], a.call(arguments, 1));
            n = new Object(n);
            for (var c = 0, f = l.length; f > c; c++) e = l[c], e in n && (u[e] = n[e])
        }
        return u
    }, h.omit = function(n, t, r) {
        if (h.isFunction(t)) t = h.negate(t);
        else {
            var e = h.map(o.apply([], a.call(arguments, 1)), String);
            t = function(n, t) {
                return !h.contains(e, t)
            }
        }
        return h.pick(n, t, r)
    }, h.defaults = function(n) {
        if (!h.isObject(n)) return n;
        for (var t = 1, r = arguments.length; r > t; t++) {
            var e = arguments[t];
            for (var u in e) n[u] === void 0 && (n[u] = e[u])
        }
        return n
    }, h.clone = function(n) {
        return h.isObject(n) ? h.isArray(n) ? n.slice() : h.extend({}, n) : n
    }, h.tap = function(n, t) {
        return t(n), n
    };
    var b = function(n, t, r, e) {
        if (n === t) return 0 !== n || 1 / n === 1 / t;
        if (null == n || null == t) return n === t;
        n instanceof h && (n = n._wrapped), t instanceof h && (t = t._wrapped);
        var u = l.call(n);
        if (u !== l.call(t)) return !1;
        switch (u) {
            case "[object RegExp]":
            case "[object String]":
                return "" + n == "" + t;
            case "[object Number]":
                return +n !== +n ? +t !== +t : 0 === +n ? 1 / +n === 1 / t : +n === +t;
            case "[object Date]":
            case "[object Boolean]":
                return +n === +t
        }
        if ("object" != typeof n || "object" != typeof t) return !1;
        for (var i = r.length; i--;)
            if (r[i] === n) return e[i] === t;
        var a = n.constructor,
            o = t.constructor;
        if (a !== o && "constructor" in n && "constructor" in t && !(h.isFunction(a) && a instanceof a && h.isFunction(o) && o instanceof o)) return !1;
        r.push(n), e.push(t);
        var c, f;
        if ("[object Array]" === u) {
            if (c = n.length, f = c === t.length)
                for (; c-- && (f = b(n[c], t[c], r, e)););
        } else {
            var s, p = h.keys(n);
            if (c = p.length, f = h.keys(t).length === c)
                for (; c-- && (s = p[c], f = h.has(t, s) && b(n[s], t[s], r, e)););
        }
        return r.pop(), e.pop(), f
    };
    h.isEqual = function(n, t) {
        return b(n, t, [], [])
    }, h.isEmpty = function(n) {
        if (null == n) return !0;
        if (h.isArray(n) || h.isString(n) || h.isArguments(n)) return 0 === n.length;
        for (var t in n)
            if (h.has(n, t)) return !1;
        return !0
    }, h.isElement = function(n) {
        return !(!n || 1 !== n.nodeType)
    }, h.isArray = f || function(n) {
        return "[object Array]" === l.call(n)
    }, h.isObject = function(n) {
        var t = typeof n;
        return "function" === t || "object" === t && !!n
    }, h.each(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function(n) {
        h["is" + n] = function(t) {
            return l.call(t) === "[object " + n + "]"
        }
    }), h.isArguments(arguments) || (h.isArguments = function(n) {
        return h.has(n, "callee")
    }), "function" != typeof /./ && (h.isFunction = function(n) {
        return "function" == typeof n || !1
    }), h.isFinite = function(n) {
        return isFinite(n) && !isNaN(parseFloat(n))
    }, h.isNaN = function(n) {
        return h.isNumber(n) && n !== +n
    }, h.isBoolean = function(n) {
        return n === !0 || n === !1 || "[object Boolean]" === l.call(n)
    }, h.isNull = function(n) {
        return null === n
    }, h.isUndefined = function(n) {
        return n === void 0
    }, h.has = function(n, t) {
        return null != n && c.call(n, t)
    }, h.noConflict = function() {
        return n._ = t, this
    }, h.identity = function(n) {
        return n
    }, h.constant = function(n) {
        return function() {
            return n
        }
    }, h.noop = function() {}, h.property = function(n) {
        return function(t) {
            return t[n]
        }
    }, h.matches = function(n) {
        var t = h.pairs(n),
            r = t.length;
        return function(n) {
            if (null == n) return !r;
            n = new Object(n);
            for (var e = 0; r > e; e++) {
                var u = t[e],
                    i = u[0];
                if (u[1] !== n[i] || !(i in n)) return !1
            }
            return !0
        }
    }, h.times = function(n, t, r) {
        var e = Array(Math.max(0, n));
        t = g(t, r, 1);
        for (var u = 0; n > u; u++) e[u] = t(u);
        return e
    }, h.random = function(n, t) {
        return null == t && (t = n, n = 0), n + Math.floor(Math.random() * (t - n + 1))
    }, h.now = Date.now || function() {
        return (new Date).getTime()
    };
    var _ = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
        },
        w = h.invert(_),
        j = function(n) {
            var t = function(t) {
                    return n[t]
                },
                r = "(?:" + h.keys(n).join("|") + ")",
                e = RegExp(r),
                u = RegExp(r, "g");
            return function(n) {
                return n = null == n ? "" : "" + n, e.test(n) ? n.replace(u, t) : n
            }
        };
    h.escape = j(_), h.unescape = j(w), h.result = function(n, t) {
        if (null == n) return void 0;
        var r = n[t];
        return h.isFunction(r) ? n[t]() : r
    };
    var x = 0;
    h.uniqueId = function(n) {
        var t = ++x + "";
        return n ? n + t : t
    }, h.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var A = /(.)^/,
        k = {
            "'": "'",
            "\\": "\\",
            "\r": "r",
            "\n": "n",
            "\u2028": "u2028",
            "\u2029": "u2029"
        },
        O = /\\|'|\r|\n|\u2028|\u2029/g,
        F = function(n) {
            return "\\" + k[n]
        };
    h.template = function(n, t, r) {
        !t && r && (t = r), t = h.defaults({}, t, h.templateSettings);
        var e = RegExp([(t.escape || A).source, (t.interpolate || A).source, (t.evaluate || A).source].join("|") + "|$", "g"),
            u = 0,
            i = "__p+='";
        n.replace(e, function(t, r, e, a, o) {
            return i += n.slice(u, o).replace(O, F), u = o + t.length, r ? i += "'+\n((__t=(" + r + "))==null?'':_.escape(__t))+\n'" : e ? i += "'+\n((__t=(" + e + "))==null?'':__t)+\n'" : a && (i += "';\n" + a + "\n__p+='"), t
        }), i += "';\n", t.variable || (i = "with(obj||{}){\n" + i + "}\n"), i = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + i + "return __p;\n";
        try {
            var a = new Function(t.variable || "obj", "_", i)
        } catch (o) {
            throw o.source = i, o
        }
        var l = function(n) {
                return a.call(this, n, h)
            },
            c = t.variable || "obj";
        return l.source = "function(" + c + "){\n" + i + "}", l
    }, h.chain = function(n) {
        var t = h(n);
        return t._chain = !0, t
    };
    var E = function(n) {
        return this._chain ? h(n).chain() : n
    };
    h.mixin = function(n) {
        h.each(h.functions(n), function(t) {
            var r = h[t] = n[t];
            h.prototype[t] = function() {
                var n = [this._wrapped];
                return i.apply(n, arguments), E.call(this, r.apply(h, n))
            }
        })
    }, h.mixin(h), h.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(n) {
        var t = r[n];
        h.prototype[n] = function() {
            var r = this._wrapped;
            return t.apply(r, arguments), "shift" !== n && "splice" !== n || 0 !== r.length || delete r[0], E.call(this, r)
        }
    }), h.each(["concat", "join", "slice"], function(n) {
        var t = r[n];
        h.prototype[n] = function() {
            return E.call(this, t.apply(this._wrapped, arguments))
        }
    }), h.prototype.value = function() {
        return this._wrapped
    }, "function" == typeof define && define.amd && define("underscore", [], function() {
        return h
    })
}).call(this);
/*! Backbone.js 1.1.2
// (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
// Backbone may be freely distributed under the MIT license.
// For all details and documentation:
// http://backbonejs.org
*/
(function(t, e) {
    if (typeof define === "function" && define.amd) {
        define(["underscore", "jquery", "exports"], function(i, r, s) {
            t.Backbone = e(t, s, i, r)
        })
    } else if (typeof exports !== "undefined") {
        var i = require("underscore");
        e(t, exports, i)
    } else {
        t.Backbone = e(t, {}, t._, t.jQuery || t.Zepto || t.ender || t.$)
    }
})(this, function(t, e, i, r) {
    var s = t.Backbone;
    var n = [];
    var a = n.push;
    var o = n.slice;
    var h = n.splice;
    e.VERSION = "1.1.2";
    e.$ = r;
    e.noConflict = function() {
        t.Backbone = s;
        return this
    };
    e.emulateHTTP = false;
    e.emulateJSON = false;
    var u = e.Events = {
        on: function(t, e, i) {
            if (!c(this, "on", t, [e, i]) || !e) return this;
            this._events || (this._events = {});
            var r = this._events[t] || (this._events[t] = []);
            r.push({
                callback: e,
                context: i,
                ctx: i || this
            });
            return this
        },
        once: function(t, e, r) {
            if (!c(this, "once", t, [e, r]) || !e) return this;
            var s = this;
            var n = i.once(function() {
                s.off(t, n);
                e.apply(this, arguments)
            });
            n._callback = e;
            return this.on(t, n, r)
        },
        off: function(t, e, r) {
            var s, n, a, o, h, u, l, f;
            if (!this._events || !c(this, "off", t, [e, r])) return this;
            if (!t && !e && !r) {
                this._events = void 0;
                return this
            }
            o = t ? [t] : i.keys(this._events);
            for (h = 0, u = o.length; h < u; h++) {
                t = o[h];
                if (a = this._events[t]) {
                    this._events[t] = s = [];
                    if (e || r) {
                        for (l = 0, f = a.length; l < f; l++) {
                            n = a[l];
                            if (e && e !== n.callback && e !== n.callback._callback || r && r !== n.context) {
                                s.push(n)
                            }
                        }
                    }
                    if (!s.length) delete this._events[t]
                }
            }
            return this
        },
        trigger: function(t) {
            if (!this._events) return this;
            var e = o.call(arguments, 1);
            if (!c(this, "trigger", t, e)) return this;
            var i = this._events[t];
            var r = this._events.all;
            if (i) f(i, e);
            if (r) f(r, arguments);
            return this
        },
        stopListening: function(t, e, r) {
            var s = this._listeningTo;
            if (!s) return this;
            var n = !e && !r;
            if (!r && typeof e === "object") r = this;
            if (t)(s = {})[t._listenId] = t;
            for (var a in s) {
                t = s[a];
                t.off(e, r, this);
                if (n || i.isEmpty(t._events)) delete this._listeningTo[a]
            }
            return this
        }
    };
    var l = /\s+/;
    var c = function(t, e, i, r) {
        if (!i) return true;
        if (typeof i === "object") {
            for (var s in i) {
                t[e].apply(t, [s, i[s]].concat(r))
            }
            return false
        }
        if (l.test(i)) {
            var n = i.split(l);
            for (var a = 0, o = n.length; a < o; a++) {
                t[e].apply(t, [n[a]].concat(r))
            }
            return false
        }
        return true
    };
    var f = function(t, e) {
        var i, r = -1,
            s = t.length,
            n = e[0],
            a = e[1],
            o = e[2];
        switch (e.length) {
            case 0:
                while (++r < s)(i = t[r]).callback.call(i.ctx);
                return;
            case 1:
                while (++r < s)(i = t[r]).callback.call(i.ctx, n);
                return;
            case 2:
                while (++r < s)(i = t[r]).callback.call(i.ctx, n, a);
                return;
            case 3:
                while (++r < s)(i = t[r]).callback.call(i.ctx, n, a, o);
                return;
            default:
                while (++r < s)(i = t[r]).callback.apply(i.ctx, e);
                return
        }
    };
    var d = {
        listenTo: "on",
        listenToOnce: "once"
    };
    i.each(d, function(t, e) {
        u[e] = function(e, r, s) {
            var n = this._listeningTo || (this._listeningTo = {});
            var a = e._listenId || (e._listenId = i.uniqueId("l"));
            n[a] = e;
            if (!s && typeof r === "object") s = this;
            e[t](r, s, this);
            return this
        }
    });
    u.bind = u.on;
    u.unbind = u.off;
    i.extend(e, u);
    var p = e.Model = function(t, e) {
        var r = t || {};
        e || (e = {});
        this.cid = i.uniqueId("c");
        this.attributes = {};
        if (e.collection) this.collection = e.collection;
        if (e.parse) r = this.parse(r, e) || {};
        r = i.defaults({}, r, i.result(this, "defaults"));
        this.set(r, e);
        this.changed = {};
        this.initialize.apply(this, arguments)
    };
    i.extend(p.prototype, u, {
        changed: null,
        validationError: null,
        idAttribute: "id",
        initialize: function() {},
        toJSON: function(t) {
            return i.clone(this.attributes)
        },
        sync: function() {
            return e.sync.apply(this, arguments)
        },
        get: function(t) {
            return this.attributes[t]
        },
        escape: function(t) {
            return i.escape(this.get(t))
        },
        has: function(t) {
            return this.get(t) != null
        },
        set: function(t, e, r) {
            var s, n, a, o, h, u, l, c;
            if (t == null) return this;
            if (typeof t === "object") {
                n = t;
                r = e
            } else {
                (n = {})[t] = e
            }
            r || (r = {});
            if (!this._validate(n, r)) return false;
            a = r.unset;
            h = r.silent;
            o = [];
            u = this._changing;
            this._changing = true;
            if (!u) {
                this._previousAttributes = i.clone(this.attributes);
                this.changed = {}
            }
            c = this.attributes, l = this._previousAttributes;
            if (this.idAttribute in n) this.id = n[this.idAttribute];
            for (s in n) {
                e = n[s];
                if (!i.isEqual(c[s], e)) o.push(s);
                if (!i.isEqual(l[s], e)) {
                    this.changed[s] = e
                } else {
                    delete this.changed[s]
                }
                a ? delete c[s] : c[s] = e
            }
            if (!h) {
                if (o.length) this._pending = r;
                for (var f = 0, d = o.length; f < d; f++) {
                    this.trigger("change:" + o[f], this, c[o[f]], r)
                }
            }
            if (u) return this;
            if (!h) {
                while (this._pending) {
                    r = this._pending;
                    this._pending = false;
                    this.trigger("change", this, r)
                }
            }
            this._pending = false;
            this._changing = false;
            return this
        },
        unset: function(t, e) {
            return this.set(t, void 0, i.extend({}, e, {
                unset: true
            }))
        },
        clear: function(t) {
            var e = {};
            for (var r in this.attributes) e[r] = void 0;
            return this.set(e, i.extend({}, t, {
                unset: true
            }))
        },
        hasChanged: function(t) {
            if (t == null) return !i.isEmpty(this.changed);
            return i.has(this.changed, t)
        },
        changedAttributes: function(t) {
            if (!t) return this.hasChanged() ? i.clone(this.changed) : false;
            var e, r = false;
            var s = this._changing ? this._previousAttributes : this.attributes;
            for (var n in t) {
                if (i.isEqual(s[n], e = t[n])) continue;
                (r || (r = {}))[n] = e
            }
            return r
        },
        previous: function(t) {
            if (t == null || !this._previousAttributes) return null;
            return this._previousAttributes[t]
        },
        previousAttributes: function() {
            return i.clone(this._previousAttributes)
        },
        fetch: function(t) {
            t = t ? i.clone(t) : {};
            if (t.parse === void 0) t.parse = true;
            var e = this;
            var r = t.success;
            t.success = function(i) {
                if (!e.set(e.parse(i, t), t)) return false;
                if (r) r(e, i, t);
                e.trigger("sync", e, i, t)
            };
            q(this, t);
            return this.sync("read", this, t)
        },
        save: function(t, e, r) {
            var s, n, a, o = this.attributes;
            if (t == null || typeof t === "object") {
                s = t;
                r = e
            } else {
                (s = {})[t] = e
            }
            r = i.extend({
                validate: true
            }, r);
            if (s && !r.wait) {
                if (!this.set(s, r)) return false
            } else {
                if (!this._validate(s, r)) return false
            }
            if (s && r.wait) {
                this.attributes = i.extend({}, o, s)
            }
            if (r.parse === void 0) r.parse = true;
            var h = this;
            var u = r.success;
            r.success = function(t) {
                h.attributes = o;
                var e = h.parse(t, r);
                if (r.wait) e = i.extend(s || {}, e);
                if (i.isObject(e) && !h.set(e, r)) {
                    return false
                }
                if (u) u(h, t, r);
                h.trigger("sync", h, t, r)
            };
            q(this, r);
            n = this.isNew() ? "create" : r.patch ? "patch" : "update";
            if (n === "patch") r.attrs = s;
            a = this.sync(n, this, r);
            if (s && r.wait) this.attributes = o;
            return a
        },
        destroy: function(t) {
            t = t ? i.clone(t) : {};
            var e = this;
            var r = t.success;
            var s = function() {
                e.trigger("destroy", e, e.collection, t)
            };
            t.success = function(i) {
                if (t.wait || e.isNew()) s();
                if (r) r(e, i, t);
                if (!e.isNew()) e.trigger("sync", e, i, t)
            };
            if (this.isNew()) {
                t.success();
                return false
            }
            q(this, t);
            var n = this.sync("delete", this, t);
            if (!t.wait) s();
            return n
        },
        url: function() {
            var t = i.result(this, "urlRoot") || i.result(this.collection, "url") || M();
            if (this.isNew()) return t;
            return t.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id)
        },
        parse: function(t, e) {
            return t
        },
        clone: function() {
            return new this.constructor(this.attributes)
        },
        isNew: function() {
            return !this.has(this.idAttribute)
        },
        isValid: function(t) {
            return this._validate({}, i.extend(t || {}, {
                validate: true
            }))
        },
        _validate: function(t, e) {
            if (!e.validate || !this.validate) return true;
            t = i.extend({}, this.attributes, t);
            var r = this.validationError = this.validate(t, e) || null;
            if (!r) return true;
            this.trigger("invalid", this, r, i.extend(e, {
                validationError: r
            }));
            return false
        }
    });
    var v = ["keys", "values", "pairs", "invert", "pick", "omit"];
    i.each(v, function(t) {
        p.prototype[t] = function() {
            var e = o.call(arguments);
            e.unshift(this.attributes);
            return i[t].apply(i, e)
        }
    });
    var g = e.Collection = function(t, e) {
        e || (e = {});
        if (e.model) this.model = e.model;
        if (e.comparator !== void 0) this.comparator = e.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (t) this.reset(t, i.extend({
            silent: true
        }, e))
    };
    var m = {
        add: true,
        remove: true,
        merge: true
    };
    var y = {
        add: true,
        remove: false
    };
    i.extend(g.prototype, u, {
        model: p,
        initialize: function() {},
        toJSON: function(t) {
            return this.map(function(e) {
                return e.toJSON(t)
            })
        },
        sync: function() {
            return e.sync.apply(this, arguments)
        },
        add: function(t, e) {
            return this.set(t, i.extend({
                merge: false
            }, e, y))
        },
        remove: function(t, e) {
            var r = !i.isArray(t);
            t = r ? [t] : i.clone(t);
            e || (e = {});
            var s, n, a, o;
            for (s = 0, n = t.length; s < n; s++) {
                o = t[s] = this.get(t[s]);
                if (!o) continue;
                delete this._byId[o.id];
                delete this._byId[o.cid];
                a = this.indexOf(o);
                this.models.splice(a, 1);
                this.length--;
                if (!e.silent) {
                    e.index = a;
                    o.trigger("remove", o, this, e)
                }
                this._removeReference(o, e)
            }
            return r ? t[0] : t
        },
        set: function(t, e) {
            e = i.defaults({}, e, m);
            if (e.parse) t = this.parse(t, e);
            var r = !i.isArray(t);
            t = r ? t ? [t] : [] : i.clone(t);
            var s, n, a, o, h, u, l;
            var c = e.at;
            var f = this.model;
            var d = this.comparator && c == null && e.sort !== false;
            var v = i.isString(this.comparator) ? this.comparator : null;
            var g = [],
                y = [],
                _ = {};
            var b = e.add,
                w = e.merge,
                x = e.remove;
            var E = !d && b && x ? [] : false;
            for (s = 0, n = t.length; s < n; s++) {
                h = t[s] || {};
                if (h instanceof p) {
                    a = o = h
                } else {
                    a = h[f.prototype.idAttribute || "id"]
                }
                if (u = this.get(a)) {
                    if (x) _[u.cid] = true;
                    if (w) {
                        h = h === o ? o.attributes : h;
                        if (e.parse) h = u.parse(h, e);
                        u.set(h, e);
                        if (d && !l && u.hasChanged(v)) l = true
                    }
                    t[s] = u
                } else if (b) {
                    o = t[s] = this._prepareModel(h, e);
                    if (!o) continue;
                    g.push(o);
                    this._addReference(o, e)
                }
                o = u || o;
                if (E && (o.isNew() || !_[o.id])) E.push(o);
                _[o.id] = true
            }
            if (x) {
                for (s = 0, n = this.length; s < n; ++s) {
                    if (!_[(o = this.models[s]).cid]) y.push(o)
                }
                if (y.length) this.remove(y, e)
            }
            if (g.length || E && E.length) {
                if (d) l = true;
                this.length += g.length;
                if (c != null) {
                    for (s = 0, n = g.length; s < n; s++) {
                        this.models.splice(c + s, 0, g[s])
                    }
                } else {
                    if (E) this.models.length = 0;
                    var k = E || g;
                    for (s = 0, n = k.length; s < n; s++) {
                        this.models.push(k[s])
                    }
                }
            }
            if (l) this.sort({
                silent: true
            });
            if (!e.silent) {
                for (s = 0, n = g.length; s < n; s++) {
                    (o = g[s]).trigger("add", o, this, e)
                }
                if (l || E && E.length) this.trigger("sort", this, e)
            }
            return r ? t[0] : t
        },
        reset: function(t, e) {
            e || (e = {});
            for (var r = 0, s = this.models.length; r < s; r++) {
                this._removeReference(this.models[r], e)
            }
            e.previousModels = this.models;
            this._reset();
            t = this.add(t, i.extend({
                silent: true
            }, e));
            if (!e.silent) this.trigger("reset", this, e);
            return t
        },
        push: function(t, e) {
            return this.add(t, i.extend({
                at: this.length
            }, e))
        },
        pop: function(t) {
            var e = this.at(this.length - 1);
            this.remove(e, t);
            return e
        },
        unshift: function(t, e) {
            return this.add(t, i.extend({
                at: 0
            }, e))
        },
        shift: function(t) {
            var e = this.at(0);
            this.remove(e, t);
            return e
        },
        slice: function() {
            return o.apply(this.models, arguments)
        },
        get: function(t) {
            if (t == null) return void 0;
            return this._byId[t] || this._byId[t.id] || this._byId[t.cid]
        },
        at: function(t) {
            return this.models[t]
        },
        where: function(t, e) {
            if (i.isEmpty(t)) return e ? void 0 : [];
            return this[e ? "find" : "filter"](function(e) {
                for (var i in t) {
                    if (t[i] !== e.get(i)) return false
                }
                return true
            })
        },
        findWhere: function(t) {
            return this.where(t, true)
        },
        sort: function(t) {
            if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
            t || (t = {});
            if (i.isString(this.comparator) || this.comparator.length === 1) {
                this.models = this.sortBy(this.comparator, this)
            } else {
                this.models.sort(i.bind(this.comparator, this))
            }
            if (!t.silent) this.trigger("sort", this, t);
            return this
        },
        pluck: function(t) {
            return i.invoke(this.models, "get", t)
        },
        fetch: function(t) {
            t = t ? i.clone(t) : {};
            if (t.parse === void 0) t.parse = true;
            var e = t.success;
            var r = this;
            t.success = function(i) {
                var s = t.reset ? "reset" : "set";
                r[s](i, t);
                if (e) e(r, i, t);
                r.trigger("sync", r, i, t)
            };
            q(this, t);
            return this.sync("read", this, t)
        },
        create: function(t, e) {
            e = e ? i.clone(e) : {};
            if (!(t = this._prepareModel(t, e))) return false;
            if (!e.wait) this.add(t, e);
            var r = this;
            var s = e.success;
            e.success = function(t, i) {
                if (e.wait) r.add(t, e);
                if (s) s(t, i, e)
            };
            t.save(null, e);
            return t
        },
        parse: function(t, e) {
            return t
        },
        clone: function() {
            return new this.constructor(this.models)
        },
        _reset: function() {
            this.length = 0;
            this.models = [];
            this._byId = {}
        },
        _prepareModel: function(t, e) {
            if (t instanceof p) return t;
            e = e ? i.clone(e) : {};
            e.collection = this;
            var r = new this.model(t, e);
            if (!r.validationError) return r;
            this.trigger("invalid", this, r.validationError, e);
            return false
        },
        _addReference: function(t, e) {
            this._byId[t.cid] = t;
            if (t.id != null) this._byId[t.id] = t;
            if (!t.collection) t.collection = this;
            t.on("all", this._onModelEvent, this)
        },
        _removeReference: function(t, e) {
            if (this === t.collection) delete t.collection;
            t.off("all", this._onModelEvent, this)
        },
        _onModelEvent: function(t, e, i, r) {
            if ((t === "add" || t === "remove") && i !== this) return;
            if (t === "destroy") this.remove(e, r);
            if (e && t === "change:" + e.idAttribute) {
                delete this._byId[e.previous(e.idAttribute)];
                if (e.id != null) this._byId[e.id] = e
            }
            this.trigger.apply(this, arguments)
        }
    });
    var _ = ["forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample"];
    i.each(_, function(t) {
        g.prototype[t] = function() {
            var e = o.call(arguments);
            e.unshift(this.models);
            return i[t].apply(i, e)
        }
    });
    var b = ["groupBy", "countBy", "sortBy", "indexBy"];
    i.each(b, function(t) {
        g.prototype[t] = function(e, r) {
            var s = i.isFunction(e) ? e : function(t) {
                return t.get(e)
            };
            return i[t](this.models, s, r)
        }
    });
    var w = e.View = function(t) {
        this.cid = i.uniqueId("view");
        t || (t = {});
        i.extend(this, i.pick(t, E));
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents()
    };
    var x = /^(\S+)\s*(.*)$/;
    var E = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"];
    i.extend(w.prototype, u, {
        tagName: "div",
        $: function(t) {
            return this.$el.find(t)
        },
        initialize: function() {},
        render: function() {
            return this
        },
        remove: function() {
            this.$el.remove();
            this.stopListening();
            return this
        },
        setElement: function(t, i) {
            if (this.$el) this.undelegateEvents();
            this.$el = t instanceof e.$ ? t : e.$(t);
            this.el = this.$el[0];
            if (i !== false) this.delegateEvents();
            return this
        },
        delegateEvents: function(t) {
            if (!(t || (t = i.result(this, "events")))) return this;
            this.undelegateEvents();
            for (var e in t) {
                var r = t[e];
                if (!i.isFunction(r)) r = this[t[e]];
                if (!r) continue;
                var s = e.match(x);
                var n = s[1],
                    a = s[2];
                r = i.bind(r, this);
                n += ".delegateEvents" + this.cid;
                if (a === "") {
                    this.$el.on(n, r)
                } else {
                    this.$el.on(n, a, r)
                }
            }
            return this
        },
        undelegateEvents: function() {
            this.$el.off(".delegateEvents" + this.cid);
            return this
        },
        _ensureElement: function() {
            if (!this.el) {
                var t = i.extend({}, i.result(this, "attributes"));
                if (this.id) t.id = i.result(this, "id");
                if (this.className) t["class"] = i.result(this, "className");
                var r = e.$("<" + i.result(this, "tagName") + ">").attr(t);
                this.setElement(r, false)
            } else {
                this.setElement(i.result(this, "el"), false)
            }
        }
    });
    e.sync = function(t, r, s) {
        var n = T[t];
        i.defaults(s || (s = {}), {
            emulateHTTP: e.emulateHTTP,
            emulateJSON: e.emulateJSON
        });
        var a = {
            type: n,
            dataType: "json"
        };
        if (!s.url) {
            a.url = i.result(r, "url") || M()
        }
        if (s.data == null && r && (t === "create" || t === "update" || t === "patch")) {
            a.contentType = "application/json";
            a.data = JSON.stringify(s.attrs || r.toJSON(s))
        }
        if (s.emulateJSON) {
            a.contentType = "application/x-www-form-urlencoded";
            a.data = a.data ? {
                model: a.data
            } : {}
        }
        if (s.emulateHTTP && (n === "PUT" || n === "DELETE" || n === "PATCH")) {
            a.type = "POST";
            if (s.emulateJSON) a.data._method = n;
            var o = s.beforeSend;
            s.beforeSend = function(t) {
                t.setRequestHeader("X-HTTP-Method-Override", n);
                if (o) return o.apply(this, arguments)
            }
        }
        if (a.type !== "GET" && !s.emulateJSON) {
            a.processData = false
        }
        if (a.type === "PATCH" && k) {
            a.xhr = function() {
                return new ActiveXObject("Microsoft.XMLHTTP")
            }
        }
        var h = s.xhr = e.ajax(i.extend(a, s));
        r.trigger("request", r, h, s);
        return h
    };
    var k = typeof window !== "undefined" && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);
    var T = {
        create: "POST",
        update: "PUT",
        patch: "PATCH",
        "delete": "DELETE",
        read: "GET"
    };
    e.ajax = function() {
        return e.$.ajax.apply(e.$, arguments)
    };
    var $ = e.Router = function(t) {
        t || (t = {});
        if (t.routes) this.routes = t.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments)
    };
    var S = /\((.*?)\)/g;
    var H = /(\(\?)?:\w+/g;
    var A = /\*\w+/g;
    var I = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    i.extend($.prototype, u, {
        initialize: function() {},
        route: function(t, r, s) {
            if (!i.isRegExp(t)) t = this._routeToRegExp(t);
            if (i.isFunction(r)) {
                s = r;
                r = ""
            }
            if (!s) s = this[r];
            var n = this;
            e.history.route(t, function(i) {
                var a = n._extractParameters(t, i);
                n.execute(s, a);
                n.trigger.apply(n, ["route:" + r].concat(a));
                n.trigger("route", r, a);
                e.history.trigger("route", n, r, a)
            });
            return this
        },
        execute: function(t, e) {
            if (t) t.apply(this, e)
        },
        navigate: function(t, i) {
            e.history.navigate(t, i);
            return this
        },
        _bindRoutes: function() {
            if (!this.routes) return;
            this.routes = i.result(this, "routes");
            var t, e = i.keys(this.routes);
            while ((t = e.pop()) != null) {
                this.route(t, this.routes[t])
            }
        },
        _routeToRegExp: function(t) {
            t = t.replace(I, "\\$&").replace(S, "(?:$1)?").replace(H, function(t, e) {
                return e ? t : "([^/?]+)"
            }).replace(A, "([^?]*?)");
            return new RegExp("^" + t + "(?:\\?([\\s\\S]*))?$")
        },
        _extractParameters: function(t, e) {
            var r = t.exec(e).slice(1);
            return i.map(r, function(t, e) {
                if (e === r.length - 1) return t || null;
                return t ? decodeURIComponent(t) : null
            })
        }
    });
    var N = e.History = function() {
        this.handlers = [];
        i.bindAll(this, "checkUrl");
        if (typeof window !== "undefined") {
            this.location = window.location;
            this.history = window.history
        }
    };
    var R = /^[#\/]|\s+$/g;
    var O = /^\/+|\/+$/g;
    var P = /msie [\w.]+/;
    var C = /\/$/;
    var j = /#.*$/;
    N.started = false;
    i.extend(N.prototype, u, {
        interval: 50,
        atRoot: function() {
            return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root
        },
        getHash: function(t) {
            var e = (t || this).location.href.match(/#(.*)$/);
            return e ? e[1] : ""
        },
        getFragment: function(t, e) {
            if (t == null) {
                if (this._hasPushState || !this._wantsHashChange || e) {
                    t = decodeURI(this.location.pathname + this.location.search);
                    var i = this.root.replace(C, "");
                    if (!t.indexOf(i)) t = t.slice(i.length)
                } else {
                    t = this.getHash()
                }
            }
            return t.replace(R, "")
        },
        start: function(t) {
            if (N.started) throw new Error("Backbone.history has already been started");
            N.started = true;
            this.options = i.extend({
                root: "/"
            }, this.options, t);
            this.root = this.options.root;
            this._wantsHashChange = this.options.hashChange !== false;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
            var r = this.getFragment();
            var s = document.documentMode;
            var n = P.exec(navigator.userAgent.toLowerCase()) && (!s || s <= 7);
            this.root = ("/" + this.root + "/").replace(O, "/");
            if (n && this._wantsHashChange) {
                var a = e.$('<iframe src="javascript:0" tabindex="-1">');
                this.iframe = a.hide().appendTo("body")[0].contentWindow;
                this.navigate(r)
            }
            if (this._hasPushState) {
                e.$(window).on("popstate", this.checkUrl)
            } else if (this._wantsHashChange && "onhashchange" in window && !n) {
                e.$(window).on("hashchange", this.checkUrl)
            } else if (this._wantsHashChange) {
                this._checkUrlInterval = setInterval(this.checkUrl, this.interval)
            }
            this.fragment = r;
            var o = this.location;
            if (this._wantsHashChange && this._wantsPushState) {
                if (!this._hasPushState && !this.atRoot()) {
                    this.fragment = this.getFragment(null, true);
                    this.location.replace(this.root + "#" + this.fragment);
                    return true
                } else if (this._hasPushState && this.atRoot() && o.hash) {
                    this.fragment = this.getHash().replace(R, "");
                    this.history.replaceState({}, document.title, this.root + this.fragment)
                }
            }
            if (!this.options.silent) return this.loadUrl()
        },
        stop: function() {
            e.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
            if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
            N.started = false
        },
        route: function(t, e) {
            this.handlers.unshift({
                route: t,
                callback: e
            })
        },
        checkUrl: function(t) {
            var e = this.getFragment();
            if (e === this.fragment && this.iframe) {
                e = this.getFragment(this.getHash(this.iframe))
            }
            if (e === this.fragment) return false;
            if (this.iframe) this.navigate(e);
            this.loadUrl()
        },
        loadUrl: function(t) {
            t = this.fragment = this.getFragment(t);
            return i.any(this.handlers, function(e) {
                if (e.route.test(t)) {
                    e.callback(t);
                    return true
                }
            })
        },
        navigate: function(t, e) {
            if (!N.started) return false;
            if (!e || e === true) e = {
                trigger: !!e
            };
            var i = this.root + (t = this.getFragment(t || ""));
            t = t.replace(j, "");
            if (this.fragment === t) return;
            this.fragment = t;
            if (t === "" && i !== "/") i = i.slice(0, -1);
            if (this._hasPushState) {
                this.history[e.replace ? "replaceState" : "pushState"]({}, document.title, i)
            } else if (this._wantsHashChange) {
                this._updateHash(this.location, t, e.replace);
                if (this.iframe && t !== this.getFragment(this.getHash(this.iframe))) {
                    if (!e.replace) this.iframe.document.open().close();
                    this._updateHash(this.iframe.location, t, e.replace)
                }
            } else {
                return this.location.assign(i)
            }
            if (e.trigger) return this.loadUrl(t)
        },
        _updateHash: function(t, e, i) {
            if (i) {
                var r = t.href.replace(/(javascript:|#).*$/, "");
                t.replace(r + "#" + e)
            } else {
                t.hash = "#" + e
            }
        }
    });
    e.history = new N;
    var U = function(t, e) {
        var r = this;
        var s;
        if (t && i.has(t, "constructor")) {
            s = t.constructor
        } else {
            s = function() {
                return r.apply(this, arguments)
            }
        }
        i.extend(s, r, e);
        var n = function() {
            this.constructor = s
        };
        n.prototype = r.prototype;
        s.prototype = new n;
        if (t) i.extend(s.prototype, t);
        s.__super__ = r.prototype;
        return s
    };
    p.extend = g.extend = $.extend = w.extend = N.extend = U;
    var M = function() {
        throw new Error('A "url" property or function must be specified')
    };
    var q = function(t, e) {
        var i = e.error;
        e.error = function(r) {
            if (i) i(t, r, e);
            t.trigger("error", t, r, e)
        }
    };
    return e
});
window.jQuery_1_11_2 = $.noConflict(true);
window.Underscore_1_7_0 = _.noConflict();
window.Backbone_1_1_2 = Backbone.noConflict();
! function() {
    var snm = window.snm = {};
    snm.module = {};
    snm.module.view = {};
    snm.module.model = {};
    snm.module.collection = {};
    snm.util = {};
    snm.ctx = {};
    snm.$ = window.jQuery_1_11_2;
    snm._ = window.Underscore_1_7_0;
    snm.Backbone = window.Backbone_1_1_2;
    snm._.templateSettings = {
        evaluate: /<[%@]([\s\S]+?)[%@]>/g,
        interpolate: /<[%@][=|-]([\s\S]+?)[%@]>/g,
        escape: /<[%@]_([\s\S]+?)[%@]>/g
    }
}();
if (!console) {
    var console = {};
    console.log = function() {}
}
snm.api = {
    root: "",
    shoppingListProducts: "/ap/addToWishlist/?ver=RIA01-013",
    sendMail: "/ap/sendShareMail/?ver=RIA01-016",
    sendMailToken: "/ap/createToken",
    catalogNumber: "/ap/getCatalogItemInfo/?ver=RIA01-024",
    duplicateCheck: "/ap/checkLoginId/?ver=RIA01-026",
    addressSearch: "/ap/getAddr",
    stockNews: "/ap/getNotificationEmail/?ver=RIA01-031",
    deliveryDate: "/ap/getDeliveryDate/?ver=RIA01-034",
    pointUpdate: "/ap/getNanacoPoint/?ver=RIA01-038",
    keywordSearch: "/ap/gsaSearch/?ver=RIA01-039",
    keywordSearch2: "/www/ap/gsaDeliverySearch.do",
    mailPermission: "/ap/updateMailMgPermission/?ver=RIA01-040",
    giftInformationSearch: "/ap/giftGivingSearch/?ver=RIA01-041",
    omniRtoaster: "/ap/getStoreRecommend/?ver=RIA01-044"
};
snm.cookie = {
    domain01: "." + location.host.split(".").slice(-2).join(".")
};
snm.util.converter = {
    toFullPitch: function(val) {
        return this.toFullPitchAlphanumeric(this.toFullPitchKana(val))
    },
    toFullPitchAlphanumeric: function(val) {
        if (typeof val !== "string") return "";
        val = val.replace(/[A-Za-z0-9]/g, function(s) {
            return String.fromCharCode(s.charCodeAt(0) + 65248)
        });
        var halfSymbol = [" ", "!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "¥", "]", "^", "_", "`", "{", "|", "}", "~"];
        var fullSymbol = ["　", "！", "”", "＃", "＄", "％", "＆", "’", "（", "）", "＊", "＋", "，", "‐", "．", "／", "：", "；", "＜", "＝", "＞", "？", "＠", "［", "￥", "￥", "］", "＾", "＿", "‘", "｛", "｜", "｝", "～"];
        var result = "";
        for (var i = 0; i < val.length; i++) {
            var c = val.charAt(i);
            var idx = snm._.indexOf(halfSymbol, c);
            result += idx === -1 ? c : fullSymbol[idx]
        }
        return result
    },
    toFullPitchKana: function(val) {
        var fullKana = ["ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ", "゛", "。", "「", "」", "、", "・", "ヲ", "ァ", "ィ", "ゥ", "ェ", "ォ", "ャ", "ュ", "ョ", "ッ", "ー", "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク", "ケ", "コ", "サ", "シ", "ス", "セ", "ソ", "タ", "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ", "ミ", "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "ン", "゜"];
        var halfKana = ["ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ", "ﾞ", "｡", "｢", "｣", "､", "･", "ｦ", "ｧ", "ｨ", "ｩ", "ｪ", "ｫ", "ｬ", "ｭ", "ｮ", "ｯ", "ｰ", "ｱ", "ｲ", "ｳ", "ｴ", "ｵ", "ｶ", "ｷ", "ｸ", "ｹ", "ｺ", "ｻ", "ｼ", "ｽ", "ｾ", "ｿ", "ﾀ", "ﾁ", "ﾂ", "ﾃ", "ﾄ", "ﾅ", "ﾆ", "ﾇ", "ﾈ", "ﾉ", "ﾊ", "ﾋ", "ﾌ", "ﾍ", "ﾎ", "ﾏ", "ﾐ", "ﾑ", "ﾒ", "ﾓ", "ﾔ", "ﾕ", "ﾖ", "ﾗ", "ﾘ", "ﾙ", "ﾚ", "ﾛ", "ﾜ", "ﾝ", "ﾟ"];
        for (var i = 0; i < 89; i++) {
            var re = new RegExp(halfKana[i], "g");
            val = val.replace(re, fullKana[i])
        }
        return val
    }
};
snm.util.isErrorMsg = {
    init: function(val) {
        var msg;
        this.val = val.commonInfo;
        if (this.val.validateMessages && !snm._.isEmpty(this.val.validateMessages)) {
            msg = this.validateMessages()
        } else {
            msg = this.message()
        }
        return msg
    },
    validateMessages: function() {
        var i = 0,
            msg = "";
        for (var obj in this.val.validateMessages) {
            if (i > 0) {
                msg += "<br>"
            }
            msg += this.val.validateMessages[obj];
            i++
        }
        return msg
    },
    message: function() {
        if (!snm._.isEmpty(this.val.message)) {
            return this.val.message
        }
    }
};
snm.util.objValidation = function(val) {
    return !snm._.isNumber(val) && !snm._.isBoolean(val) && snm._.isEmpty(val)
};
snm.util.preload = {
    init: function(arr, callBack) {
        var loadNum = 0,
            length = arr.length,
            i;
        for (i = 0; i < length; i++) {
            snm.$("<img>").on("load error", function() {
                if (loadNum == arr.length - 1 && callBack) {
                    callBack()
                }
                loadNum++
            }).attr("src", arr[i])
        }
    }
};
snm.util.navigator = {
    init: function() {
        var userAgent = navigator.userAgent,
            ie_version = userAgent.match(/MSIE ../g),
            tablet, sp, android, is_iOS;
        if (userAgent.match(/iPod/) || userAgent.match(/iPhone/) || userAgent.match(/Android/) && userAgent.match(/Mobile/)) {
            sp = true
        } else {
            sp = false
        }
        if (userAgent.match(/iPad/) || userAgent.match(/Android/) && !userAgent.match(/Mobile/)) {
            tablet = true
        } else {
            tablet = false
        }
        if (userAgent.match(/Android/)) {
            android = true
        } else {
            android = false
        }
        if (userAgent.match(/rv:/) && userAgent.match(/Trident/)) {
            ie_version = userAgent.match(/rv:../g)
        }
        if (ie_version) ie_version = String(ie_version).match(/\d/g).join("");
        if (userAgent.match(/iPod/) || userAgent.match(/iPhone/) || userAgent.match(/iPad/)) {
            is_iOS = true
        } else {
            is_iOS = false
        }
        this.is_ie = userAgent.match(/MSIE/) || userAgent.match(/Trident/) ? true : false;
        this.ie_version = ie_version;
        this.tablet = tablet;
        this.android = android;
        this.smartphone = sp;
        this.is_iOS = is_iOS;
        this.is_edge = userAgent.match(/Edge/) ? true : false
    }
};
snm.util.navigator.init();
snm.module.model.Accordion = snm.Backbone.Model.extend({});
snm.module.collection.Accordion = snm.Backbone.Collection.extend({});
snm.module.view.Accordion = snm.Backbone.View.extend({
    param: {
        accordionCollapsible: ".js-accordionCollapsible",
        accordionHead: ".js-accordionHead",
        accordionCheck: ".js-accordionCheck",
        accordionBody: ".js-accordionBody",
        accordionCollapsedClass: "js-accordionCollapsed",
        accordionActiveClass: "is-active",
        accordionActiveTarget: ".js-accordionActiveTarget",
        accordionClass: "is-accordion",
        accordionSpeed: 300,
        dataAccordionActiveClass: "data-accordion-active-class",
        dataAccordionActiveValue: "data-accordion-active-value",
        dataAccordionNormalValue: "data-accordion-normal-value",
        accordionCheckOneOther: ".js-accordionCheckOneOther",
        accordionCheckOneOtherOpen: ".js-accordionCheckOneOther_open",
        accordionOneOtherBody: ".js-accordionOneOtherBody",
        stopJumpToEndClass: "js-accordionStopJumpToEnd"
    },
    events: {
        "click .js-accordionHead": "toggleCollapsible",
        "change .js-accordionCheck": "changeCollapsible",
        "change [class*='js-accordionCheckOneOther']": "renderOnePlace"
    },
    initialize: function() {
        var self = this;
        if (self.$el.attr(self.param.dataAccordionActiveClass)) {
            self.param.accordionActiveClass = self.$el.attr(self.param.dataAccordionActiveClass)
        }
        if (!self.$el.find(self.param.accordionCollapsible).hasClass(self.param.accordionClass)) {
            self.$el.find(self.param.accordionCollapsible).addClass(self.param.accordionClass)
        }
        self.model = new snm.Backbone.Model({
            initialize: true
        });
        self.$el.find(this.param.accordionCollapsible).each(function() {
            self.collection.push(new snm.module.model.Accordion({
                el: this,
                state: snm.$(this).hasClass(self.param.accordionCollapsedClass) || snm.$(this).find(self.param.accordionCheck).prop("checked") && snm.$(this).find(self.param.accordionBody)[0] ? "open" : "close"
            }))
        });
        this.collection.on("change", this.render, this);
        this.render();
        if (this.$el.find(this.param.accordionCheckOneOther)[0]) {
            this.onePlaceInit()
        }
        if (self.$el.hasClass(self.param.stopJumpToEndClass)) {
            self.param.clearQueue = true;
            self.param.jumpToEnd = true
        } else {
            self.param.clearQueue = false;
            self.param.jumpToEnd = false
        }
    },
    toggleCollapsible: function(e) {
        var target = this.$el.find(e.currentTarget).closest(this.param.accordionCollapsible).get(0);
        this.toggleState(target);
        return false
    },
    toggleState: function(el) {
        var model = this.collection.where({
            el: el
        })[0];
        var nextState = model.get("state") === "open" ? "close" : "open";
        model.set("state", nextState)
    },
    changeCollapsible: function() {
        var self = this;
        self.collection.each(function(model) {
            var $target = snm.$(model.get("el")).find(self.param.accordionCheck);
            model.set("state", $target.prop("checked") && snm.$(model.get("el")).find(self.param.accordionBody)[0] ? "open" : "close")
        })
    },
    render: function() {
        this.renderPanel();
        this.renderHead()
    },
    renderHead: function() {
        var self = this;
        self.collection.each(function(model) {
            var $target = snm.$(model.get("el")).find(self.param.accordionHead);
            var $activeTarget = snm.$(model.get("el")).find(self.param.accordionActiveTarget);
            if (model.get("state") === "open") {
                $target.addClass(self.param.accordionActiveClass);
                if ($target.attr(self.param.dataAccordionActiveValue)) {
                    $target.text($target.attr(self.param.dataAccordionActiveValue))
                } else {
                    var $subTarget = $target.find("[" + self.param.dataAccordionActiveValue + "]");
                    $subTarget.text($subTarget.attr(self.param.dataAccordionActiveValue))
                }
                if (!$activeTarget.hasClass(self.param.accordionActiveClass)) {
                    $activeTarget.addClass(self.param.accordionActiveClass)
                }
            } else if (model.get("state") === "close") {
                if ($target.attr(self.param.dataAccordionActiveClass)) {
                    $target.removeClass($target.attr(self.param.dataAccordionActiveClass))
                }
                $target.removeClass(self.param.accordionActiveClass);
                if ($target.attr(self.param.dataAccordionNormalValue)) {
                    $target.text($target.attr(self.param.dataAccordionNormalValue))
                } else {
                    var $subTarget = $target.find("[" + self.param.dataAccordionNormalValue + "]");
                    $subTarget.text($subTarget.attr(self.param.dataAccordionNormalValue))
                }
                $activeTarget.removeClass(self.param.accordionActiveClass)
            }
        })
    },
    renderPanel: function() {
        var self = this,
            accordionSpeed;
        if (self.model.get("initialize")) {
            accordionSpeed = 0;
            self.model.set("initialize", false)
        } else {
            accordionSpeed = self.param.accordionSpeed
        }
        self.collection.each(function(model) {
            var $target = snm.$(model.get("el")).find(self.param.accordionBody);
            if (model.get("state") === "open") {
                $target.stop(self.param.clearQueue, self.param.jumpToEnd).slideDown(accordionSpeed)
            } else if (model.get("state") === "close") {
                $target.stop(self.param.clearQueue, self.param.jumpToEnd).slideUp(accordionSpeed)
            }
        })
    },
    onePlaceInit: function() {
        var isCheck = this.$el.find(this.param.accordionCheckOneOtherOpen).prop("checked"),
            $target = this.$el.find(this.param.accordionOneOtherBody);
        if (isCheck) {
            $target.show()
        } else {
            $target.hide()
        }
    },
    renderOnePlace: function(e) {
        var $target = this.$el.find(this.param.accordionOneOtherBody),
            isCheck = snm.$(e.target).prop("checked");
        if (!snm.$(e.target).hasClass(this.param.accordionCheckOneOtherOpen.replace(".", ""))) {
            $target.stop(this.param.clearQueue, this.param.jumpToEnd).slideUp(this.param.accordionSpeed);
            return
        }
        if (isCheck) {
            $target.stop(this.param.clearQueue, this.param.jumpToEnd).slideDown(this.param.accordionSpeed)
        } else {
            $target.stop(this.param.clearQueue, this.param.jumpToEnd).slideUp(this.param.accordionSpeed)
        }
    }
});
snm.module.view.AccordionNest = snm.Backbone.View.extend({
    param: {
        accordionNestWrap: ".js-accordionNestWrap",
        accordionNestBody: ".js-accordionNestBody",
        isActive: "is-active",
        speed: 300,
        state: false
    },
    events: {
        "click .js-accordionNestTrigger": "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var self = this;
        if (this.$el.find(this.param.accordionNestWrap + "." + this.param.isActive)[0]) {
            this.$el.find(this.param.accordionNestWrap + "." + this.param.isActive).each(function() {
                snm.$(this).children(self.param.accordionNestBody).show()
            })
        }
    },
    render: function(e) {
        if (this.param.state !== false) {
            return false
        }
        this.param.state = true;
        var $target = this.$el.find(e.currentTarget),
            $targetWrap = $target.closest(this.param.accordionNestWrap);
        if ($targetWrap.hasClass(this.param.isActive)) {
            $targetWrap.children(this.param.accordionNestBody).find(this.param.accordionNestWrap + "." + this.param.isActive + " > " + this.param.accordionNestBody).slideUp(this.param.speed);
            $targetWrap.children(this.param.accordionNestBody).find(this.param.accordionNestWrap + "." + this.param.isActive).removeClass(this.param.isActive);
            $targetWrap.removeClass(this.param.isActive);
            $targetWrap.children(this.param.accordionNestBody).slideUp(this.param.speed)
        } else {
            $targetWrap.siblings("." + this.param.isActive).children(this.param.accordionNestBody).slideUp(this.param.speed);
            $targetWrap.siblings("." + this.param.isActive).children(this.param.accordionNestBody).find(this.param.accordionNestWrap + "." + this.param.isActive + " > " + this.param.accordionNestBody).slideUp(this.param.speed);
            $targetWrap.siblings("." + this.param.isActive).removeClass(this.param.isActive).find(this.param.accordionNestWrap + "." + this.param.isActive).removeClass(this.param.isActive);
            $targetWrap.addClass(this.param.isActive);
            $targetWrap.children(this.param.accordionNestBody).slideDown(this.param.speed)
        }
        this.param.state = false;
        return false
    }
});
snm.module.model.ActivityChangeCatalog = snm.Backbone.Model.extend({});
snm.module.view.ActivityChangeCatalog = snm.Backbone.View.extend({
    param: {
        activityChangeCatalogInputWrap: ".js-activityChangeCatalogInputWrap",
        activityChangeCatalogTrigger: ".js-activityChangeCatalogTrigger",
        activityChangeCatalogTarget: ".js-activityChangeCatalogTarget",
        activityChangeCatalogAddressTrigger: ".js-activityChangeCatalogAddressTrigger",
        activityChangeCatalogAddressTarget: ".js-activityChangeCatalogAddressTarget"
    },
    events: {
        "change .js-activityChangeCatalogInputWrap input": "modelChange"
    },
    initialize: function() {
        this.model.on("change:status", this.render, this);
        this.model.on("change:addressStatus", this.renderAddressInput, this);
        this.initCheck()
    },
    initCheck: function() {
        var $trigger = this.$el.find(this.param.activityChangeCatalogTrigger),
            $target = this.$el.find(this.param.activityChangeCatalogTarget),
            triggerNum = $trigger.length,
            i;
        for (i = 0; i < triggerNum; i++) {
            if ($trigger.eq(i).prop("checked")) {
                $target.eq(i).show()
            } else {
                $target.eq(i).hide()
            }
        }
        this.radioVisible()
    },
    modelChange: function(e) {
        if (snm.$(e.target).hasClass(this.param.activityChangeCatalogTrigger.replace(".", ""))) {
            this.param.checkNum = snm.$(e.target).index(this.param.activityChangeCatalogTrigger);
            this.model.set("status", true)
        } else {
            this.param.checkNum = this.$el.find(this.param.activityChangeCatalogInputWrap).index(snm.$(e.target).parents(this.param.activityChangeCatalogInputWrap));
            this.model.set("status", false)
        }
        this.radioVisible()
    },
    radioVisible: function() {
        if (this.$el.find(this.param.activityChangeCatalogAddressTrigger).prop("checked")) {
            this.model.set("addressStatus", true)
        } else {
            this.model.set("addressStatus", false)
        }
    },
    render: function() {
        if (this.model.get("status")) {
            this.$el.find(this.param.activityChangeCatalogTarget).eq(this.param.checkNum).show()
        } else {
            this.$el.find(this.param.activityChangeCatalogTarget).eq(this.param.checkNum).hide()
        }
        this.model.set("status", null, {
            silent: true
        })
    },
    renderAddressInput: function() {
        var self = this;
        if (this.model.get("addressStatus")) {
            this.$el.find(this.param.activityChangeCatalogAddressTarget).show()
        } else {
            this.$el.find(this.param.activityChangeCatalogAddressTarget).hide();
            this.$el.find(this.param.activityChangeCatalogAddressTarget).each(function() {
                if (snm.$(this).find("input:checked").length) {
                    snm.$(this).closest(self.param.activityChangeCatalogInputWrap).find("input:radio").eq(0).prop("checked", true)
                }
            })
        }
    }
});
snm.module.view.ActivityChangeSet = snm.Backbone.View.extend({
    param: {
        activityChangeSetFirstCheck: ".js-activityChangeSetFirstCheck",
        activityChangeSetSecondCheck: ".js-activityChangeSetSecondCheck",
        activityChangeSetTargetWrap: ".js-activityChangeSetTargetWrap",
        activityChangeSetTarget: ".js-activityChangeSetTarget",
        isDisabled: "is-disabled"
    },
    events: {
        "change .js-activityChangeSetFirstCheck, .js-activityChangeSetSecondCheck": "disabledCheck"
    },
    initialize: function() {
        this.disabledCheck()
    },
    disabledCheck: function() {
        var firstlen = this.$el.find(this.param.activityChangeSetFirstCheck + ":checked").length,
            secondLen = this.$el.find(this.param.activityChangeSetSecondCheck + ":checked").length;
        if (firstlen > 0 && secondLen > 0) {
            this.$el.find(this.param.activityChangeSetTargetWrap).removeClass(this.param.isDisabled);
            this.$el.find(this.param.activityChangeSetTarget).attr("disabled", false)
        } else {
            this.$el.find(this.param.activityChangeSetTargetWrap).addClass(this.param.isDisabled);
            this.$el.find(this.param.activityChangeSetTarget).attr("disabled", true)
        }
    }
});
snm.module.view.ActivityChange = snm.Backbone.View.extend({
    param: {
        activityChangeClearTrigger: ".js-activityChangeClearTrigger",
        activityChangeDisabled: ".js-activityChangeDisabled",
        activityChangeTarget: ".js-activityChangeTarget",
        isDisabled: "is-disabled",
        dataActivityAnchor: "data-activity-anchor",
        dataActivityTriggerNum: "data-activity-trigger-num",
        dataActivitySelect: "data-activity-select",
        activityChangeGroup: ".js-activityChangeGroup",
        activityChangeGroupTrigger: ".js-activityChangeGroupTrigger",
        activityChangeGroupTarget: ".js-activityChangeGroupTarget"
    },
    events: {
        "change input:not('.js-allcheckTrigger, .js-activityChangeTarget'), select.js-activityChangeClearTrigger:not('.js-activityChangeTarget')": "clearDisabled",
        "change input": "numCount"
    },
    initialize: function() {
        var i, e = {},
            $trigger = this.$el.find(this.param.activityChangeClearTrigger);
        for (i = 0; i < $trigger.length; i++) {
            e.target = $trigger.eq(i)[0];
            e.currentTarget = {
                nodeName: $trigger.eq(i)[0].nodeName
            };
            this.clearDisabled(e)
        }
        this.numCount()
    },
    clearDisabled: function(e) {
        var isSelect, hasAnchor = snm.$(e.target).attr(this.param.dataActivityAnchor),
            hasGroup = snm.$(e.target).hasClass(this.param.activityChangeGroupTrigger.replace(".", ""));
        if (e.currentTarget.nodeName === "SELECT") {
            isSelect = true
        }
        if (this.$el.find(this.param.activityChangeHowCheck).length > 0) {
            this.clearHowCheck()
        }
        if (this.$el.find(this.param.activityChangeClearTrigger).is(":checked")) {
            this.param.checked = true
        } else {
            this.param.checked = false
        }
        if (isSelect) {
            if (snm.$(e.target).find("option:selected").attr(this.param.dataActivitySelect) === "true") {
                this.param.checked = true
            } else {
                this.param.checked = false
            }
        }
        if (hasGroup) {
            this.renderGroup(snm.$(e.target))
        }
        if (hasAnchor) {
            this.activityAnchor(e)
        }
        if (hasAnchor || hasGroup) {
            return
        }
        this.render()
    },
    numCount: function() {
        var triggerNum = this.$el.attr(this.param.dataActivityTriggerNum);
        var checkedNum = this.$el.find(this.param.activityChangeClearTrigger + ":checked").length;
        if (!triggerNum) return;
        if (checkedNum == triggerNum) {
            this.$el.find(this.param.activityChangeDisabled).removeClass(this.param.isDisabled);
            this.$el.find(this.param.activityChangeDisabled + " input ," + this.param.activityChangeDisabled + " button").prop("disabled", false)
        } else {
            this.$el.find(this.param.activityChangeDisabled).addClass(this.param.isDisabled);
            this.$el.find(this.param.activityChangeDisabled + " input ," + this.param.activityChangeDisabled + " button").prop("disabled", true)
        }
    },
    render: function() {
        var bool = !this.param.checked;
        this.$el.find(this.param.activityChangeTarget).attr("disabled", bool);
        if (this.param.checked) {
            this.$el.find(this.param.activityChangeDisabled).removeClass(this.param.isDisabled)
        } else {
            this.$el.find(this.param.activityChangeDisabled).addClass(this.param.isDisabled)
        }
    },
    activityAnchor: function(e) {
        var anchorData = snm.$(e.target).attr(this.param.dataActivityAnchor),
            bool;
        var anchors = anchorData.split(" ");
        for (var i in anchors) {
            var anchor = anchors[i];
            if (e.currentTarget.nodeName === "SELECT") {
                bool = snm.$(e.target).is(":disabled") ? false : this.param.checked
            } else {
                bool = this.$el.find("[" + this.param.dataActivityAnchor + "*='" + anchor + "']").is(":checked")
            }
            this.$el.find("." + anchor + " " + this.param.activityChangeTarget).attr("disabled", !bool);
            if (bool) {
                this.$el.find("." + anchor + this.param.activityChangeDisabled).removeClass(this.param.isDisabled)
            } else {
                this.$el.find("." + anchor + this.param.activityChangeDisabled).addClass(this.param.isDisabled)
            }
        }
    },
    renderGroup: function($target) {
        var $parent = $target.closest(this.param.activityChangeGroup),
            check = !$target.prop("checked"),
            triggerNum = $parent.find(this.param.activityChangeClearTrigger).length;
        $parent.find(this.param.activityChangeGroupTarget).prop("disabled", check);
        if (triggerNum > 1) {
            $parent.find(this.param.activityChangeClearTrigger).each(function() {
                if ($target[0] !== snm.$(this)[0]) {
                    snm.$(this).trigger("change")
                }
            })
        }
    }
});
snm.module.model.AddActive = snm.Backbone.Model.extend({});
snm.module.view.AddActive = snm.Backbone.View.extend({
    param: {
        addActive: ".js-addActive",
        addActiveTarget: ".js-addActiveTarget",
        addActiveWrap: ".js-addActiveWrap",
        addActiveHasChild: ".js-addActiveHasChild",
        dataAddActive: "data-add-active",
        isActive: "is-active"
    },
    events: {
        change: "modelChange"
    },
    initialize: function() {
        var checked = this.$el.prop("checked"),
            dataAttr = this.$el.parents(this.param.addActiveTarget).attr(this.param.dataAddActive);
        this.model.set("checked", false);
        this.model.on("change", this.render, this);
        this.activeClass = dataAttr ? dataAttr : this.param.isActive;
        if (checked === true) {
            this.$el.parents(this.param.addActiveTarget).addClass(this.activeClass)
        }
    },
    modelChange: function() {
        this.model.set("checked", this.$el.prop("checked"))
    },
    render: function() {
        snm.$("input[name='" + this.$el.attr("name") + "']").parents(this.param.addActiveTarget).removeClass(this.activeClass);
        snm.$("input[name='" + this.$el.attr("name") + "']" + this.param.addActiveHasChild).closest(this.param.addActiveWrap).find(this.param.addActiveTarget).removeClass(this.activeClass);
        this.$el.parents(this.param.addActiveTarget).addClass(this.activeClass);
        this.$el.filter(this.param.addActiveHasChild).closest(this.param.addActiveWrap).find(this.param.addActive + ":checked").trigger("change");
        this.model.set("checked", false, {
            silent: true
        })
    }
});
snm.module.model.AjaxAddressSearch = snm.Backbone.Model.extend({});
snm.module.view.AjaxAddressSearch = snm.Backbone.View.extend({
    param: {
        ajaxAddressSearchCode: ".js-ajaxAddressSearchCode",
        ajaxAddressSearchBtn: ".js-ajaxAddressSearchBtn",
        addressSearchPrefecture: ".js-addressSearchPrefecture",
        addressSearchPrefectureKana: ".js-addressSearchPrefectureKana",
        addressSearchCity: ".js-addressSearchCity",
        addressSearchCityKana: ".js-addressSearchCityKana",
        addressSearchStreet: ".js-addressSearchStreet",
        addressSearchStreetKana: ".js-addressSearchStreetKana",
        addressSearchBlock: ".js-addressSearchBlock",
        addressSearchBlockKana: ".js-addressSearchBlockKana",
        addressSearchLotNumber: ".js-addressSearchLotNumber",
        addressSearchTogether: ".js-addressSearchTogether",
        ajaxAddressSearchText: ".js-ajaxAddressSearchText",
        ajaxAddressSearchBtnType2: ".js-ajaxAddressSearchBtn_type2",
        ajaxErrorMsg: ".js-ajaxErrorMsg",
        ajaxErrorMsgTarget: ".js-ajaxErrorMsgTarget",
        dataFreeInput: "data-free-input",
        dataPrefectureCode: "data-prefecture-code",
        dataCityCode: "data-city-code",
        dataStreetCode: "data-street-code",
        dataBlockPostalCode: "data-block-postalCode",
        addSelect: "<option value=''>選択してください</option>",
        initSelect: "<option value=''>----</option>",
        noneSelect: "<option value=''>選択不要です</option>"
    },
    events: {
        "click .js-ajaxAddressSearchBtn": "searchModelSet",
        "change .js-addressSearchPrefecture": "prefectureChange",
        "change .js-addressSearchCity": "cityChange",
        "change .js-addressSearchStreet": "streetChange",
        "change .js-addressSearchBlock": "blockChange"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.flagTogether = this.$el.find(this.param.addressSearchTogether)[0] ? true : false;
        this.param.flagFreeInput = this.$el.attr(this.param.dataFreeInput);
        this.model.on("change", this.getData, this);
        this.model.set("prefectureFlag", false, {
            silent: true
        })
    },
    initSelect: function() {
        this.$el.find(this.param.addressSearchPrefecture).prop("selectedIndex", 0);
        this.$el.find(this.param.addressSearchCity).html(this.param.initSelect).prop("disabled", true);
        this.$el.find(this.param.addressSearchStreet).html(this.param.initSelect).prop("disabled", true);
        this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true)
    },
    searchModelSet: function() {
        this.model.set("prefectureFlag", false, {
            silent: true
        });
        this.model.set("search", true);
        return false
    },
    getData: function() {
        var zipCode = this.$el.find(this.param.ajaxAddressSearchCode).val(),
            codePrefecture = this.$el.find(this.param.addressSearchPrefecture + " option:selected").attr(this.param.dataPrefectureCode),
            codeCity = this.$el.find(this.param.addressSearchCity + " option:selected").attr(this.param.dataCityCode) || "",
            codeStreet = this.$el.find(this.param.addressSearchStreet + " option:selected").attr(this.param.dataStreetCode) || "",
            jsonUrl, prefectureFlag, dataObj = {},
            self = this;
        jsonUrl = snm.api.root + snm.api.addressSearch;
        if (this.model.get("search")) {
            codePrefecture = ""
        }
        if (this.model.get("search") || this.model.get("changePrefecture")) {
            codeCity = ""
        }
        if (!this.model.get("changeStreet")) {
            codeStreet = ""
        }
        if (this.model.get("changePrefecture")) {
            prefectureFlag = 1
        } else {
            prefectureFlag = 0
        }
        dataObj = {
            postalCode: zipCode,
            prefectureCode: codePrefecture,
            cityCode: codeCity,
            streetCode: codeStreet,
            prefectureSelectedFlag: prefectureFlag
        };
        snm.module.ajax({
            url: jsonUrl,
            type: "POST",
            data: dataObj,
            dataType: "json",
            parentObj: this.$el,
            ajaxErrorFuncFlag: false,
            success: function(data) {
                var code = data.commonInfo.resultCode;
                if (code === "000") {
                    self.param.dataObj = data;
                    self.$el.find(self.param.ajaxErrorMsg).hide();
                    self.$el.find(self.param.ajaxAddressSearchText).show();
                    if (self.model.get("changePrefecture") || self.model.get("changeCity") || self.model.get("changeStreet")) {
                        self.renderPrefectures();
                        self.renderCity();
                        if (!snm.util.objValidation(self.param.dataObj.serviceInfo.cityList)) {
                            self.renderStreet()
                        }
                        if (!snm.util.objValidation(self.param.dataObj.serviceInfo.streetList)) {
                            self.renderBlock()
                        }
                    } else {
                        if (!self.param.flagFreeInput) self.initSelect();
                        self.renderAddress()
                    }
                } else {
                    var msg = snm.util.isErrorMsg.init(data);
                    self.$el.find(self.param.ajaxErrorMsg).show();
                    self.$el.find(self.param.ajaxErrorMsgTarget).html(msg);
                    self.$el.find(self.param.ajaxAddressSearchText).hide()
                }
                self.model.set("search", false, {
                    silent: true
                });
                self.model.set("changePrefecture", false, {
                    silent: true
                });
                self.model.set("changeCity", false, {
                    silent: true
                });
                self.model.set("changeStreet", false, {
                    silent: true
                })
            },
            error: function() {
                self.$el.find(self.param.ajaxAddressSearchText).hide();
                self.model.set("search", false, {
                    silent: true
                });
                self.model.set("changePrefecture", false, {
                    silent: true
                });
                self.model.set("changeCity", false, {
                    silent: true
                });
                self.model.set("changeStreet", false, {
                    silent: true
                })
            }
        })
    },
    renderAddress: function() {
        this.renderPrefectures();
        this.$el.find(this.param.addressSearchPrefecture).prop("disabled", false);
        if (this.param.flagTogether) {
            this.renderTogether();
            return
        }
        if (this.param.dataObj.serviceInfo.selectedPrefectureName !== "") {
            this.renderCity()
        }
        if (this.param.dataObj.serviceInfo.selectedCityName !== "") {
            this.renderStreet()
        }
        if (this.param.dataObj.serviceInfo.selectedStreetName !== "") {
            this.renderBlock()
        }
        if (this.param.dataObj.serviceInfo.selectedStreetName === "" && this.param.dataObj.serviceInfo.selectedBlockName !== "" && !this.param.flagFreeInput) {
            this.$el.find(this.param.addressSearchStreet).html(this.param.initSelect).prop("disabled", true);
            this.$el.find(this.param.addressSearchBlock).prop("disabled", false);
            this.renderBlock()
        }
    },
    prefectureChange: function() {
        this.$el.find(this.param.addressSearchCity + " option").attr(this.param.dataCityCode, "");
        this.$el.find(this.param.addressSearchStreet + " option").attr(this.param.dataStreetCode, "");
        if (this.param.flagTogether || this.param.flagFreeInput) {
            return
        }
        if (this.$el.find(this.param.addressSearchPrefecture).prop("selectedIndex") !== 0) {
            this.model.set("prefectureFlag", true, {
                silent: true
            });
            this.model.set("changePrefecture", true)
        } else {
            this.$el.find(this.param.addressSearchCity).html(this.param.initSelect).prop("disabled", true);
            this.$el.find(this.param.addressSearchStreet).html(this.param.initSelect).prop("disabled", true);
            this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true)
        }
    },
    cityChange: function() {
        this.$el.find(this.param.addressSearchStreet + " option").attr(this.param.dataStreetCode, "");
        if (this.param.flagTogether || this.param.flagFreeInput) {
            return
        }
        if (this.$el.find(this.param.addressSearchCity).prop("selectedIndex") !== 0) {
            this.model.set("changeCity", true)
        } else {
            this.$el.find(this.param.addressSearchStreet).html(this.param.initSelect).prop("disabled", true);
            this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true)
        }
    },
    streetChange: function() {
        if (this.param.flagTogether || this.param.flagFreeInput) {
            return
        }
        if (this.$el.find(this.param.addressSearchStreet).prop("selectedIndex") !== 0) {
            this.model.set("changeStreet", true)
        } else {
            this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true)
        }
    },
    blockChange: function() {
        var selectIndex = this.$el.find(this.param.addressSearchBlock).prop("selectedIndex"),
            selectedOption = this.$el.find(this.param.addressSearchBlock + " option").eq(selectIndex);
        if (selectIndex !== 0) {
            if (!snm.util.objValidation(selectedOption.attr(this.param.dataBlockPostalCode))) {
                this.$el.find(this.param.ajaxAddressSearchCode).val(selectedOption.attr(this.param.dataBlockPostalCode))
            }
        } else {}
    },
    renderPrefectures: function() {
        this.$el.find(this.param.addressSearchLotNumber).prop("disabled", false);
        this.$el.find(this.param.ajaxAddressSearchCode).val(this.param.dataObj.serviceInfo.displayPostalCode);
        var prefectures = this.param.dataObj.serviceInfo.selectedPrefectureName,
            data = this.param.dataObj.serviceInfo.prefectureList,
            option = "",
            i, selected;
        if (data.length > 1) {
            option += this.param.addSelect
        }
        if (this.$el.find(this.param.ajaxAddressSearchBtnType2)[0]) {
            this.$el.find(this.param.addressSearchPrefecture + ' option[value="' + this.param.dataObj.serviceInfo.selectedPrefectureCode + '"]').prop("selected", true);
            return
        }
        for (i = 0; i < data.length; i++) {
            selected = data[i].prefectureName === prefectures ? "selected='selected'" : "";
            option += "<option value='" + data[i].prefectureName + "' " + this.param.dataPrefectureCode + "='" + data[i].prefectureCode + "' " + selected + ">" + data[i].prefectureName + "</option>"
        }
        this.$el.find(this.param.addressSearchPrefecture).html(option)
    },
    renderCity: function() {
        var initCity = this.param.dataObj.serviceInfo.selectedCityCode,
            data = this.param.dataObj.serviceInfo.cityList,
            option = "",
            i, selected;
        if (this.param.flagFreeInput) {
            this.renderInput();
            return false
        }
        this.$el.find(this.param.addressSearchCity).prop("disabled", false);
        this.$el.find(this.param.addressSearchStreet).html(this.param.initSelect).prop("disabled", true);
        this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true);
        if (initCity !== "") {}
        if (data.length > 1) {
            option += this.param.addSelect
        } else {}
        for (i = 0; i < data.length; i++) {
            selected = data[i].cityCode === initCity ? "selected='selected'" : "";
            option += "<option value='" + data[i].cityName + "' " + this.param.dataCityCode + "='" + data[i].cityCode + "' " + selected + ">" + data[i].cityName + "</option>"
        }
        this.$el.find(this.param.addressSearchCity).html(option)
    },
    renderStreet: function() {
        var initStreet = this.param.dataObj.serviceInfo.selectedStreetCode,
            data = this.param.dataObj.serviceInfo.streetList,
            option = "",
            i, selected;
        if (this.param.flagFreeInput) {
            this.renderInput();
            return false
        }
        if (data.length === 0) {
            this.$el.find(this.param.addressSearchStreet).html(this.param.initSelect).prop("disabled", true);
            this.renderBlock();
            return
        }
        this.$el.find(this.param.addressSearchStreet).prop("disabled", false);
        this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true);
        if (initStreet !== "") {}
        if (data.length > 1) {
            option += this.param.addSelect
        } else {}
        for (i = 0; i < data.length; i++) {
            selected = data[i].streetCode === initStreet ? "selected='selected'" : "";
            option += "<option value='" + data[i].streetName + "' " + this.param.dataStreetCode + "='" + data[i].streetCode + "' " + selected + ">" + data[i].streetName + "</option>"
        }
        this.$el.find(this.param.addressSearchStreet).html(option)
    },
    renderBlock: function() {
        var initBlock = this.param.dataObj.serviceInfo.selectedBlockCode,
            data = this.param.dataObj.serviceInfo.blockList,
            option = "",
            i, selected, postalCode;
        if (this.param.flagFreeInput) return false;
        if (data.length === 0) {
            this.$el.find(this.param.addressSearchBlock).html(this.param.initSelect).prop("disabled", true);
            return false
        }
        this.$el.find(this.param.addressSearchBlock).prop("disabled", false);
        if (initBlock !== "") {}
        if (data.length > 1) {
            option += this.param.addSelect
        }
        for (i = 0; i < data.length; i++) {
            selected = data[i].blockCode === initBlock ? " selected='selected'" : "";
            postalCode = !snm.util.objValidation(data[i].postalCode) ? " data-block-postalCode='" + data[i].postalCode + "'" : "";
            option += "<option value='" + data[i].blockName + "' data-block-code='" + data[i].blockCode + "'" + postalCode + selected + ">" + data[i].blockName + "</option>"
        }
        this.$el.find(this.param.addressSearchBlock).html(option)
    },
    renderTogether: function() {
        var address = "",
            cityName = this.param.dataObj.serviceInfo.selectedCityName,
            streetName = this.param.dataObj.serviceInfo.selectedStreetName,
            blockName = this.param.dataObj.serviceInfo.selectedBlockName;
        if (this.param.dataObj.serviceInfo.selectedCityCode !== "000" && cityName !== "市区郡名なし") {
            address = cityName
        }
        if (this.param.dataObj.serviceInfo.selectedStreetCode !== "000" && streetName !== "町・村名なし") {
            address = address + streetName;
            if (this.param.dataObj.serviceInfo.selectedBlockCode !== "000" && blockName !== "字・丁目名なし") {
                address = address + blockName
            }
        }
        this.$el.find(this.param.addressSearchTogether).val(address)
    },
    renderInput: function() {
        var data = this.param.dataObj.serviceInfo;
        var address = "";
        this.$el.find(this.param.addressSearchCity).val(data.selectedCityName);
        if (data.selectedStreetCode !== "000" && data.selectedStreetName !== "町・村名なし") {
            address = data.selectedStreetName;
            if (data.selectedBlockCode !== "000" && data.selectedBlockName !== "字・丁目名なし") {
                address = address + data.selectedBlockName
            }
        }
        this.$el.find(this.param.addressSearchStreet).val(address)
    }
});
snm.module.model.AjaxCatalogNumber = snm.Backbone.Model.extend({});
snm.module.view.AjaxCatalogNumber = snm.Backbone.View.extend({
    param: {
        ajaxCatalogNumberTrigger: ".js-ajaxCatalogNumberTrigger",
        ajaxCatalogNumberContainer: ".js-ajaxCatalogNumberContainer",
        ajaxCatalogNumberMsgArea: ".js-ajaxCatalogNumberMsgArea",
        ajaxCatalogNumberMsgReq: ".js-ajaxCatalogNumberMsgReq",
        ajaxCatalogNumberItem: ".js-ajaxCatalogNumberItem",
        ajaxCatalogNumberItemTmp: "#tmpAjaxCatalogNumberItem",
        ajaxCatalogNumberItemNum: ".js-ajaxCatalogNumberItemNum",
        ajaxCatalogNumberItemPrice: ".js-ajaxCatalogNumberItemPrice",
        ajaxCatalogNumberItemPriceNotax: ".js-ajaxCatalogNumberItemPriceNotax",
        ajaxCatalogNumberItemNumSelect: ".js-ajaxCatalogNumberItemNumSelect",
        ajaxCatalogNumberItemDel: ".js-ajaxCatalogNumberItemDel",
        ajaxCatalogNumberSpItemDel: ".js-ajaxCatalogNumberSpItemDel",
        ajaxCatalogNumberModalOpen: ".js-ajaxCatalogNumberModalOpen",
        ajaxCatalogNumberModal: "#js-ajaxCatalogNumberModal",
        ajaxCatalogNumberBtn: ".js-ajaxCatalogNumberBtn",
        inputCorporationGoodsCode: "input[name='corporationGoodsCode']",
        inputBuyCnt: "input[name='buyCnt']",
        inputCatalogNum: "input[name='catalogNum']",
        inputRequestNum: "input[name='requestNum']",
        dataDefaultMsg: "data-default-msg",
        dataCatalogNumber: "data-catalog-number",
        dataOnePriceIntax: "data-one-price-intax",
        dataOnePriceNotax: "data-one-price-notax",
        ajaxErrorMsg: ".js-ajaxErrorMsg",
        ajaxErrorMsgTarget: ".js-ajaxErrorMsgTarget",
        isError: "is-error",
        minNum: 7,
        ajaxCatalogNumberStockOut: "js-ajaxCatalogNumberStockOut",
        inAjaxFlg: false
    },
    events: {
        "focusin .js-ajaxCatalogNumberTrigger": "selectInvalid",
        "focusout .js-ajaxCatalogNumberTrigger": "numCheck",
        "keypress .js-ajaxCatalogNumberTrigger": "submitStop",
        "change .js-ajaxCatalogNumberItemNumSelect": "renderItemPrice",
        "click .js-ajaxCatalogNumberModalOpen": "modalRun",
        "click .js-ajaxCatalogNumberItemDel": "renderItemDel"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.itemTmp = snm._.template(this.$el.find(this.param.ajaxCatalogNumberItemTmp).html());
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: this.param.ajaxCatalogNumberModal,
                clickDel: true
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: this.param.ajaxCatalogNumberModal,
                clickDel: true
            })
        }
        this.param.cmpnyID = snm.$("input[name='jigyo_cmpny_cd']").val();
        this.param.siteID = snm.$("input[name='site_cd']").val();
        this.param.liquorFlg = snm.$("input[name='liquor_flg']").val();
        this.model.on("change", this.render, this);
        var self = this;
        snm.$(this.param.ajaxCatalogNumberSpItemDel).on("click", function() {
            self.renderItemDel()
        })
    },
    numCheck: function(e) {
        if (this.param.inAjaxFlg) {
            return false
        }
        var $target = snm.$(e.target);
        this.param.index = this.$el.find(this.param.ajaxCatalogNumberTrigger).index(e.target);
        this.param.$parent = $target.parents(this.param.ajaxCatalogNumberContainer);
        this.param.modelParam = "catlogNum" + this.param.index;
        var massageArea = this.param.$parent;
        if (!massageArea.find(this.param.ajaxCatalogNumberMsgReq)[0]) {
            massageArea = this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea)
        }
        if (massageArea.find(this.param.ajaxCatalogNumberMsgReq).attr(this.param.dataDefaultMsg) == "true") {
            this.param["defMsg" + this.param.index] = massageArea.find(this.param.ajaxCatalogNumberMsgReq).text();
            this.param["defSelect" + this.param.index] = this.param.$parent.find(this.param.ajaxCatalogNumberItemNumSelect).html();
            massageArea.find(this.param.ajaxCatalogNumberMsgReq).attr(this.param.dataDefaultMsg, "false")
        }
        this.model.set(this.param.modelParam, $target.val());
        this.param.$parent.find(this.param.ajaxCatalogNumberItemNumSelect).prop("disabled", false)
    },
    selectInvalid: function(e) {
        if (this.param.inAjaxFlg) {
            return false
        }
        var $parent = snm.$(e.target).parents(this.param.ajaxCatalogNumberContainer);
        $parent.find(this.param.ajaxCatalogNumberItemNumSelect).prop("disabled", true)
    },
    btnControl: function() {
        var errorNum = this.$el.find("." + this.param.isError).length,
            successNum = this.$el.find(this.param.ajaxCatalogNumberItem).not("." + this.param.ajaxCatalogNumberStockOut).length;
        if (errorNum !== 0 || successNum === 0) {
            this.$el.find(this.param.ajaxCatalogNumberBtn).prop("disabled", true)
        } else {
            this.$el.find(this.param.ajaxCatalogNumberBtn).prop("disabled", false)
        }
    },
    modalRun: function(e) {
        this.param.modal.render();
        this.param.catalogNum = snm.$(e.target).parents(this.param.ajaxCatalogNumberItem).attr(this.param.dataCatalogNumber);
        this.param.delIndex = this.$el.find(this.param.ajaxCatalogNumberItemNumSelect).index(this.$el.find(this.param.ajaxCatalogNumberItemNumSelect + "[" + this.param.dataCatalogNumber + "='" + this.param.catalogNum + "']"));
        this.param.$delParent = snm.$(e.target).parents(this.param.ajaxCatalogNumberItem);
        this.param.$delParentContainer = this.$el.find(this.param.ajaxCatalogNumberItemNumSelect + "[" + this.param.dataCatalogNumber + "='" + this.param.catalogNum + "']").parents(this.param.ajaxCatalogNumberContainer);
        return false
    },
    submitStop: function(e) {
        if (e.keyCode === 13) {
            return false
        }
    },
    render: function() {
        var self = this;
        if (this.model.get(this.param.modelParam).length === 0) {
            if (this.param.$parent.next(this.param.ajaxCatalogNumberItem)[0]) {
                this.param.$parent.next(this.param.ajaxCatalogNumberItem).remove()
            } else if (this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea).next(this.param.ajaxCatalogNumberItem)[0]) {
                this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea).next(this.param.ajaxCatalogNumberItem).remove()
            }
            this.param.$parent.find(this.param.ajaxCatalogNumberTrigger).parent().removeClass(this.param.isError);
            var isPC = this.param.$parent.find(this.param.ajaxErrorMsgTarget)[0];
            var target = isPC ? this.param.$parent : this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea);
            target.find(this.param.ajaxErrorMsgTarget).hide();
            target.find(this.param.ajaxCatalogNumberMsgReq).show().attr(this.param.dataDefaultMsg, "true").text(this.param["defMsg" + this.param.index]);
            this.param.$parent.find(this.param.ajaxCatalogNumberItemNumSelect).html(this.param["defSelect" + this.param.index]);
            this.btnControl();
            this.hiddenDel(this.param.$parent);
            return false
        }
        this.param.item_number = this.param.$parent.find(this.param.ajaxCatalogNumberItemNumSelect).val();
        this.param.item_list_number = ("0" + (Number(this.param.index) + 1)).slice(-2);
        this.param.selectedNum = this.param.$parent.find(this.param.ajaxCatalogNumberItemNumSelect).prop("selectedIndex");
        this.param.inAjaxFlg = true;
        snm.module.ajax({
            url: snm.api.root + snm.api.catalogNumber,
            type: "POST",
            data: {
                jigyo_cmpny_cd: this.param.cmpnyID,
                site_cd: this.param.siteID,
                ofr_no: this.model.get(this.param.modelParam),
                quantity: this.param.item_number,
                liquor_flg: this.param.liquorFlg ? this.param.liquorFlg : 0
            },
            dataType: "json",
            parentObj: this.param.$parent,
            success: function(data) {
                var code = data.commonInfo.resultCode;
                if (code === "000") {
                    self.renderSelect(data);
                    self.renderSuccess(data);
                    self.param.success = true
                } else {
                    self.renderError(data)
                }
                self.param.inAjaxFlg = false
            },
            error: function() {
                self.$el.find(self.param.ajaxCatalogNumberItem).eq(self.param.index).remove();
                self.param.inAjaxFlg = false
            }
        })
    },
    renderError: function(data) {
        var msg = snm.util.isErrorMsg.init(data);
        this.param.success = false;
        if (this.param.$parent.next(this.param.ajaxCatalogNumberItem)[0]) {
            this.param.$parent.next(this.param.ajaxCatalogNumberItem).remove()
        } else if (this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea).next(this.param.ajaxCatalogNumberItem)[0]) {
            this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea).next(this.param.ajaxCatalogNumberItem).remove()
        }
        var isPC = this.param.$parent.find(this.param.ajaxErrorMsgTarget)[0];
        var target = isPC ? this.param.$parent : this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea);
        target.find(this.param.ajaxCatalogNumberMsgReq).hide();
        target.find(this.param.ajaxErrorMsgTarget).html(msg).show();
        this.param.$parent.find(this.param.ajaxCatalogNumberTrigger).parent().addClass(this.param.isError);
        target.find(this.param.ajaxCatalogNumberItemNumSelect).html(this.param["defSelect" + this.param.index]);
        this.btnControl();
        this.hiddenDel(this.param.$parent)
    },
    renderSuccess: function(data) {
        var min = data.serviceInfo.items[0].pull_down_min || 1,
            obj = {
                item_list_number: this.param.item_list_number,
                items: [{
                    item_url: data.serviceInfo.items[0].item_detail_url,
                    item_img_url: data.serviceInfo.items[0].item_img_url,
                    item_number: this.textSepatate(min),
                    item_name: data.serviceInfo.items[0].item_name,
                    item_one_price: data.serviceInfo.items[0].c_sale_price,
                    item_one_price_intax: data.serviceInfo.items[0].c_sale_price_intax,
                    item_price_intax: this.textSepatate(data.serviceInfo.items[0].c_sale_price_intax * min),
                    item_price: this.textSepatate(data.serviceInfo.items[0].c_sale_price * min),
                    ctlg_name: snm.util.objValidation(data.serviceInfo.items[0].ctlg_name) ? "" : data.serviceInfo.items[0].ctlg_name,
                    quantity_update_msg: snm.util.objValidation(data.serviceInfo.items[0].quantity_update_msg) ? "" : data.serviceInfo.items[0].quantity_update_msg
                }]
            };
        var stock = data.serviceInfo.items[0].stock_status,
            massageArea = this.param.$parent,
            intax = this.textSepatate(data.serviceInfo.items[0].c_sale_price_intax);
        if (!massageArea.find(this.param.ajaxCatalogNumberMsgReq)[0]) {
            massageArea = this.param.$parent.next(this.param.ajaxCatalogNumberMsgArea)
        }
        massageArea.next(this.param.ajaxCatalogNumberItem).remove();
        massageArea.after(this.param.itemTmp(obj));
        if (stock === "1") {
            massageArea.find(this.param.ajaxErrorMsgTarget).hide();
            massageArea.find(this.param.ajaxCatalogNumberMsgReq).html(data.serviceInfo.items[0].stock_msg).show()
        } else {
            massageArea.find(this.param.ajaxErrorMsgTarget).html(data.serviceInfo.items[0].stock_msg).show();
            massageArea.find(this.param.ajaxCatalogNumberMsgReq).hide();
            massageArea.next(this.param.ajaxCatalogNumberItem).addClass(this.param.ajaxCatalogNumberStockOut);
            massageArea.next(this.param.ajaxCatalogNumberItem).find(this.param.ajaxCatalogNumberItemNum).text(1);
            massageArea.next(this.param.ajaxCatalogNumberItem).find(this.param.ajaxCatalogNumberItemPrice).text(intax);
            min = ""
        }
        this.param.$parent.find(this.param.ajaxCatalogNumberTrigger).parent().removeClass(this.param.isError);
        this.param.$parent.find(this.param.inputCorporationGoodsCode).val(data.serviceInfo.items[0].goods_cd);
        this.param.$parent.find(this.param.inputBuyCnt).val(min);
        this.param.$parent.find(this.param.inputCatalogNum).val(data.serviceInfo.items[0].ctlg_cd);
        this.param.$parent.find(this.param.inputRequestNum).val(data.serviceInfo.items[0].ofr_no);
        this.btnControl()
    },
    renderSelect: function(data) {
        var min = Number(data.serviceInfo.items[0].pull_down_min || 1),
            max = Number(data.serviceInfo.items[0].pull_down_max),
            op = "",
            i;
        if (data.serviceInfo.items[0].stock_status === "2") {
            op = "<option value='" + 0 + "'>" + 0 + "</option>"
        } else {
            for (i = min; i <= max; i++) {
                op += "<option value='" + i + "'>" + this.textSepatate(i) + "</option>"
            }
        }
        this.param.$parent.find(this.param.ajaxCatalogNumberItemNumSelect).html(op)
    },
    renderItemDel: function() {
        this.model.set("catlogNum" + this.param.delIndex, "", {
            silent: true
        });
        this.param.success = false;
        this.hiddenDel(this.param.$delParentContainer);
        this.param.$delParent.remove();
        this.param.$delParentContainer.find(this.param.ajaxCatalogNumberTrigger).val("").trigger("blur.placeholder");
        var massageArea = this.param.$delParentContainer;
        if (!massageArea.find(this.param.ajaxCatalogNumberMsgReq)[0]) {
            massageArea = this.param.$delParentContainer.next(this.param.ajaxCatalogNumberMsgArea)
        }
        massageArea.find(this.param.ajaxCatalogNumberMsgReq).show().text(this.param["defMsg" + this.param.delIndex]);
        massageArea.find(this.param.ajaxErrorMsgTarget).hide();
        this.param.$delParentContainer.find(this.param.ajaxCatalogNumberItemNumSelect).html(this.param["defSelect" + this.param.delIndex]);
        this.param.modal.renderClose();
        this.btnControl();
        return false
    },
    renderItemPrice: function(e) {
        var itemNumber = snm.$(e.target).attr(this.param.dataCatalogNumber),
            quantity = snm.$(e.target).val(),
            $parent = this.$el.find(this.param.ajaxCatalogNumberItem + "[" + this.param.dataCatalogNumber + "='" + itemNumber + "']");
        if ($parent.length > 0) {
            var onePrice = $parent.find(this.param.ajaxCatalogNumberItemPrice).attr(this.param.dataOnePriceIntax).match(/\d/g).join(""),
                price = this.textSepatate(quantity * onePrice);
            $parent.find(this.param.ajaxCatalogNumberItemNum).text(this.textSepatate(quantity));
            $parent.find(this.param.ajaxCatalogNumberItemPrice).text(price);
            if ($parent.find(this.param.ajaxCatalogNumberItemPriceNotax)[0]) {
                var onePriceNotax = $parent.find(this.param.ajaxCatalogNumberItemPriceNotax).attr(this.param.dataOnePriceNotax).match(/\d/g).join(""),
                    priceNotax = this.textSepatate(quantity * onePriceNotax);
                $parent.find(this.param.ajaxCatalogNumberItemPriceNotax).text(priceNotax)
            }
            this.param.$parent = snm.$(e.target).closest(this.param.ajaxCatalogNumberContainer);
            this.param.$parent.find(this.param.inputBuyCnt).val(quantity)
        }
    },
    hiddenDel: function($parent) {
        $parent.find(this.param.inputCorporationGoodsCode).val("");
        $parent.find(this.param.inputBuyCnt).val("");
        $parent.find(this.param.inputCatalogNum).val("");
        $parent.find(this.param.inputRequestNum).val("")
    },
    textSepatate: function(num) {
        var text = num + "",
            textNum = text.length,
            commaText = "",
            i;
        for (i = textNum - 1; i >= 0; i--) {
            commaText += text.charAt(textNum - 1 - i);
            if (i % 3 == 0 && i != 0) {
                commaText += ","
            }
        }
        return commaText
    }
});
snm.module.view.AjaxCatalogSearch = snm.Backbone.View.extend({
    param: {
        ajaxCatalogSearchInput: ".js-ajaxCatalogSearchInput",
        ajaxCatalogSearchSubmit: ".js-ajaxCatalogSearchSubmit",
        ajaxCatalogSearchErrorMsgWrap: ".js-ajaxCatalogSearchErrorMsgWrap",
        ajaxCatalogSearchErrorMsg: ".js-ajaxCatalogSearchErrorMsg",
        isError: "is-error"
    },
    events: {
        keypress: "render",
        "click .js-ajaxCatalogSearchSubmit": "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.cmpnyID = this.$el.find("input[name='catalog_search_jigyo_cmpny_cd']").val();
        this.param.siteID = this.$el.find("input[name='catalog_search_site_cd']").val();
        this.param.item_number = 1;
        this.param.liquorFlg = this.$el.find("input[name='liquor_flg']").val()
    },
    render: function(e) {
        var inputElm = this.$el.find(this.param.ajaxCatalogSearchInput);
        if (e.type === "click" || e.type === "keypress" && e.keyCode === 13) {
            if (inputElm.val().length === 0) {
                return false
            } else {
                this.renderAjax()
            }
            return false
        }
    },
    renderAjax: function() {
        var self = this,
            inputElm = this.$el.find(this.param.ajaxCatalogSearchInput);
        if (inputElm.val().length === 0) return false;
        this.ajax = snm.module.ajax({
            url: snm.api.root + snm.api.catalogNumber,
            type: "POST",
            data: {
                jigyo_cmpny_cd: this.param.cmpnyID,
                site_cd: this.param.siteID,
                ofr_no: inputElm.val(),
                quantity: this.param.item_number,
                liquor_flg: this.param.liquorFlg ? this.param.liquorFlg : 0
            },
            dataType: "json",
            parentObj: this.$el,
            success: function(data) {
                var code = data.commonInfo.resultCode;
                if (code === "000") {
                    self.submitForm(data)
                } else {
                    self.renderError(data)
                }
            }
        })
    },
    submitForm: function(data) {
        var inputParent = this.$el.find(this.param.ajaxCatalogSearchInput).parent();
        this.$el.find(this.param.ajaxCatalogSearchErrorMsg).html("");
        this.$el.find(this.param.ajaxCatalogSearchErrorMsgWrap).hide();
        if (inputParent.hasClass(this.param.isError)) {
            inputParent.removeClass(this.param.isError)
        }
        snm.$(location).attr("href", data.serviceInfo.items[0].item_detail_url)
    },
    renderError: function(data) {
        var msg = snm.util.isErrorMsg.init(data),
            inputParent = this.$el.find(this.param.ajaxCatalogSearchInput).parent();
        if (!inputParent.hasClass(this.param.isError)) {
            inputParent.addClass(this.param.isError)
        }
        this.$el.find(this.param.ajaxCatalogSearchErrorMsg).text(msg);
        this.$el.find(this.param.ajaxCatalogSearchErrorMsgWrap).show()
    }
});
snm.module.model.AjaxDeliveryDate = snm.Backbone.Model.extend({});
snm.module.view.AjaxDeliveryDate = snm.Backbone.View.extend({
    param: {
        ajaxDeliveryDate: ".js-ajaxDeliveryDate",
        ajaxDeliveryDateBtn: ".js-ajaxDeliveryDateBtn",
        ajaxDeliveryDateZipCode: ".js-ajaxDeliveryDateZipCode",
        ajaxDeliveryDateAddressArea: ".js-ajaxDeliveryDateAddressArea",
        ajaxDeliveryDateAddressWrap: ".js-ajaxDeliveryDateAddressWrap",
        ajaxDeliveryDateStore: ".js-ajaxDeliveryDateStore",
        ajaxDeliveryDateStoreWrap: ".js-ajaxDeliveryDateStoreWrap",
        ajaxDeliveryDateStoreDate: ".js-ajaxDeliveryDateStoreDate",
        ajaxDeliveryDateStoreTime: ".js-ajaxDeliveryDateStoreTime",
        ajaxDeliveryDateSend: ".js-ajaxDeliveryDateSend",
        ajaxDeliveryDateSendDate: ".js-ajaxDeliveryDateSendDate",
        ajaxDeliveryDateSendTime: ".js-ajaxDeliveryDateSendTime",
        ajaxDeliveryDateErrZipMsg: ".js-ajaxDeliveryDateErrZipMsg",
        ajaxDeliveryDateErrSkuMsg: ".js-ajaxDeliveryDateErrSkuMsg",
        ajaxDeliveryDateHurry: ".js-ajaxDeliveryDateHurry",
        ajaxDeliveryDateHurryMsg: ".js-ajaxDeliveryDateHurryMsg",
        ajaxDeliveryDateHurryTime: ".js-ajaxDeliveryDateHurryTime",
        ajaxDeliveryDateOtherStore: ".js-ajaxDeliveryDateOtherStore",
        ajaxDeliveryDateOtherStoreDate: ".js-ajaxDeliveryDateOtherStoreDate",
        ajaxDeliveryDateOtherStoreTime: ".js-ajaxDeliveryDateOtherStoreTime",
        ajaxDeliveryDateList: ".js-ajaxDeliveryDateList",
        dataDeliveryDateSku: "data-delivery-date-sku",
        tmpAjaxDeliveryDateOtherStoreIcon: "#tmpAjaxDeliveryDateOtherStoreIcon",
        tmpOtherStoreIcons: "",
        ajaxDeliveryDateZipInputArea: "#js-ajaxDeliveryDateZipInputArea",
        ajaxDeliveryDateStoreIconArea: ".js-ajaxDeliveryDateStoreIconArea",
        productInfoBalloon: ".js-productInfoBalloon",
        isSelected: "is-selected",
        ajaxErrorMsgTarget: "js-ajaxErrorMsgTarget",
        ajaxErrorMsg: "js-ajaxErrorMsg"
    },
    events: {
        "click .js-ajaxDeliveryDateZipInputAreaOpen": "renderInputArea",
        "keydown .js-ajaxDeliveryDateZipCode": "cancelEnterEvent"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change", this.render, this);
        if (snm.$(this.param.tmpAjaxDeliveryDateOtherStoreIcon).html()) {
            this.param.tmpOtherStoreIcons = snm._.template(snm.$(this.param.tmpAjaxDeliveryDateOtherStoreIcon).html())
        }
        if (snm.module.SideNav !== undefined) {
            this.param.zipInputArea = new snm.module.SideNav({
                el: snm.$(this.param.ajaxDeliveryDateZipInputArea),
                clickDel: true
            })
        }
        this.param.HurryDefMsg = this.$el.find(this.param.ajaxDeliveryDateHurryMsg).first().text();
        this.param.HurryDefTimeVal = this.$el.find(this.param.ajaxDeliveryDateHurryTime).first().text();
        this.param.OtherDefDateVal = this.$el.find(this.param.ajaxDeliveryDateOtherStoreDate).first().text();
        this.param.OtherDefTimeVal = this.$el.find(this.param.ajaxDeliveryDateOtherStoreTime).first().text();
        this.param.StoreIcons = snm.$(this.param.ajaxDeliveryDateStoreIconArea).html();
        var self = this;
        snm.$(this.param.ajaxDeliveryDateBtn).on({
            click: function() {
                self.modelChange();
                return false
            }
        });
        var errorDispTarget = this.$el.find(this.param.ajaxDeliveryDateErrZipMsg);
        if (!errorDispTarget.hasClass(this.param.ajaxErrorMsgTarget)) {
            errorDispTarget.addClass(this.param.ajaxErrorMsgTarget);
            errorDispTarget.parent().addClass(this.param.ajaxErrorMsg)
        }
    },
    modelChange: function() {
        this.model.set("status", "on")
    },
    render: function(loader) {
        var self = this,
            loadFlag = loader === false ? loader : true,
            zipCode = snm.$(this.param.ajaxDeliveryDateZipCode).val(),
            strSku = "";
        if (snm.$(this.param.ajaxDeliveryDateBtn).attr(this.param.dataDeliveryDateSku)) {
            strSku = snm.$(this.param.ajaxDeliveryDateBtn).attr(this.param.dataDeliveryDateSku)
        }
        snm.module.ajax({
            url: snm.api.root + snm.api.deliveryDate,
            type: "POST",
            data: {
                jigyo_cmpny_cd: snm.$("input[name='jigyo_cmpny_cd']").val(),
                site_cd: snm.$("input[name='site_cd']").val(),
                zipcode: zipCode,
                sku: strSku
            },
            dataType: "json",
            parentObj: this.$el,
            erroeModal: false,
            errorScroll: false,
            ajaxErrorFuncFlag: false,
            loader: loadFlag,
            success: function(data) {
                var code = data.commonInfo.resultCode;
                self.$el.find(self.param.ajaxDeliveryDateErrZipMsg).parent().hide();
                self.$el.find(self.param.ajaxDeliveryDateErrSkuMsg).parent().hide();
                self.$el.find(self.param.productInfoBalloon).removeClass(self.param.isSelected);
                if (code === "050" || code === "900" || code === "902") {
                    var $area = self.$el.hasClass(self.param.ajaxDeliveryDate.replace(".", "")) ? self.$el : self.$el.find(self.param.ajaxDeliveryDate);
                    $area.hide();
                    return
                }
                if (code === "000") {
                    self.renderSuccess(data)
                } else {
                    self.errorReset();
                    self.renderError(data)
                }
            },
            error: function() {
                self.errorReset();
                self.$el.find(self.param.productInfoBalloon).removeClass(self.param.isSelected)
            }
        });
        this.model.set("status", "off", {
            silent: true
        });
        if (snm.$(this.param.ajaxDeliveryDateZipInputArea).is(":visible")) {
            this.param.zipInputArea.renderClose()
        }
    },
    errorReset: function() {
        this.$el.find(this.param.ajaxDeliveryDateErrSkuMsg).parent().hide();
        this.$el.find(this.param.ajaxDeliveryDateAddressWrap).hide();
        this.$el.find(this.param.ajaxDeliveryDateStoreDate).text("-");
        this.$el.find(this.param.ajaxDeliveryDateStoreTime).text("-");
        this.$el.find(this.param.ajaxDeliveryDateSendDate).text("-");
        this.$el.find(this.param.ajaxDeliveryDateSendTime).text("-");
        this.$el.find(this.param.ajaxDeliveryDateHurryMsg).text(this.param.HurryDefMsg);
        this.$el.find(this.param.ajaxDeliveryDateHurryTime).text(this.param.HurryDefTimeVal);
        this.$el.find(this.param.ajaxDeliveryDateHurry).hide();
        this.$el.find(this.param.ajaxDeliveryDateOtherStoreDate).text(this.param.OtherDefDateVal);
        this.$el.find(this.param.ajaxDeliveryDateOtherStoreTime).text(this.param.OtherDefTimeVal);
        this.$el.find(this.param.ajaxDeliveryDateOtherStore).hide();
        snm.$(this.param.ajaxDeliveryDateStoreIconArea).html(this.param.StoreIcons);
        this.$el.find(this.param.ajaxDeliveryDateList + ", .deliveryList").hide()
    },
    renderSuccess: function(data) {
        var prefecture = snm.util.objValidation(data.serviceInfo.prefecture) ? "" : data.serviceInfo.prefecture,
            city = snm.util.objValidation(data.serviceInfo.city) ? "" : data.serviceInfo.city,
            storeTime = snm.util.objValidation(data.serviceInfo.store_receivable_time) ? "" : data.serviceInfo.store_receivable_time,
            deliveryTime = snm.util.objValidation(data.serviceInfo.delivery_receivable_time) ? "" : data.serviceInfo.delivery_receivable_time;
        this.$el.find(this.param.ajaxDeliveryDateAddressArea).html(prefecture + city);
        this.$el.find(this.param.ajaxDeliveryDateAddressWrap).show();
        this.$el.find(this.param.ajaxDeliveryDate).show();
        this.$el.find(this.param.ajaxDeliveryDateList + ", .deliveryList").show();
        if (data.serviceInfo.delivery_receivable_date === "-") {
            this.$el.find(this.param.ajaxDeliveryDateSend).hide()
        } else {
            this.$el.find(this.param.ajaxDeliveryDateSend).show();
            this.$el.find(this.param.ajaxDeliveryDateSendDate).html(data.serviceInfo.delivery_receivable_date);
            this.$el.find(this.param.ajaxDeliveryDateSendTime).html(deliveryTime)
        }
        if (data.serviceInfo.other_store_receivable_display_flg === "1" && data.serviceInfo.store_receivable_date === "-") {
            this.$el.find(this.param.ajaxDeliveryDateStoreWrap).hide()
        } else {
            this.$el.find(this.param.ajaxDeliveryDateStoreWrap).show()
        }
        if (data.serviceInfo.store_receivable_date === "-") {
            this.$el.find(this.param.ajaxDeliveryDateStore).hide()
        } else {
            this.$el.find(this.param.ajaxDeliveryDateStore).show();
            this.$el.find(this.param.ajaxDeliveryDateStoreDate).html(data.serviceInfo.store_receivable_date);
            this.$el.find(this.param.ajaxDeliveryDateStoreTime).html(storeTime)
        }
        if (data.serviceInfo.fastest_store_receivable_display_flg !== "0") {
            this.$el.find(this.param.ajaxDeliveryDateHurry).hide()
        } else {
            this.$el.find(this.param.ajaxDeliveryDateHurry).show();
            this.$el.find(this.param.ajaxDeliveryDateHurryMsg).html(data.serviceInfo.fastest_store_receivable_date);
            this.$el.find(this.param.ajaxDeliveryDateHurryTime).html(data.serviceInfo.fastest_store_receivable_time)
        }
        if (data.serviceInfo.other_store_receivable_display_flg !== "0") {
            this.$el.find(this.param.ajaxDeliveryDateOtherStore).hide()
        } else {
            var iconData = data.serviceInfo.others,
                iconList = {
                    list: [{}]
                };
            if (iconData.length === 0) {
                this.$el.find(this.param.ajaxDeliveryDateOtherStore).hide()
            } else {
                this.$el.find(this.param.ajaxDeliveryDateOtherStore).show();
                this.$el.find(this.param.ajaxDeliveryDateOtherStoreDate).html(data.serviceInfo.other_store_receivable_date);
                this.$el.find(this.param.ajaxDeliveryDateOtherStoreTime).html(data.serviceInfo.other_store_receivable_time);
                snm.$.each(iconData, function(i, val) {
                    iconList.list[i] = {
                        name: val.jigyo_cmpny_nm,
                        logo: val.jigyo_cmpny_logo
                    }
                });
                snm.$(this.param.ajaxDeliveryDateStoreIconArea).html();
                snm.$(this.param.ajaxDeliveryDateStoreIconArea).html(this.param.tmpOtherStoreIcons(iconList))
            }
        }
    },
    renderError: function(data) {
        var msg;
        if (data.commonInfo.resultCode === "500") {
            msg = data.commonInfo.validateMessages;
            if (msg.zipcode && msg.sku) {
                this.$el.find(this.param.ajaxDeliveryDateErrZipMsg).html(msg.zipcode).parent().show();
                this.$el.find(this.param.ajaxDeliveryDateErrSkuMsg).html(msg.sku).parent().show()
            } else if (msg.zipcode) {
                this.$el.find(this.param.ajaxDeliveryDateErrZipMsg).html(msg.zipcode).parent().show()
            } else {
                this.$el.find(".js-ajaxDeliveryDateErrSkuMsg").html(msg.sku).parent().show()
            }
        } else {
            msg = data.commonInfo.message;
            this.$el.find(this.param.ajaxDeliveryDateErrZipMsg).html(msg).parent().show()
        }
        this.$el.find(this.param.ajaxDeliveryDate).show()
    },
    renderInputArea: function() {
        this.param.zipInputArea.render()
    },
    cancelEnterEvent: function(e) {
        var ua = snm.util.navigator;
        if (e.keyCode === 13 && ua.is_ie && (ua.ie_version === "10" || ua.ie_version === "9" || ua.ie_version === "8")) {
            return false
        }
    }
});
snm.module.model.AjaxDuplicateCheck = snm.Backbone.Model.extend({});
snm.module.view.AjaxDuplicateCheck = snm.Backbone.View.extend({
    param: {
        tmpAjaxDuplicateCheck: "#tmpAjaxDuplicateCheck",
        ajaxDuplicateCheckId: ".js-ajaxDuplicateCheckId",
        ajaxDuplicateCheckBtn: ".js-ajaxDuplicateCheckBtn",
        ajaxDuplicateCheckMsg: ".js-ajaxDuplicateCheckMsg",
        ajaxDuplicateCheckAddress: ".js-ajaxDuplicateCheckAddress",
        ajaxDuplicateCheckSelectAddress: ".js-ajaxDuplicateCheckSelectAddress",
        ajaxDuplicateCheckSelectId: ".js-ajaxDuplicateCheckSelectId",
        minValue: 4,
        maxValue: 256
    },
    events: {
        "click .js-ajaxDuplicateCheckBtn": "modelSet"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change", this.getData, this);
        this.param.template = snm._.template(this.$el.find(this.param.tmpAjaxDuplicateCheck).html())
    },
    modelSet: function() {
        this.model.set("click", "on");
        return false
    },
    getData: function() {
        var self = this,
            send = this.returnSendData();
        if (!send) {
            this.model.set("click", "off", {
                silent: true
            });
            return false
        }
        snm.module.ajax({
            url: snm.api.root + snm.api.duplicateCheck,
            type: "POST",
            data: {
                sandid: send
            },
            dataType: "json",
            ajaxErrorFuncFlag: false,
            success: function(data) {
                var code = data.commonInfo.resultCode,
                    flag, item, msg;
                if (code === "000") {
                    flag = data.serviceInfo.duplicateFlag == 0 ? 1 : 0
                } else {
                    flag = 0
                }
                msg = snm.util.isErrorMsg.init(data);
                item = {
                    status: flag,
                    message: msg
                };
                self.$el.find(self.param.ajaxDuplicateCheckMsg).html(self.param.template(item));
                self.model.set("click", "off", {
                    silent: true
                })
            },
            error: function() {
                self.model.set("click", "off", {
                    silent: true
                })
            }
        })
    },
    returnSendData: function() {
        var data, check = true,
            item = {
                status: 0
            };
        if (this.$el.find(this.param.ajaxDuplicateCheckSelectAddress).prop("checked")) {
            data = this.$el.find(this.param.ajaxDuplicateCheckAddress).text()
        } else if (this.$el.find(this.param.ajaxDuplicateCheckSelectId).prop("checked")) {
            data = this.$el.find(this.param.ajaxDuplicateCheckId).val();
            if (data == "") {
                item.message = "7&iDは入力必須項目です。";
                check = false
            } else if (data.length < this.param.minValue) {
                item.message = "7&iDには4文字以上にしてください。";
                check = false
            } else if (data.length > this.param.maxValue) {
                item.message = "7&iDには256文字以下にしてください。";
                check = false
            } else if (data.match(/^[\u0020-\u007e|\u00a5]+$/)) {
                if (data.match(/(<|>|&|"|'|\u00a5|\u005c|\u0020)/g)) {
                    item.message = "7&iDに利用できない記号が含まれています。";
                    check = false
                } else {
                    return data
                }
            } else if (!data.match(/^[\u0020-\u007e]+$/)) {
                item.message = "7&iDは半角記号英数字で入力してください";
                check = false
            }
            if (!check) {
                this.$el.find(this.param.ajaxDuplicateCheckMsg).html(this.param.template(item));
                return false
            }
        }
        return data
    }
});
snm.module.view.AjaxGiftInformationSearch = snm.Backbone.View.extend({
    param: {
        ajaxGiftInformationSearchSelect: ".js-ajaxGiftInformationSearchSelect",
        ajaxGiftInformationSearchSelectCompany: ".js-ajaxGiftInformationSearchSelectCompany",
        ajaxGiftInformationSearchInputCode: ".js-ajaxGiftInformationSearchInputCode",
        ajaxGiftInformationSearchInputTel1: ".js-ajaxGiftInformationSearchInputTel1",
        ajaxGiftInformationSearchInputTel2: ".js-ajaxGiftInformationSearchInputTel2",
        ajaxGiftInformationSearchInputTel3: ".js-ajaxGiftInformationSearchInputTel3",
        updateNoticeModal: "#js-updateNoticeModal",
        ajaxGiftInformationSearchForm: ".js-ajaxGiftInformationSearchForm",
        dataRedirectImportUrl: "data-redirect-import-url",
        ajaxGiftInformationSearchErrorWrap: ".js-ajaxGiftInformationSearchErrorWrap",
        ajaxGiftInformationSearchErrorText: ".js-ajaxGiftInformationSearchErrorText",
        ajaxGiftInformationSearchErrorClass: "js-ajaxGiftInformationSearchError",
        inputFlag: false,
        scrollSpeed: 500
    },
    events: {
        "submit .js-ajaxGiftInformationSearchForm": "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.inputFlag = this.$el.find(this.param.ajaxGiftInformationSearchInputCode)[0] ? true : false;
        this.param.redirectFlag = false;
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: this.param.updateNoticeModal,
                clickDel: true
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: this.param.updateNoticeModal,
                clickDel: true
            })
        }
    },
    render: function() {
        var self = this,
            addressNum = this.$el.find(this.param.ajaxGiftInformationSearchSelect).val(),
            errorErea = snm.$(this.param.ajaxGiftInformationSearchErrorWrap),
            opt;
        if (this.param.redirectFlag) {
            this.param.redirectFlag = false;
            return
        }
        if (this.param.inputFlag && (addressNum === "" || (this.$el.find(this.param.ajaxGiftInformationSearchInputCode).val() !== "" || this.$el.find(this.param.ajaxGiftInformationSearchInputTel1).val() !== "" || this.$el.find(this.param.ajaxGiftInformationSearchInputTel2).val() !== "" || this.$el.find(this.param.ajaxGiftInformationSearchInputTel3).val() !== ""))) {
            this.$el.find(this.param.ajaxGiftInformationSearchSelect).val("");
            opt = {
                jigyo_cmpny_cd: this.$el.find(this.param.ajaxGiftInformationSearchSelectCompany).val(),
                clientCd: this.$el.find(this.param.ajaxGiftInformationSearchInputCode).val(),
                clientTelNum1: this.$el.find(this.param.ajaxGiftInformationSearchInputTel1).val(),
                clientTelNum2: this.$el.find(this.param.ajaxGiftInformationSearchInputTel2).val(),
                clientTelNum3: this.$el.find(this.param.ajaxGiftInformationSearchInputTel3).val()
            }
        } else {
            opt = {
                clientAddrNum: addressNum
            }
        }
        if (errorErea.hasClass(this.param.ajaxGiftInformationSearchErrorClass)) {
            errorErea.removeClass(this.param.ajaxGiftInformationSearchErrorClass).hide()
        }
        snm.module.ajax({
            url: snm.api.root + snm.api.giftInformationSearch,
            type: "POST",
            data: opt,
            dataType: "json",
            parentObj: this.$el,
            ajaxErrorFuncFlag: false,
            success: function(data) {
                var resultCode = data.commonInfo.resultCode;
                if (resultCode === "000") {
                    var dispKbn = data.serviceInfo.displayDecisionKbn;
                    if (dispKbn === 0) {
                        self.param.redirectFlag = true;
                        self.$el.find(self.param.ajaxGiftInformationSearchForm).submit()
                    } else if (dispKbn === 1) {
                        self.param.modal.render()
                    }
                } else if (resultCode === "901" && !self.param.inputFlag) {
                    snm.$(location).attr("href", self.$el.attr(self.param.dataRedirectImportUrl))
                } else {
                    self.renderError(data)
                }
            }
        });
        return false
    },
    renderError: function(data) {
        var msg = snm.util.isErrorMsg.init(data),
            errorErea = snm.$(this.param.ajaxGiftInformationSearchErrorWrap),
            position;
        errorErea.find(this.param.ajaxGiftInformationSearchErrorText).text(msg);
        if (!errorErea.hasClass(this.param.ajaxGiftInformationSearchErrorClass)) {
            errorErea.addClass(this.param.ajaxGiftInformationSearchErrorClass)
        }
        errorErea.show();
        position = errorErea.offset().top;
        snm.$("html, body").animate({
            scrollTop: position + "px"
        }, this.param.scrollSpeed)
    }
});
snm.module.model.AjaxHeaderSearch = snm.Backbone.Model.extend({});
snm.module.view.AjaxHeaderSearch = snm.Backbone.View.extend({
    param: {
        ajaxHeaderSearchSuggest: ".js-ajaxHeaderSearchSuggest",
        ajaxHeaderSearchSuggestArea: ".js-ajaxHeaderSearchSuggestArea",
        ajaxHeaderSearchSuggestList: ".js-ajaxHeaderSearchSuggestList",
        ajaxHeaderSearchSuggestListWord: ".js-ajaxHeaderSearchSuggestListWord",
        ajaxHeaderSearchSuggestSubmit: ".js-ajaxHeaderSearchSuggestSubmit",
        tmpAjaxHeaderSearch: "#tmpAjaxHeaderSearch",
        isActive: "is-active",
        inputFocus: true,
        listNum: 0
    },
    events: {
        "keyup .js-ajaxHeaderSearchSuggest": "keyHandler",
        keypress: "submitStop",
        "click .js-ajaxHeaderSearchSuggestSubmit": "submitStop",
        "paste .js-ajaxHeaderSearchSuggest": "pasteAction",
        "click .js-ajaxHeaderSearchSuggestList": "renderSuggestSelected",
        "mouseup .js-ajaxHeaderSearchSuggest": "removeSuggestList",
        "mouseover .js-ajaxHeaderSearchSuggestList": "addClass",
        "mouseout .js-ajaxHeaderSearchSuggestList": "removeClass"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.suggest = false;
        this.param.timerFlag = false;
        this.param.timerId = "";
        this.param.listTmp = snm._.template(this.$el.find(this.param.tmpAjaxHeaderSearch).html());
        this.param.ajaxUrl = snm.$("input[name='ajax-header-search-domain']").val();
        this.param.ajaxDataMax = snm.$("input[name='ajax-header-search-maxNum']").val();
        this.param.ajaxDataSite = snm.$("input[name='ajax-header-search-collection']").val();
        this.param.ajaxDataClient = snm.$("input[name='ajax-header-search-frontend']").val();
        this.param.ajaxDataCNum = snm.$("input[name='ajax-header-search-cSuggest-Num']").val();
        this.param.ajaxDataCWordEnd = snm.$("input[name='ajax-header-search-cSuggest-wordEnd']").val();
        this.param.ajaxDataCSepChar = snm.$("input[name='ajax-header-search-cSuggest-sepChar']").val();
        this.param.$suggest = this.$el.find(this.param.ajaxHeaderSearchSuggest);
        this.param.$suggestArea = this.$el.find(this.param.ajaxHeaderSearchSuggestArea);
        var self = this;
        if (snm.util.navigator.smartphone || snm.util.navigator.tablet) {
            if ("CompositionEvent" in window) {
                this.$el.find(this.param.ajaxHeaderSearchSuggest).on("compositionend", function() {
                    self.model.set("keyword", self.param.$suggest.val())
                })
            } else {
                this.param.timerFlag = true;
                this.$el.find(this.param.ajaxHeaderSearchSuggest).on("focus", function() {
                    self.setTimer()
                });
                this.$el.find(this.param.ajaxHeaderSearchSuggest).on("blur", function() {
                    self.clearTimer()
                })
            }
        }
        this.model.on("change:keyword", this.renderAjax, this)
    },
    submitStop: function(e) {
        if (e.type === "click" || e.type === "keypress" && e.keyCode === 13) {
            var target = this.$el.find(this.param.ajaxHeaderSearchSuggestList).filter("." + this.param.isActive);
            if (this.param.$suggest.val().length == 0 || this.param.$suggest.val().replace(/( |　)/g, "") === "") {
                return false
            } else if (target.length > 0 && target.attr("data-moreDetailsUrl") !== "") {
                location.href = target.attr("data-moreDetailsUrl");
                return false
            } else {
                this.param.$suggestArea.removeClass(this.param.isActive).html("")
            }
        }
    },
    pasteAction: function(e) {
        var self = this,
            events = e;
        setTimeout(function() {
            self.keyHandler(events)
        }, 1)
    },
    keyHandler: function(e) {
        if (this.param.$suggest.val().length == 0) {
            this.param.$suggestArea.removeClass(this.param.isActive).html("");
            this.model.set("keyword", "", {
                silent: true
            })
        } else if (e.keyCode == 39 || e.keyCode == 37) {
            return false
        } else if (e.keyCode == 38 || e.keyCode == 40) {
            this.param.inputFocus = false;
            var status = e.keyCode == 38 ? "up" : "down";
            if (this.param.$suggestArea.hasClass(this.param.isActive)) {
                this.renderSuggestChoice(status)
            }
        } else {
            if (!this.param.inputFocus) {
                this.param.inputFocus = true;
                this.model.set("keyword", "", {
                    silent: true
                });
                return false
            }
            this.model.set("keyword", this.param.$suggest.val())
        }
    },
    renderAjax: snm._.debounce(function() {
        if (this.param.$suggest.val().length == 0) return false;
        if (this.param.timerFlag) {
            this.clearTimer()
        }
        this.param.keyword = this.param.$suggest.val();
        var self = this;
        var requestList = [];
        requestList.push(snm.$.ajax({
            url: "//" + this.param.ajaxUrl + "/suggest",
            type: "GET",
            jsonpCallback: "callback",
            crossDomain: true,
            data: {
                q: this.param.keyword + this.param.ajaxDataCWordEnd,
                max: this.param.ajaxDataCNum * 2,
                site: this.param.ajaxDataSite,
                client: this.param.ajaxDataClient,
                format: "rich"
            },
            dataType: "jsonp"
        }));
        requestList.push(snm.$.ajax({
            url: "//" + this.param.ajaxUrl + "/suggest",
            type: "GET",
            jsonpCallback: "callback2",
            crossDomain: true,
            data: {
                q: this.param.keyword,
                max: this.param.ajaxDataMax * 2,
                site: this.param.ajaxDataSite,
                client: this.param.ajaxDataClient,
                format: "rich"
            },
            dataType: "jsonp"
        }));
        snm.$.when.apply(snm.$, requestList).done(function() {
            var dataUar = arguments[0][0],
                dataSuggest = arguments[1][0];
            if (dataUar.results.length > 0 && dataUar.query !== "sorry" || dataSuggest.results.length > 0 && dataSuggest.query !== "sorry") {
                self.renderSuccess(dataUar, dataSuggest)
            } else {
                self.param.$suggestArea.html("")
            }
        });
        if (this.param.timerFlag) {
            this.setTimer()
        }
    }, 500),
    renderSuccess: function(dataUar, dataSuggest) {
        var self = this,
            item = {
                results: []
            },
            i, j, category, name, url, arr;
        if (dataUar.results.length > 0 && dataUar.query !== "sorry") {
            for (i = 0; i < dataUar.results.length; i++) {
                if (dataUar.results[i].type === "uar") {
                    category = "";
                    name = "";
                    url = "";
                    arr = [];
                    arr = dataUar.results[i].content.split(self.param.ajaxDataCSepChar);
                    for (j = 0; j < arr.length - 1; j++) {
                        if (j > 0) {
                            name += self.param.ajaxDataCSepChar
                        }
                        name += arr[j]
                    }
                    category = arr[arr.length - 1];
                    url = dataUar.results[i].moreDetailsUrl;
                    item.results.push({
                        type: snm._.escape(dataUar.results[i].type),
                        name: snm._.escape(JSON.parse('"' + name + '"')),
                        category: snm._.escape(JSON.parse('"' + category + '"')),
                        url: encodeURI(snm._.escape(JSON.parse('"' + url + '"')))
                    })
                }
            }
            if (item.results.length > 0) {
                item.results.sort(function(a, b) {
                    if (a.url > b.url) {
                        return -1
                    } else {
                        return 1
                    }
                })
            }
            if (self.param.ajaxDataCNum < item.results.length) {
                item.results.splice(self.param.ajaxDataCNum, item.results.length - self.param.ajaxDataCNum)
            }
        }
        if (dataSuggest.results.length > 0 && dataSuggest.query !== "sorry") {
            for (i = 0; i < dataSuggest.results.length; i++) {
                if (dataSuggest.results[i].type === "suggest") {
                    name = dataSuggest.results[i].name;
                    if (item.results.length >= this.param.ajaxDataMax) {
                        break
                    }
                    item.results.push({
                        type: snm._.escape(dataSuggest.results[i].type),
                        name: snm._.escape(JSON.parse('"' + name + '"')),
                        url: ""
                    })
                }
            }
        }
        this.param.$suggestArea.addClass(this.param.isActive).html(this.param.listTmp(item));
        this.param.suggest = true;
        this.param.suggestItemNum = this.$el.find(this.param.ajaxHeaderSearchSuggestList).length
    },
    renderSuggestChoice: function(status) {
        var $suggestList = this.$el.find(this.param.ajaxHeaderSearchSuggestList),
            word = "";
        if (this.param.suggest) {
            if (status == "up") {
                this.param.listNum--
            }
            if (status == "down") {
                this.param.listNum++
            }
            if (!this.$el.find(this.param.ajaxHeaderSearchSuggestList).hasClass(this.param.isActive)) {
                if (status == "up") {
                    this.param.listNum = this.param.suggestItemNum - 1
                }
                if (status == "down") {
                    this.param.listNum = 0
                }
            }
            this.switchClass();
            word = $suggestList.eq(this.param.listNum).find(this.param.ajaxHeaderSearchSuggestListWord).text();
            this.param.$suggest.val(word);
            if (this.param.listNum == -1) {
                this.param.$suggest.val(this.param.keyword);
                $suggestList.removeClass(this.param.isActive)
            }
            if (this.param.listNum == this.param.suggestItemNum) {
                this.param.$suggest.val(this.param.keyword)
            }
        }
    },
    renderSuggestSelected: function(e) {
        var $parent = snm.$(e.target).hasClass(this.param.ajaxHeaderSearchSuggestList.replace(".", "")) ? snm.$(e.target) : snm.$(e.target).parents(this.param.ajaxHeaderSearchSuggestList),
            word = "";
        if ($parent.attr("data-moreDetailsUrl") !== "") {
            location.href = $parent.attr("data-moreDetailsUrl");
            return false
        }
        $parent.find(this.param.ajaxHeaderSearchSuggestListWord).each(function(i) {
            if (i > 0) {
                word += " "
            }
            word += snm.$(this).text()
        });
        this.param.$suggest.val(word).focus();
        this.param.$suggestArea.removeClass(this.param.isActive).html("");
        this.param.inputFocus = true;
        return false
    },
    switchClass: function() {
        var $suggestList = this.$el.find(this.param.ajaxHeaderSearchSuggestList);
        $suggestList.removeClass(this.param.isActive);
        $suggestList.eq(this.param.listNum).addClass(this.param.isActive)
    },
    addClass: function(e) {
        var $parent = snm.$(e.target).hasClass(this.param.ajaxHeaderSearchSuggestList.replace(".", "")) ? snm.$(e.target) : snm.$(e.target).parents(this.param.ajaxHeaderSearchSuggestList),
            index = $parent.index();
        this.param.listNum = index;
        this.$el.find(this.param.ajaxHeaderSearchSuggestList).removeClass(this.param.isActive);
        $parent.addClass(this.param.isActive)
    },
    removeClass: function() {
        this.$el.find(this.param.ajaxHeaderSearchSuggestList).removeClass(this.param.isActive)
    },
    removeSuggestList: function() {
        var self = this;
        setTimeout(function() {
            if (self.param.$suggest.val().length == 0 && self.param.$suggestArea.hasClass(self.param.isActive)) {
                self.param.$suggestArea.removeClass(self.param.isActive).html("");
                self.model.set("keyword", "", {
                    silent: true
                })
            }
        }, 1)
    },
    setTimer: function() {
        var self = this;
        this.clearTimer();
        this.param.timerId = setInterval(function() {
            self.model.set("keyword", self.param.$suggest.val())
        }, 1e3)
    },
    clearTimer: function() {
        clearInterval(this.param.timerId)
    }
});
snm.module.model.AjaxKeywordSearch = snm.Backbone.Model.extend({});
snm.module.view.AjaxKeywordSearch = snm.Backbone.View.extend({
    param: {
        ajaxKeywordSearchSelect: ".js-ajaxKeywordSearchSelect",
        ajaxKeywordSearchContents: ".js-ajaxKeywordSearchContents",
        ajaxKeywordSearchText: ".js-ajaxKeywordSearchText",
        ajaxKeywordSearchContentsTmp: "#js-tmpAjaxKeywordSearchContents",
        ajaxErrModal: "#js-ajaxErrModal",
        ajaxErrorText: ".js-ajaxErrorText",
        ageKbn: "#ageKbn",
        searchResultNum: "data-search-result-num",
        ajaxKeywordSearchDelivery: "[data-ajaxKeywordSearch-delivery]"
    },
    events: {
        "change .js-ajaxKeywordSearchSelect": "getData"
    },
    initialize: function() {
        this.param.tmpContentsTmp = snm._.template(this.$el.find(this.param.ajaxKeywordSearchContentsTmp).html());
        if (snm.module.Modal === undefined) {
            this.param.errModal = new snm.module.ModalSp({
                el: this.param.ajaxErrModal,
                clickDel: true
            })
        } else {
            this.param.errModal = new snm.module.Modal({
                el: this.param.ajaxErrModal,
                clickDel: true
            })
        }
        this.deliveryFlag = this.$el.filter(this.param.ajaxKeywordSearchDelivery).length > 0 ? true : false;
        this.filterFlag = this.getRecordedStoreFlag();
        this.getData()
    },
    getRecordedStoreFlag: function() {
        var licenseGoodsCd = snm.$("#liquor_license_flg").val();
        return licenseGoodsCd === "0" ? true : false
    },
    getData: function() {
        var jsonUrl, dataObj = {},
            self = this;
        jsonUrl = snm.api.root + (this.deliveryFlag ? snm.api.keywordSearch2 : snm.api.keywordSearch);
        if (this.deliveryFlag) {
            dataObj = {
                gsaDeliverySearchRequestIVO: {
                    searchItemInfo: [{
                        companyCode: snm.$("#searchInfo0_companyCode").val(),
                        siteCode: snm.$("#searchInfo0_siteCode").val(),
                        storeCode: snm.$("#searchInfo0_storeCode").val()
                    }, {
                        companyCode: snm.$("#searchInfo1_companyCode").val(),
                        siteCode: snm.$("#searchInfo1_siteCode").val(),
                        storeCode: snm.$("#searchInfo1_storeCode").val()
                    }, {
                        companyCode: snm.$("#searchInfo2_companyCode").val(),
                        siteCode: snm.$("#searchInfo2_siteCode").val(),
                        storeCode: snm.$("#searchInfo2_storeCode").val()
                    }],
                    numOfMaxResults: Number(this.$el.attr(this.param.searchResultNum)) || 4,
                    siteKbn: "1",
                    keyword: this.$el.find(this.param.ajaxKeywordSearchSelect).val(),
                    requiredFields: this.flagFields()
                },
                searchInfoKind: 1
            }
        } else {
            dataObj = {
                gsaSearchRequestIVO: {
                    companyCode: "000",
                    siteCode: "0000",
                    numOfMaxResults: Number(this.$el.attr(this.param.searchResultNum)) || 4,
                    siteKbn: "1",
                    keyword: this.$el.find(this.param.ajaxKeywordSearchSelect).val(),
                    requiredFields: this.flagFields()
                },
                searchInfoKind: 1
            }
        }
        snm.module.ajax({
            url: jsonUrl,
            type: "POST",
            data: JSON.stringify(dataObj),
            dataType: "json",
            contentType: "application/json",
            errorMsgEscape: true,
            success: function(data) {
                if (data.commonInfo.resultCode === "000" || data.commonInfo.resultCode === "100") {
                    self.render(data)
                } else if (data.commonInfo.resultCode === "500") {
                    self.param.errModal.render();
                    var message = snm.util.isErrorMsg.init(data);
                    snm.$(self.param.ajaxErrModal).find(self.param.ajaxErrorText).text(message)
                }
            }
        });
        this.$el.find(this.param.ajaxKeywordSearchSelect).blur();
        return false
    },
    render: function(data) {
        var itemList = {
                list: [],
                text: "",
                cnt: 0,
                url: ""
            },
            itemData, self = this;
        if (!snm.util.objValidation(data.serviceInfo) && data.serviceInfo.resultCount > 0) {
            if (!snm.util.objValidation(data.serviceInfo.displayGoodsEntity.goodsCassetteList)) {
                itemList.cnt = data.serviceInfo.resultCount;
                itemData = data.serviceInfo.displayGoodsEntity.goodsCassetteList
            } else {
                itemList.cnt = -1
            }
        }
        if (itemList.cnt > 0) {
            var tmpIconAlt, tmpIconUrl;
            snm.$.each(itemData, function(i, val) {
                tmpIconAlt = "";
                tmpIconUrl = "";
                if (!self.deliveryFlag && self.filterFlag && val.liquorFlg === "1") {
                    return true
                }
                if (val.drugFlg === "1" && !snm.util.objValidation(val.popIconList)) {
                    if (!snm.util.objValidation(val.popIconList[0].iconAlt)) {
                        tmpIconAlt = val.popIconList[0].iconAlt
                    }
                    if (!snm.util.objValidation(val.popIconList[0].iconImgURL)) {
                        tmpIconUrl = val.popIconList[0].iconImgURL
                    }
                }
                itemList.list.push({
                    imgUrl: snm._.escape(val.goodsImgURL),
                    itemName: snm._.escape(val.brandNameGoodsName),
                    lowPriceExTax: self.textSeparate(self.checkValue(val.lowPriceExTax)),
                    lowPriceInTax: self.textSeparate(self.checkValue(val.lowPriceInTax)),
                    highPriceExTax: self.textSeparate(self.checkValue(val.highPriceExTax)),
                    highPriceInTax: self.textSeparate(self.checkValue(val.highPriceInTax)),
                    linkUrl: "http:" + snm._.escape(val.goodsURL),
                    storeLogoInfo: val.storeLogoInfo,
                    drugFlg: val.drugFlg,
                    iconAlt: tmpIconAlt,
                    iconImgURL: tmpIconUrl,
                    imageTabIndex: 1101 + i * 10,
                    textTabIndex: 1102 + i * 10
                })
            });
            var tmp = this.$el.find(this.param.ajaxKeywordSearchSelect).val();
            itemList.text = snm._.escape(tmp);
            itemList.textUrl = encodeURIComponent(tmp);
            this.$el.find(this.param.ajaxKeywordSearchContents).html(this.param.tmpContentsTmp(itemList))
        } else if (data.commonInfo.resultCode === "100") {
            this.$el.find(this.param.ajaxKeywordSearchContents).html(this.param.tmpContentsTmp(itemList));
            return false
        } else {
            this.$el.find(this.param.ajaxKeywordSearchContents).html("");
            return false
        }
        this.$el.find(this.param.ajaxKeywordSearchContents + " .js-carouselNormalDispArea").each(function() {
            new snm.module.view.CarouselNormal({
                el: snm.$(this)
            })
        });
        snm.$(".js-carouselRtoasterTrigger").each(function() {
            new snm.module.view.CarouselRtoaster({
                el: snm.$(this)
            })
        })
    },
    textSeparate: function(num) {
        var text = num + "",
            textNum = text.length,
            commaText = "",
            i;
        for (i = textNum - 1; i >= 0; i--) {
            commaText += text.charAt(textNum - 1 - i);
            if (i % 3 == 0 && i != 0) {
                commaText += ","
            }
        }
        return commaText
    },
    flagFields: function() {
        var ageKbn = snm.$(this.param.ageKbn).val(),
            field = [{
                fieldName: "shohn_accpt_flg",
                fieldValues: [{
                    matchType: 0,
                    value: "1"
                }]
            }];
        if (ageKbn === "1" || ageKbn === "2") {
            field.push({
                fieldName: "liquor_flg",
                fieldValues: [{
                    matchType: 0,
                    value: "0"
                }]
            })
        }
        if (ageKbn === "2") {
            field.push({
                fieldName: "adult_flg",
                fieldValues: [{
                    matchType: 0,
                    value: "0"
                }]
            })
        }
        return field
    },
    checkValue: function(val) {
        var target = val;
        if (snm.util.objValidation(val)) {
            target = ""
        }
        return target
    }
});
snm.module.view.AjaxMailPermission = snm.Backbone.View.extend({
    param: {
        ajaxMailPermissionSendBtn: ".js-ajaxMailPermissionSendBtn",
        ajaxMailPermissionOmni: ".js-ajaxMailPermissionOmni",
        ajaxMailPermissionPartial: ".js-ajaxMailPermissionPartial",
        ajaxMailPermissionNonDisp: ".js-ajaxMailPermissionNonDisp",
        ajaxMailPermissionSuccessMsg: ".js-ajaxMailPermissionSuccessMsg",
        displayFlag: ".js-ajaxMailPermissionDisplayFlag",
        delayFlag: ".js-ajaxMailPermissionDelayFlag"
    },
    events: {
        "click .js-ajaxMailPermissionSendBtn": "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        if (snm.module.Modal === undefined) {
            this.param.mailModal = new snm.module.ModalSp({
                el: "#" + this.$el.attr("id"),
                clickDel: true
            })
        } else {
            this.param.mailModal = new snm.module.Modal({
                el: "#" + this.$el.attr("id"),
                clickDel: true
            })
        }
        var displayFlag = this.$el.find(this.param.displayFlag).val(),
            delayFlag = this.$el.find(this.param.delayFlag).val(),
            self = this;
        if (displayFlag !== "1") return;
        if (delayFlag && delayFlag.match(/[0-9]/)) {
            delayFlag = Math.abs(parseInt(delayFlag, 10));
            setTimeout(function() {
                self.param.mailModal.render()
            }, delayFlag)
        } else {
            this.param.mailModal.render()
        }
    },
    render: function() {
        var self = this,
            omniVal, partialVal, nonDispVal, dataObj, msgFlag = true;
        if (this.$el.find(this.param.ajaxMailPermissionOmni)[0] && !this.$el.find(this.param.ajaxMailPermissionOmni).is(":checked")) {
            omniVal = "0"
        } else {
            omniVal = "1"
        }
        partialVal = this.$el.find(this.param.ajaxMailPermissionPartial).is(":checked") ? "1" : "0";
        nonDispVal = this.$el.find(this.param.ajaxMailPermissionNonDisp).is(":checked") ? "1" : "0";
        if (partialVal === "0" && (omniVal === "0" || !this.$el.find(this.param.ajaxMailPermissionOmni)[0])) {
            msgFlag = false
        }
        dataObj = {
            omni_mail_subscription_flg: omniVal,
            kosya_mail_subscription_flg: partialVal,
            mailmg_permis_non_disp_flg: nonDispVal
        };
        snm.module.ajax({
            url: snm.api.root + snm.api.mailPermission,
            type: "POST",
            data: dataObj,
            dataType: "json",
            modal: true,
            parentObj: this.$el.find(this.param.modalContents),
            ajaxErrorFuncFlag: false,
            success: function() {
                self.renderSuccess(msgFlag)
            }
        });
        return false
    },
    renderSuccess: function(msgFlag) {
        if (msgFlag) {
            snm.$(this.param.ajaxMailPermissionSuccessMsg).show()
        }
        this.param.mailModal.renderClose()
    }
});
snm.module.view.AjaxMailSend = snm.Backbone.View.extend({
    param: {
        ajaxMailSendMarkcode: ".js-ajaxMailSendMarkcode",
        ajaxMailSendAdd: ".js-ajaxMailSendAdd",
        ajaxMailSendAddMail: ".js-ajaxMailSendAddMail",
        ajaxMailSendUrl: ".js-ajaxMailSendUrl",
        ajaxMailSendTitle: ".js-ajaxMailSendTitle",
        ajaxMailSendSenderName: ".js-ajaxMailSendSenderName",
        ajaxMailSendSenderMailAddress: ".js-ajaxMailSendSenderMailAddress",
        ajaxMailSendReceiverName: ".js-ajaxMailSendReceiverName",
        ajaxMailSendReceiverMailAddress: ".js-ajaxMailSendReceiverMailAddress",
        ajaxMailSendMessage: ".js-ajaxMailSendMessage",
        ajaxMailSendModal: "#js-ajaxMailSendModal",
        ajaxMailSendSuccessMsg: ".js-ajaxMailSendSuccessMsg",
        ajaxMailSendErrorMsg: ".js-ajaxMailSendErrorMsg",
        ajaxMailSendErrorMsgText: ".js-ajaxMailSendErrorMsgText",
        ajaxErrModal: "#js-ajaxErrModal",
        ajaxErrorText: ".js-ajaxErrorText",
        ajaxErrorMsg: ".js-ajaxErrorMsg",
        ajaxErrorMsgTarget: ".js-ajaxErrorMsgTarget",
        ajaxMailSendcc: ".js-ajaxMailSendcc",
        ajaxMailSendBtn: ".js-ajaxMailSendBtn",
        modalContents: ".js-modalContents",
        ajaxMailSendAddSpeed: 300,
        dataBackUrl: "data-back-url"
    },
    events: {
        "click .js-ajaxMailSendAdd": "renderAddMail",
        "click .js-ajaxMailSendBtn": "renderMailSend"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.$el.find(this.param.ajaxMailSendAddMail).hide();
        if (snm.module.Modal === undefined) {
            this.param.messageModal = new snm.module.ModalSp({
                el: this.param.ajaxMailSendModal,
                clickDel: true
            })
        } else {
            this.param.messageModal = new snm.module.Modal({
                el: this.param.ajaxMailSendModal,
                clickDel: true,
                bgHidden: false
            })
        }
        this.param.defaultsData = {
            title: this.$el.find(this.param.ajaxMailSendTitle).val(),
            sender_name: this.$el.find(this.param.ajaxMailSendSenderName).val()
        };
        this.$el.appendTo(snm.$("body"))
    },
    renderAddMail: function() {
        this.$el.find(this.param.ajaxMailSendAddMail).fadeIn(this.param.ajaxMailSendAddSpeed);
        this.$el.find(this.param.ajaxMailSendAdd).hide();
        return false
    },
    renderMailSend: function() {
        var target = [this.param.ajaxMailSendSenderName, this.param.ajaxMailSendReceiverName, this.param.ajaxMailSendMessage].join(",");
        this.$el.find(target).each(function() {
            snm.$(this).val(snm.util.converter.toFullPitch(snm.$(this).val()))
        });
        var sendObj = this.sendObj(),
            self = this;
        snm.module.ajax({
            url: snm.api.root + snm.api.sendMail,
            type: "POST",
            data: sendObj,
            dataType: "json",
            traditional: true,
            modal: true,
            parentObj: this.$el.find(this.param.modalContents),
            ajaxErrorFuncFlag: false,
            success: function(data) {
                var code = data.commonInfo.resultCode;
                self.param.dataObj = data;
                if (code === "500") {
                    self.renderError()
                } else {
                    self.renderModal(code)
                }
            }
        });
        return false
    },
    renderModal: function(code) {
        var self = this,
            modal = this.param.messageModal;
        this.$el.find(this.param.modalContents).fadeOut("fast", function() {
            modal.render()
        });
        if (code === "000") {
            self.resetForm();
            snm.$(this.param.ajaxMailSendErrorMsg).hide();
            snm.$(this.param.ajaxMailSendSuccessMsg).show().text("メールを送信しました。")
        } else if (code === "101") {
            snm.$(this.param.ajaxMailSendSuccessMsg).hide();
            snm.$(this.param.ajaxMailSendErrorMsg).show().find(this.param.ajaxMailSendErrorMsgText).attr("href", this.param.dataObj.serviceInfo.login_url).text("ログイン")
        } else {
            snm.$(this.param.ajaxMailSendErrorMsg).hide();
            snm.$(this.param.ajaxMailSendSuccessMsg).show().html(this.param.dataObj.commonInfo.message)
        }
    },
    renderError: function() {
        var msg = snm.util.isErrorMsg.init(this.param.dataObj);
        this.$el.find(this.param.ajaxErrorMsg).show();
        this.$el.find(this.param.ajaxErrorMsgTarget).html(msg)
    },
    resetForm: function() {
        this.$el.find("input[type='text'], textarea").val("");
        this.$el.find(this.param.ajaxErrorMsg).hide();
        this.$el.find(this.param.ajaxMailSendAdd).show();
        this.$el.find(this.param.ajaxMailSendAddMail).hide();
        this.$el.find(this.param.ajaxMailSendTitle).val(this.param.defaultsData.title);
        this.$el.find(this.param.ajaxMailSendSenderName).val(this.param.defaultsData.sender_name)
    },
    sendObj: function() {
        var sendcc = this.$el.find(this.param.ajaxMailSendcc).prop("checked") === true ? 1 : 0,
            self = this,
            receiversName = [],
            receiverAddress = [],
            cmpnyCd = snm.$("input[name='jigyo_cmpny_cd']").val(),
            siteCd = snm.$("input[name='site_cd']").val(),
            data, name, address;
        this.$el.find(this.param.ajaxMailSendReceiverName).each(function(i) {
            name = self.$el.find(self.param.ajaxMailSendReceiverName).eq(i).val();
            address = self.$el.find(self.param.ajaxMailSendReceiverMailAddress).eq(i).val();
            receiversName.push(name);
            receiverAddress.push(address)
        });
        data = {
            sender_name: this.$el.find(this.param.ajaxMailSendSenderName).val(),
            sender_mail_address: this.$el.find(this.param.ajaxMailSendSenderMailAddress).text(),
            share_item_name: this.$el.find(this.param.ajaxMailSendTitle).text(),
            share_item_url: this.$el.find(this.param.ajaxMailSendUrl).text(),
            message: this.$el.find(this.param.ajaxMailSendMessage).val(),
            send_cc: sendcc,
            receiver_name: receiversName,
            receiver_mail_address: receiverAddress,
            back_to_url: this.$el.find(this.param.ajaxMailSendBtn).attr(this.param.dataBackUrl),
            jigyo_cmpny_cd: cmpnyCd,
            site_cd: siteCd
        };
        data[this.$el.find(this.param.ajaxMailSendMarkcode).attr("name")] = this.$el.find(this.param.ajaxMailSendMarkcode).val();
        return data
    }
});
snm.module.AjaxOmniRtoaster = {
    param: {
        id: "",
        companyCd: "",
        siteCd: "",
        validationCd: "",
        maxNum: "",
        url: location.href,
        category: [],
        items: [],
        itemCnt: 0,
        elementId: "",
        userId: "",
        flagAction: true,
        wrapper: ".js-ajaxOmniRtoasterWrap"
    },
    init: function(a, b, c, d, e) {
        if (snm.util.objValidation(a) || snm.util.objValidation(b) || snm.util.objValidation(c) || snm.util.objValidation(d) || snm.util.objValidation(e)) {
            this.param.flagAction = false;
            return false
        }
        this.param.id = a;
        this.param.companyCd = b;
        this.param.siteCd = c;
        this.param.validationCd = d;
        this.param.maxNum = e
    },
    category: function() {
        if (!this.param.flagAction) {
            return false
        }
        this.param.category = arguments
    },
    item: function(item) {
        if (!this.param.flagAction) {
            return false
        }
        this.param.items = item
    },
    recommendNow: function() {
        var self = this;
        this.param.userId = snm.module.cookie.get("_rt.uid");
        if (!this.param.flagAction || snm.util.objValidation(this.param.userId)) {
            return false
        }
        var dataObj = {
            account_id: this.param.id,
            user_id: this.param.userId,
            url: this.param.url,
            jigyo_cmpny_cd: this.param.companyCd,
            site_cd: this.param.siteCd,
            validation_cd: this.param.validationCd,
            max_num: this.param.maxNum,
            item_count: 0,
            element_id: ""
        };
        for (var i = 0; i < this.param.category.length; i++) {
            var num = i + 1,
                categoryName = "category" + num;
            dataObj[categoryName] = this.param.category[i]
        }
        this.param.itemCnt = 0;
        for (var key in this.param.items) {
            dataObj[key] = this.param.items[key];
            this.param.itemCnt = this.param.itemCnt + 1
        }
        dataObj.item_count = this.param.itemCnt;
        var elIdList = arguments;
        for (var j = 0; j < elIdList.length; j++) {
            if (snm.$("#" + elIdList[j])[0]) {
                var elId = elIdList[j];
                dataObj.element_id = elId;
                snm.$("#" + elId + " [id^='" + elId + "_']").hide();
                snm.module.ajax({
                    url: snm.api.root + snm.api.omniRtoaster,
                    type: "POST",
                    data: dataObj,
                    dataType: "json",
                    ajaxErrorFuncFlag: false,
                    ajaxErrorFuncFlagOnFail: false,
                    loader: false,
                    success: function(data) {
                        var code = data.commonInfo.resultCode;
                        if (code === "000") {
                            for (var k = 0; k < data.serviceInfo.recommendInfo.length; k++) {
                                snm.$("#" + elId + " [id^='" + elId + "_']").eq(k).html(data.serviceInfo.recommendInfo[k].content).show()
                            }
                        } else {
                            if (snm.$("#" + elId).closest(self.param.wrapper)[0]) {
                                snm.$("#" + elId).closest(self.param.wrapper).hide()
                            }
                        }
                    },
                    error: function() {
                        if (snm.$("#" + elId).closest(self.param.wrapper)[0]) {
                            snm.$("#" + elId).closest(self.param.wrapper).hide()
                        }
                    }
                })
            }
        }
    }
};
var OMNI_Rtoaster = snm.module.AjaxOmniRtoaster;
snm.module.model.AjaxPointUpdate = snm.Backbone.Model.extend({});
snm.module.view.AjaxPointUpdate = snm.Backbone.View.extend({
    param: {
        ajaxPointUpdateText: ".js-ajaxPointUpdateText",
        ajaxPointUpdateTextWrap: ".js-ajaxPointUpdateTextWrap",
        ajaxPointUpdateBtn: ".js-ajaxPointUpdateBtn"
    },
    events: {
        "click .js-ajaxPointUpdateBtn": "modelSet"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change", this.getData, this)
    },
    modelSet: function() {
        this.model.set("click", "on");
        return false
    },
    getData: function() {
        var self = this;
        snm.module.ajax({
            url: snm.api.root + snm.api.pointUpdate,
            type: "POST",
            data: {
                back_to_url: window.location.href
            },
            dataType: "json",
            parentObj: this.$el,
            success: function(data) {
                if (data.commonInfo.resultCode === "000") {
                    var point = data.serviceInfo.point.nanacoPoint;
                    self.$el.find(self.param.ajaxPointUpdateText).html(point).closest(self.param.ajaxPointUpdateTextWrap).show()
                } else if (data.commonInfo.resultCode === "101") {
                    window.location.href = data.serviceInfo.login_url
                } else {
                    self.$el.find(self.param.ajaxPointUpdateText).html("").closest(self.param.ajaxPointUpdateTextWrap).hide();
                    self.$el.find(self.param.ajaxPointUpdateBtn).prop("disabled", true)
                }
                self.model.set("click", "off", {
                    silent: true
                })
            }
        })
    }
});
snm.module.model.AjaxShopingListProducts = snm.Backbone.Model.extend({});
snm.module.view.AjaxShopingListProducts = snm.Backbone.View.extend({
    param: {
        templateId: "#tmpAjaxShopingProducts",
        ajaxShopingListProductsBtn: ".js-ajaxShopingListProductsBtn",
        ajaxShopingListProductsMsg: ".js-ajaxShopingListProductsMsg",
        ajaxShopingListProductspopup: ".js-popupWindow",
        ajaxErrorModal: "#js-ajaxErrModal",
        ajaxErrorText: ".js-ajaxErrorText",
        dataItemId: "data-item-id",
        dataBackUrl: "data-back-url",
        dataShohnCd: "data-shohn_cd",
        dataJigyoCmpnyCd: "data-jigyo_cmpny_cd",
        dataSiteCd: "data-site_cd"
    },
    events: {
        "click .js-ajaxShopingListProductsBtn": "modelChange"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change", this.getData, this);
        this.param.template = snm._.template(snm.$(this.param.templateId).html());
        this.param.popup = new snm.module.view.Popup({
            el: this.$el,
            model: new snm.module.model.Popup({})
        });
        this.param.errModal = new snm.module.Modal({
            el: snm.$(this.param.ajaxErrorModal),
            clickDel: true
        })
    },
    modelChange: function(e) {
        var popupVisible = this.$el.find(this.param.ajaxShopingListProductspopup).css("display") || "none";
        if (popupVisible === "none") {
            this.model.set("link", true)
        }
        return false
    },
    getData: function() {
        var self = this,
            $productsBtn = this.$el.find(this.param.ajaxShopingListProductsBtn),
            cmpnyCd = $productsBtn.attr(this.param.dataJigyoCmpnyCd),
            siteCd = $productsBtn.attr(this.param.dataSiteCd),
            shohnCd = $productsBtn.attr(this.param.dataShohnCd),
            itemCd = $productsBtn.attr(this.param.dataItemId),
            backUrl = $productsBtn.attr(this.param.dataBackUrl),
            token = snm.$('input[type="hidden"][name="omni.request.osz.common.setCartMarkcode"]').val() || null;
        snm.module.ajax({
            url: snm.api.root + snm.api.shoppingListProducts,
            type: "POST",
            data: {
                jigyo_cmpny_cd: cmpnyCd,
                site_cd: siteCd,
                jigyo_cmpny_per_shohn_cd: shohnCd,
                jigyo_cmpny_per_item_cd: itemCd,
                back_to_url: backUrl,
                token: token
            },
            dataType: "json",
            success: function(data) {
                self.param.resultCode = data.commonInfo.resultCode;
                self.param.messageCode = data.commonInfo.messageCode;
                if (self.param.resultCode === "000") {
                    if (self.param.messageCode !== "COMMON_SHOPPINGLISTADD_ITEM_REG") {
                        self.param.statusCode = 0
                    } else {
                        self.param.statusCode = 1
                    }
                } else if (self.param.resultCode === "101") {
                    self.param.statusCode = 2
                } else if (self.param.resultCode === "500") {
                    var errorMsg = snm.util.isErrorMsg.init(data);
                    snm.$(self.param.ajaxErrorText).html(errorMsg);
                    self.param.errModal.render();
                    return false
                } else {
                    return false
                }
                self.render(data)
            }
        });
        this.model.set("link", false, {
            silent: true
        })
    },
    render: function(data) {
        var tmpData = {};
        tmpData.status = this.param.statusCode;
        if (this.param.resultCode === "500") {
            tmpData.message = data.commonInfo.validateMessages.jigyo_cmpny_per_item_cd;
            tmpData.shopping_list_name = data.commonInfo.validateMessages.shopping_list_name;
            tmpData.shopping_list_url = data.commonInfo.validateMessages.shopping_list_url
        } else if (this.param.resultCode === "000" || this.param.resultCode === "101") {
            tmpData.message = data.commonInfo.message;
            tmpData.shopping_list_name = data.serviceInfo.shopping_list_name;
            tmpData.shopping_list_url = data.serviceInfo.shopping_list_url;
            tmpData.login_url = data.serviceInfo.login_url
        }
        this.$el.find(this.param.ajaxShopingListProductsMsg).html(this.param.template(tmpData));
        this.param.popup.clickTrigger()
    }
});
snm.module.view.AjaxStockInfo = snm.Backbone.View.extend({
    param: {
        ajaxStockInfoSuccessModal: ".js-ajaxStockInfoSuccessModal",
        ajaxStockInfoMainAddress: ".js-ajaxStockInfoMainAddress",
        ajaxStockInfoSubAddress: ".js-ajaxStockInfoSubAddress",
        ajaxStockInfoMainAddressHidden: ".js-ajaxStockInfoMainAddressHidden",
        ajaxStockInfoSubAddressHidden: ".js-ajaxStockInfoSubAddressHidden",
        ajaxStockInfoSubAddressArea: ".js-ajaxStockInfoSubAddressArea",
        ajaxStockInfoErrorMsg: ".js-ajaxStockInfoErrorMsg",
        ajaxStockInfoLogin: ".js-ajaxStockInfoLogin",
        ajaxStockInfoArrival: "js-ajaxStockInfo_arrival",
        ajaxStockInfoRelease: "js-ajaxStockInfo_release",
        ajaxStockInfoLabelArrival: ".js-ajaxStockInfoLabelArrival",
        ajaxStockInfoLabelRelease: ".js-ajaxStockInfoLabelRelease",
        ajaxStockInfoType: ".js-ajaxStockInfoType",
        ajaxErrModal: "#js-ajaxErrModal",
        ajaxErrorText: ".js-ajaxErrorText",
        dataBackUrl: "data-back-url"
    },
    events: {
        click: "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        if (snm.$(this.param.ajaxStockInfoSuccessModal)[0]) {
            snm.$(this.param.ajaxStockInfoSuccessModal).eq(0).removeClass(this.param.ajaxStockInfoSuccessModal.replace(".", "")).attr("id", this.$el.attr("href").replace("#", ""))
        }
        if (snm.module.Modal === undefined) {
            this.param.stockModal = new snm.module.ModalSp({
                el: this.$el,
                clickDel: true
            });
            this.param.errModal = new snm.module.ModalSp({
                el: this.param.ajaxErrModal,
                clickDel: true
            })
        } else {
            if (this.param.stockModal === undefined) {
                this.param.stockModal = new snm.module.Modal({
                    el: this.$el,
                    clickDel: true
                })
            }
            if (this.param.errModal === undefined) {
                this.param.errModal = new snm.module.Modal({
                    el: this.param.ajaxErrModal,
                    clickDel: true
                })
            }
        }
    },
    render: function() {
        var self = this,
            backUrl = this.$el.attr(this.param.dataBackUrl),
            targetAnchor = this.$el.attr("href"),
            type = "arrival";
        if (this.$el.hasClass(this.param.ajaxStockInfoRelease)) {
            type = "release"
        }
        snm.module.ajax({
            url: snm.api.root + snm.api.stockNews,
            type: "POST",
            data: {
                back_to_url: backUrl
            },
            dataType: "json",
            success: function(data) {
                var code = data.commonInfo.resultCode;
                if (code === "000") {
                    self.param.stockModal.render();
                    snm.$(targetAnchor).find(self.param.ajaxStockInfoMainAddress).html(data.serviceInfo.mainMail);
                    snm.$(targetAnchor).find(self.param.ajaxStockInfoSubAddress).html(data.serviceInfo.subMail);
                    snm.$(targetAnchor).find(self.param.ajaxStockInfoMainAddressHidden).val(data.serviceInfo.mainMail);
                    snm.$(targetAnchor).find(self.param.ajaxStockInfoSubAddressHidden).val(data.serviceInfo.subMail);
                    if (data.serviceInfo.subMail !== 0 && snm._.isEmpty(data.serviceInfo.subMail)) {
                        snm.$(targetAnchor).find(self.param.ajaxStockInfoSubAddressArea).hide()
                    } else {
                        snm.$(targetAnchor).find(self.param.ajaxStockInfoSubAddressArea).show()
                    }
                    self.switchModal(snm.$(targetAnchor), type)
                } else {
                    self.param.errModal.render();
                    var message = snm.util.isErrorMsg.init(data);
                    if (code === "101" && data.serviceInfo.login_url) {
                        message += "<br><a href='" + data.serviceInfo.login_url + "'>ログイン</a>"
                    }
                    snm.$(self.param.ajaxErrModal).find(self.param.ajaxErrorText).html(message)
                }
            }
        });
        return false
    },
    switchModal: function(targetModal, type) {
        var showTarget = this.param.ajaxStockInfoLabelArrival,
            hideTarget = this.param.ajaxStockInfoLabelRelease,
            typeVal = "02";
        if (type === "release") {
            showTarget = this.param.ajaxStockInfoLabelRelease;
            hideTarget = this.param.ajaxStockInfoLabelArrival;
            typeVal = "03"
        }
        targetModal.find(hideTarget).hide();
        targetModal.find(showTarget).show();
        targetModal.find(this.param.ajaxStockInfoType).val(typeVal)
    }
});
snm.module.ajax = function(ajaxOptions) {
    var self = this,
        modal, loading, loadingInner, param, options;
    param = {
        ajaxErrorModal: "#js-ajaxErrModal",
        ajaxErrorText: ".js-ajaxErrorText",
        ajaxErrorMsg: ".js-ajaxErrorMsg",
        ajaxErrorMsgTarget: ".js-ajaxErrorMsgTarget",
        ajaxLoadingWrap: ".js-ajaxLoadingWrap",
        ajaxLoadingInner: ".js-ajaxLoadingInner",
        scrollSpeed: 500
    };
    options = {
        loader: true,
        erroeModal: true,
        errorScroll: true,
        ajaxErrorFuncFlag: true,
        ajaxErrorFuncFlagOnFail: true,
        errorMsgEscape: false
    };
    ajaxOptions = snm.$.extend(options, ajaxOptions);
    if (ajaxOptions.modal) {
        if (snm.$(ajaxOptions.parentObj).find(param.ajaxLoadingWrap).length == 0) {
            snm.$(param.ajaxLoadingWrap).appendTo(ajaxOptions.parentObj)
        }
        loading = snm.$(ajaxOptions.parentObj).find(param.ajaxLoadingWrap);
        loading.css({
            position: "absolute",
            "border-radius": snm.$(ajaxOptions.parentObj).css("border-radius")
        })
    } else {
        snm.$(param.ajaxLoadingWrap).appendTo("body").css({
            position: "",
            "border-radius": ""
        });
        loading = snm.$(param.ajaxLoadingWrap)
    }
    if (ajaxOptions.loader) {
        loadingInner = loading.find(param.ajaxLoadingInner);
        loading.fadeIn();
        loadingInner.css({
            position: "absolute",
            marginTop: "-" + loadingInner.innerHeight() / 2 + "px",
            marginLeft: "-" + loadingInner.innerWidth() / 2 + "px"
        })
    }

    function ajaxErrorFunc(data) {
        if (self.errModal === undefined) {
            if (snm.module.Modal === undefined) {
                self.errModal = new snm.module.ModalSp({
                    el: param.ajaxErrorModal,
                    ajaxAfter: true,
                    clickDel: true
                })
            } else {
                self.errModal = new snm.module.Modal({
                    el: param.ajaxErrorModal,
                    ajaxAfter: true,
                    clickDel: true
                })
            }
        }
        if (snm.$(ajaxOptions.parentObj).find(param.ajaxErrorMsg).length > 0) {
            var text = data ? data.commonInfo.message : snm.$(param.ajaxErrorModal).find(param.ajaxErrorText).text();
            if (ajaxOptions.errorMsgEscape) {
                snm.$(ajaxOptions.parentObj).find(param.ajaxErrorMsgTarget).text(text)
            } else {
                snm.$(ajaxOptions.parentObj).find(param.ajaxErrorMsgTarget).html(text)
            }
            snm.$(ajaxOptions.parentObj).find(param.ajaxErrorMsg).show();
            scrollingMsg()
        } else if (ajaxOptions.erroeModal) {
            if (data) {
                if (ajaxOptions.errorMsgEscape) {
                    snm.$(param.ajaxErrorText).text(data.commonInfo.message)
                } else {
                    snm.$(param.ajaxErrorText).html(data.commonInfo.message)
                }
            }
            self.errModal.render()
        }
        loading.fadeOut()
    }

    function scrollingMsg() {
        if (!ajaxOptions.errorScroll) return;
        if (snm.$(ajaxOptions.parentObj).find(param.ajaxErrorMsg)[0]) {
            if (snm.$(window).scrollTop() > snm.$(ajaxOptions.parentObj).find(param.ajaxErrorMsg).offset().top) {
                var top = snm.$(ajaxOptions.parentObj).offset().top - Number(snm.$(ajaxOptions.parentObj).css("marginTop").replace("px", ""));
                snm.$("html, body").animate({
                    scrollTop: top + "px"
                }, param.scrollSpeed)
            }
        }
    }
    return snm.$.ajax(ajaxOptions).done(function(data) {
        var resultCode = "";
        if (!snm._.isEmpty(data.commonInfo)) resultCode = data.commonInfo.resultCode;
        loading.fadeOut();
        if (resultCode === "000" || resultCode === "100" || resultCode === "101" || resultCode === "500" || resultCode === "050") {
            if (resultCode !== "000" && resultCode !== "101") scrollingMsg();
            return false
        } else {
            if (ajaxOptions.ajaxErrorFuncFlag) ajaxErrorFunc(data)
        }
    }).fail(function(status) {
        if (status.statusText == "abort") {
            return false
        }
        if (ajaxOptions.ajaxErrorFuncFlagOnFail) {
            ajaxErrorFunc()
        } else {
            loading.fadeOut()
        }
    })
};
snm.module.view.AlertModal = snm.Backbone.View.extend({
    param: {
        alertModal: "#js-alertModal",
        alertModalMsg: ".js-alertModalMsg",
        alertModalTitle: ".js-alertModalTitle",
        alertModalSubmitBtn: ".js-alertModalSubmitBtn",
        alertModalSubmitBtnWrap: ".js-alertModalSubmitBtnWrap",
        alertModalCancelBtn: ".js-alertModalCancelBtn",
        alertModalCloseBtn: ".js-alertModalCloseBtn"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.state = "";
        var self = this;
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: snm.$(this.param.alertModal),
                clickDel: true,
                outAreaClick: false,
                speed: 300
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: snm.$(this.param.alertModal),
                clickDel: true,
                outAreaClick: false,
                speed: 300
            })
        }
        this.$el.on("click.alertModal_close", this.param.alertModalCloseBtn, function() {
            self.renderModal("close")
        })
    },
    render: function(title, msg, type, callback) {
        var self = this;
        this.$el.find(this.param.alertModalMsg).html(msg);
        this.$el.find(this.param.alertModalTitle).text(title);
        if (type === "alert") {
            this.$el.off("click.alertModal_cancel", this.param.alertModalCancelBtn).on("click.alertModal_cancel", this.param.alertModalCancelBtn, function() {
                self.renderModal("close")
            });
            this.$el.find(this.param.alertModalCancelBtn).text("閉じる");
            this.$el.off("click.alertModal_submit", this.param.alertModalSubmitBtn);
            this.$el.find(this.param.alertModalSubmitBtnWrap).hide()
        } else {
            this.$el.off("click.alertModal_cancel", this.param.alertModalCancelBtn).on("click.alertModal_cancel", this.param.alertModalCancelBtn, function() {
                self.renderModal("close");
                callback(false)
            });
            this.$el.find(this.param.alertModalCancelBtn).text("キャンセル");
            this.$el.off("click.alertModal_submit", this.param.alertModalSubmitBtn).on("click.alertModal_submit", this.param.alertModalSubmitBtn, function() {
                self.renderModal("close");
                callback(true)
            });
            this.$el.find(this.param.alertModalSubmitBtnWrap).show()
        }
        this.renderModal("open")
    },
    alert: function(message, title, callback) {
        if (title == null) title = "Alert";
        this.render(title, message, "alert", function(result) {
            if (callback) callback(result)
        })
    },
    confirm: function(message, title, callback) {
        if (title == null) title = "Confirm";
        this.render(title, message, "confirm", function(result) {
            if (callback) callback(result)
        })
    },
    renderModal: function(type) {
        var self = this,
            timer, count = 0,
            maxCount = 10;
        if (this.param.state === "") {
            this.param.state = "move";
            this.param.moveTimer = setTimeout(function() {
                self.param.state = ""
            }, 510);
            if (type === "open") {
                this.param.modal.render()
            } else {
                this.param.modal.renderClose()
            }
        } else {
            timer = setInterval(function() {
                count++;
                if (self.param.state === "") {
                    self.param.state = "move";
                    self.param.moveTimer = setTimeout(function() {
                        self.param.state = ""
                    }, 510);
                    clearInterval(timer);
                    if (type === "open") {
                        self.param.modal.render()
                    } else {
                        self.param.modal.renderClose()
                    }
                    return
                }
                if (count >= maxCount) {
                    clearInterval(timer)
                }
            }, 100)
        }
    }
});
snm.module.model.AllcheckClear = snm.Backbone.Model.extend({});
snm.module.view.AllcheckClear = snm.Backbone.View.extend({
    param: {
        allcheckClearBtn: ".js-allcheckClearBtn",
        allcheckClearAllChecked: "js-allcheckClearAllChecked"
    },
    events: {
        "change input[type='radio']": "changeAction"
    },
    initialize: function() {
        this.model.on("change", this.render, this)
    },
    changeAction: function(e) {
        this.param.$triggerEle = snm.$(e.target);
        if (this.$el.find(this.param.allcheckClearBtn).prop("checked")) {
            this.model.set("status", "on")
        } else {
            this.model.set("status", "off")
        }
    },
    render: function() {
        if (this.model.get("status") == "on") {
            this.renderDisabled()
        } else {
            this.renderClear()
        }
    },
    renderDisabled: function() {
        this.$el.find("input[type='checkbox']").prop("checked", false).prop("disabled", true);
        this.model.set("status", null, {
            silent: true
        })
    },
    renderClear: function() {
        this.$el.find("input[type='checkbox']").prop("disabled", false);
        if (this.param.$triggerEle.hasClass(this.param.allcheckClearAllChecked)) {
            this.$el.find("input[type='checkbox']").prop("checked", true)
        }
        this.model.set("status", null, {
            silent: true
        })
    }
});
snm.module.model.AllcheckExDisabled = snm.Backbone.Model.extend({});
snm.module.view.AllcheckExDisabled = snm.Backbone.View.extend({
    param: {
        allcheckTrigger: ".js-allcheckTrigger",
        allcheckTarget: ".js-allcheckTarget:enabled",
        allcheckOpTriggerDisabledClass: "js-allcheckOpTriggerDisabled"
    },
    events: {
        "click .js-allcheckTarget": "numcheck",
        "click .js-allcheckTrigger": "allchecked"
    },
    initialize: function() {
        this.model.set("name", this.$el.find(this.param.allcheckTrigger).attr("name"));
        this.model.on("change", this.switchModel, this);
        var checkboxNum = this.$el.find(this.param.allcheckTarget).length,
            checkNum = this.$el.find(this.param.allcheckTarget + ":checked").length;
        if (checkboxNum === 0 && this.$el.hasClass(this.param.allcheckOpTriggerDisabledClass)) {
            this.$el.find(this.param.allcheckTrigger).prop("disabled", true);
            this.model.set("allcheck", "off");
            delete this.events.click
        } else if (checkboxNum == checkNum) {
            this.model.set("allcheck", "on")
        } else {
            this.model.set("allcheck", "off")
        }
        this.unSelect()
    },
    unSelect: function() {
        if (snm.util.ie && snm.util.version <= 9) {
            this.$el.find("label").attr("unselectable", "on")
        } else {
            this.$el.find("label").css("user-select", "none")
        }
    },
    allchecked: function(e) {
        var check = snm.$(e.target).prop("checked");
        if (check) {
            this.model.set("allcheck", "on");
            this.$el.find(this.param.allcheckTarget).prop("checked", true).trigger("change")
        } else {
            this.model.set("allcheck", "off");
            this.$el.find(this.param.allcheckTarget).prop("checked", false).trigger("change")
        }
    },
    switchModel: function() {
        var modelVal = this.model.get("allcheck");
        if (modelVal == "on") {
            this.targetCheckOn(true)
        } else {
            this.targetCheckOn(false)
        }
    },
    targetCheckOn: function(type) {
        this.$el.find(this.param.allcheckTrigger).prop("checked", type)
    },
    numcheck: function() {
        var checkboxNum = this.$el.find(this.param.allcheckTarget).length;
        var checkNum = this.$el.find(this.param.allcheckTarget + ":checked").length;
        if (checkboxNum == checkNum) {
            this.model.set("allcheck", "on")
        } else {
            this.model.set("allcheck", "off")
        }
    }
});
snm.module.model.Allcheck = snm.Backbone.Model.extend({});
snm.module.view.Allcheck = snm.Backbone.View.extend({
    param: {
        allcheckTrigger: ".js-allcheckTrigger",
        allcheckTarget: ".js-allcheckTarget",
        allcheckOpTriggerDisabledClass: "js-allcheckOpTriggerDisabled"
    },
    events: {
        "click .js-allcheckTarget": "numcheck",
        "click .js-allcheckTrigger": "allchecked"
    },
    initialize: function() {
        this.model.set("name", this.$el.find(this.param.allcheckTrigger).attr("name"));
        this.model.on("change", this.switchModel, this);
        var checkboxNum = this.$el.find(this.param.allcheckTarget).length,
            checkNum = this.$el.find(this.param.allcheckTarget + ":checked").length;
        if (checkboxNum === 0 && this.$el.hasClass(this.param.allcheckOpTriggerDisabledClass)) {
            this.$el.find(this.param.allcheckTrigger).prop("disabled", true);
            this.model.set("allcheck", "off");
            delete this.events.click
        } else if (checkboxNum == checkNum) {
            this.model.set("allcheck", "on")
        } else {
            this.model.set("allcheck", "off")
        }
        this.unSelect()
    },
    unSelect: function() {
        if (snm.util.ie && snm.util.version <= 9) {
            this.$el.find("label").attr("unselectable", "on")
        } else {
            this.$el.find("label").css("user-select", "none")
        }
    },
    allchecked: function(e) {
        var check = snm.$(e.target).prop("checked");
        if (check) {
            this.model.set("allcheck", "on");
            this.$el.find(this.param.allcheckTarget).prop("checked", true).trigger("change")
        } else {
            this.model.set("allcheck", "off");
            this.$el.find(this.param.allcheckTarget).prop("checked", false).trigger("change")
        }
    },
    switchModel: function() {
        var modelVal = this.model.get("allcheck");
        if (modelVal == "on") {
            this.targetCheckOn(true)
        } else {
            this.targetCheckOn(false)
        }
    },
    targetCheckOn: function(type) {
        this.$el.find(this.param.allcheckTrigger).prop("checked", type)
    },
    numcheck: function() {
        var checkboxNum = this.$el.find(this.param.allcheckTarget).length;
        var checkNum = this.$el.find(this.param.allcheckTarget + ":checked").length;
        if (checkboxNum == checkNum) {
            this.model.set("allcheck", "on")
        } else {
            this.model.set("allcheck", "off")
        }
    }
});
snm.module.view.Anniversary = snm.Backbone.View.extend({
    param: {
        anniversaryMonth: ".js-anniversaryMonth",
        anniversaryDay: ".js-anniversaryDay",
        anniversaryComment: ".js-anniversaryComment",
        anniversaryDeliveryDate: ".js-anniversaryDeliveryDate",
        anniversaryBtn: ".js-anniversaryBtn"
    },
    events: {
        "keyup .js-anniversaryMonth": "monthChange",
        "keyup .js-anniversaryDay": "dateChange",
        "keyup .js-anniversaryComment": "commentChange",
        "change .js-anniversaryDeliveryDate": "deliveryDateChange",
        "click .js-anniversaryBtn": "reset"
    },
    initialize: function() {
        this.inputCheck()
    },
    monthChange: function() {
        this.inputCheck()
    },
    dateChange: function() {
        this.inputCheck()
    },
    commentChange: function() {
        this.inputCheck()
    },
    deliveryDateChange: function() {
        this.inputCheck()
    },
    reset: function() {
        this.$el.find(this.param.anniversaryMonth).val("");
        this.$el.find(this.param.anniversaryDay).val("");
        this.$el.find(this.param.anniversaryComment).val("");
        this.$el.find(this.param.anniversaryDeliveryDate).val("選択してください");
        this.inputCheck()
    },
    inputCheck: function() {
        if (this.$el.find(this.param.anniversaryMonth).val() === "" && this.$el.find(this.param.anniversaryDay).val() === "" && this.$el.find(this.param.anniversaryComment).val() == "" && this.$el.find(this.param.anniversaryDeliveryDate).val() === "選択してください") {
            this.$el.find(this.param.anniversaryBtn).attr("disabled", "disabled")
        } else {
            this.$el.find(this.param.anniversaryBtn).removeAttr("disabled")
        }
    }
});
snm.module.view.BlockTile = snm.Backbone.View.extend({
    param: {
        blockTileItem: ".js-blockTileItem",
        itemMinNum: 3,
        spaceLeft: 0,
        spaceRight: 0,
        baseSpace: 10
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.$item = this.$el.find(this.param.blockTileItem);
        this.param.itemNum = this.param.$item.length;
        if (this.param.itemNum) {
            this.param.spaceLeft = this.param.$item.eq(0).css("marginLeft");
            this.param.spaceRight = this.param.$item.eq(0).css("marginRight")
        }
        if (this.param.spaceLeft === 0 || this.param.spaceLeft === "0px") this.param.spaceLeft = this.param.baseSpace + "px";
        var self = this,
            arr = [],
            resizeTimer;
        if (this.$el.find("img")[0]) {
            this.$el.find("img").each(function() {
                arr.push(snm.$(this).attr("src"))
            });
            snm.util.preload.init(arr, function() {
                self.rowDivision()
            })
        } else {
            this.rowDivision()
        }
        this.param.isTabletView = snm.util.navigator.tablet || snm.util.navigator.smartphone;
        if (this.param.isTabletView) this.param.windowSize = snm.$(window).width();
        snm.$(window).resize(function() {
            if (self.param.isTabletView) {
                var resizeWidth = snm.$(window).width();
                if (resizeWidth === self.param.windowSize) return false;
                self.param.windowSize = resizeWidth
            }
            if (self.param.itemNum) {
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function() {
                    self.rowDivision()
                }, 50)
            }
        })
    },
    rowDivision: function() {
        var i, top, beforeTop;
        this.param.$item.css({
            width: "",
            marginLeft: this.param.spaceLeft,
            marginRight: this.param.spaceRight
        });
        for (i = 0; i < this.param.itemNum; i++) {
            top = this.param.$item.eq(i).offset().top;
            if (!snm._.isUndefined(beforeTop) && top !== beforeTop) break;
            beforeTop = top
        }
        this.param.lineNum = Math.max(i, this.param.itemMinNum);
        this.spaceAdjust()
    },
    spaceAdjust: function() {
        var wrapX = this.$el.width() - 1,
            itemX = this.param.$item.eq(0).width(),
            itemNum = this.param.lineNum,
            minSpace = parseFloat(this.param.spaceLeft),
            space = Math.max((wrapX - itemX * itemNum) / itemNum / 2, isNaN(minSpace) ? this.param.baseSpace : minSpace),
            width = (wrapX - space * (itemNum * 2)) / itemNum;
        this.param.$item.css("width", width + "px")
    }
});
snm.module.view.BlockTrim = snm.Backbone.View.extend({
    param: {
        blockTrimItem: ".js-blockTrimItem",
        itemMinNum: 3,
        spaceLeft: 0,
        spaceRight: 0,
        baseSpace: 10
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.itemNum = this.$el.find(this.param.blockTrimItem).length;
        if (this.param.itemNum) {
            this.param.spaceLeft = this.$el.find(this.param.blockTrimItem).eq(0).css("marginLeft");
            this.param.spaceRight = this.$el.find(this.param.blockTrimItem).eq(0).css("marginRight")
        }
        this.param.overflow = this.$el.parent().css("overflow");
        this.param.$item = this.$el.find(this.param.blockTrimItem);
        if (this.param.spaceLeft === 0 || this.param.spaceLeft === "0px") this.param.spaceLeft = this.param.baseSpace + "px";
        var self = this,
            arr = [],
            resizeTimer;
        if (this.$el.find("img")[0]) {
            this.$el.find("img").each(function() {
                arr.push(snm.$(this).attr("src"))
            });
            snm.util.preload.init(arr, function() {
                self.rowDivision()
            })
        } else {
            this.rowDivision()
        }
        this.param.isTabletView = snm.util.navigator.tablet || snm.util.navigator.smartphone;
        if (this.param.isTabletView) this.param.windowSize = snm.$(window).width();
        snm.$(window).resize(function() {
            if (self.param.isTabletView) {
                var resizeWidth = snm.$(window).width();
                if (resizeWidth === self.param.windowSize) return false;
                self.param.windowSize = resizeWidth
            }
            if (self.param.itemNum) {
                var heightArr = [],
                    maxHeight;
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function() {
                    self.rowDivision();
                    self.param.$item.filter(":visible").each(function() {
                        heightArr.push(snm.$(this).height())
                    });
                    maxHeight = Math.max.apply(null, heightArr);
                    self.$el.css({
                        overflow: "hidden",
                        height: maxHeight
                    })
                }, 50)
            }
        })
    },
    rowDivision: function() {
        var num = this.param.$item.length,
            i, top, nextTop;
        this.param.$item.css("width", "");
        this.param.$item.show();
        for (i = 0; i < num; i++) {
            top = this.param.$item.eq(i).css({
                marginLeft: this.param.spaceLeft,
                marginRight: this.param.spaceRight
            }).offset().top;
            if (this.param.$item.eq(i + 1)[0]) {
                nextTop = this.param.$item.eq(i + 1).css({
                    marginLeft: this.param.spaceLeft,
                    marginRight: this.param.spaceRight
                }).offset().top
            }
            if (top !== nextTop) {
                break
            }
        }
        this.param.trimNum = i;
        if (this.param.itemMinNum > i + 1) this.param.trimNum = this.param.itemMinNum - 1;
        this.render()
    },
    render: function() {
        for (var i = 0; i < this.param.itemNum; i++) {
            if (i > this.param.trimNum) {
                this.param.$item.eq(i).hide()
            } else {
                this.param.$item.eq(i).show()
            }
        }
        this.spaceAdjust()
    },
    spaceAdjust: function() {
        var wrapX = this.$el.width() - 1,
            itemX = this.param.$item.eq(0).css("width", "").width(),
            itemNum = this.param.$item.filter(":visible").length,
            space = (wrapX - itemX * itemNum) / itemNum / 2,
            width = (wrapX - space * (itemNum * 2)) / itemNum;
        this.param.$item.css("width", width + "px");
        if (space < this.param.spaceLeft.replace("px", "")) {
            space = this.param.spaceLeft.replace("px", "");
            width = (wrapX - space * (itemNum * 2)) / itemNum;
            this.param.$item.css("width", width + "px")
        }
    }
});
snm.module.model.BrandSearch = snm.Backbone.Model.extend({});
snm.module.view.BrandSearch = snm.Backbone.View.extend({
    param: {
        brandSearchTrigger: ".js-brandSearchTrigger",
        brandSearchList: ".js-brandSearchList",
        brandSearchTarget: ".js-brandSearchTarget",
        brandSearchClear: ".js-brandSearchClear",
        brandSearchPanelLink: ".js-brandSearchPanelLink",
        brandSearchPanel: ".js-brandSearchPanel",
        isCurrent: "is-current",
        isDisabled: "is-disabled",
        dataTargetList: "data-target-list"
    },
    events: {
        "click .js-brandSearchTrigger": "modelChange",
        "click .js-brandSearchClear": "clearSearch",
        "click .js-brandSearchPanelLink": "changePanel"
    },
    initialize: function() {
        this.model.on("change:status", this.render, this);
        this.model.on("change:panel", this.renderPanel, this);
        this.param.listHeight = this.$el.find(this.param.brandSearchList).height()
    },
    modelChange: function(e) {
        var $target;
        if (snm.$(e.target).attr(this.param.dataTargetList)) {
            $target = snm.$(e.target)
        } else {
            $target = snm.$(e.target).parents(this.param.brandSearchTrigger)
        }
        if ($target.hasClass(this.param.isDisabled)) return false;
        this.model.set("status", $target.attr(this.param.dataTargetList));
        return false
    },
    clearSearch: function(e) {
        var $parent = snm.$(e.target).parents(this.param.brandSearchPanel);
        $parent.find(this.param.brandSearchTarget).show();
        this.param.$target.css("marginTop", this.param.marginTop);
        $parent.find(this.param.brandSearchClear).hide();
        $parent.find(this.param.brandSearchTrigger).removeClass(this.param.isCurrent).removeClass(this.param.isDisabled);
        $parent.find(this.param.brandSearchList).height(this.param.listHeight);
        this.model.set("status", "", {
            silent: true
        });
        return false
    },
    changePanel: function(e) {
        this.model.set("panel", this.$el.find(this.param.brandSearchPanelLink).index(snm.$(e.target)));
        return false
    },
    render: function() {
        var $trigger = this.$el.find(this.param.brandSearchTrigger + "[" + this.param.dataTargetList + "='" + this.model.get("status") + "']"),
            $parent = $trigger.parents(this.param.brandSearchPanel);
        this.param.$target = this.$el.find(this.param.brandSearchTarget + "[" + this.param.dataTargetList + "='" + this.model.get("status") + "']");
        this.param.marginTop = this.param.$target.css("marginTop");
        $parent.find(this.param.brandSearchClear).show();
        $parent.find(this.param.brandSearchTarget).hide();
        $parent.find(this.param.brandSearchList).height("auto");
        this.param.$target.show().css("marginTop", 0);
        $parent.find(this.param.brandSearchTrigger).removeClass(this.param.isCurrent).addClass(this.param.isDisabled);
        $trigger.removeClass(this.param.isDisabled).addClass(this.param.isCurrent)
    },
    renderPanel: function() {
        var $panel = this.$el.find(this.param.brandSearchPanel),
            $panelLink = this.$el.find(this.param.brandSearchPanelLink),
            index = this.model.get("panel");
        $panel.hide();
        $panel.eq(index).show();
        $panelLink.removeClass(this.param.isDisabled);
        $panelLink.eq(index).addClass(this.param.isDisabled)
    }
});
snm.module.view.CarouselRtoaster = snm.Backbone.View.extend({
    param: {
        carouselRtoasterContainer: ".js-carouselRtoasterContainer",
        carouselRtoasterView: ".js-carouselRtoasterView",
        carouselRtoasterItem: ".js-carouselRtoasterItem",
        carouselRtoasterNav: ".js-carouselRtoasterNav",
        carouselRtoasterNavPrev: ".js-carouselRtoasterNavPrev",
        carouselRtoasterNavNext: ".js-carouselRtoasterNavNext",
        tabPanel: ".js-tabPanel_tab",
        defMarginL: 0,
        defMarginR: 0,
        itemNum: 0,
        viewNum: 0,
        sliderContainerWid: 0,
        sliderItemWid: 0,
        sliderVolume: 0,
        startFlag: false,
        endFlag: true,
        slideFlag: true,
        slideCount: 0,
        confirmNum: 5,
        slideNum: "all",
        touchS: 0,
        touchM: 0,
        swipeSliderNum: 0,
        swipeDiff: 0,
        tabPanelPanel: ".js-tabPanel_panel",
        swipeEasing: "linear",
        swipeSpeed: 200,
        swipeTrigger: 80,
        beforeMarginLeft: 0,
        currentMarginLeft: 0,
        touchStart: false,
        nextPermitFlg: false,
        prevPermitFlg: false
    },
    events: {
        "click .js-carouselRtoasterNavPrev": "slidePrev",
        "click .js-carouselRtoasterNavNext": "slideNext",
        "touchstart .js-carouselRtoasterView": "touchStart",
        "touchmove .js-carouselRtoasterView": "touchMove",
        "touchend .js-carouselRtoasterView": "touchEnd"
    },
    initialize: function(options) {
        this.options = options || {};
        this.param = snm._.defaults(this.options, this.param);
        this.param.defMarginL = this.$el.find(this.param.carouselRtoasterItem).css("marginLeft");
        this.param.defMarginR = this.$el.find(this.param.carouselRtoasterItem).css("marginRight");
        this.itemConfirm();
        this.param.$wrap = this.$el.find(this.param.carouselRtoasterContainer);
        var self = this,
            resizeTimer;
        snm.$(window).resize(function() {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                self.setitngWidth()
            }, 50)
        });
        snm.$(this.param.tabPanel + "[href='#" + this.$el.attr("id") + "']").on("click", function() {
            setTimeout(function() {
                self.setitngWidth()
            }, 1)
        })
    },
    itemConfirm: function() {
        var $item = this.$el.find(this.param.carouselRtoasterItem).eq(0),
            count = 0,
            self = this,
            timer;
        if ($item.children()[0]) {
            this.setitngWidth()
        } else {
            timer = setInterval(function() {
                count++;
                if ($item.children()[0]) {
                    clearInterval(timer);
                    self.setitngWidth();
                    return
                }
                if (self.param.confirmNum === count) {
                    clearInterval(timer);
                    self.$el.hide();
                    self.$el.find(self.param.carouselRtoasterView).hide();
                    self.$el.find(self.param.carouselRtoasterNav).hide()
                }
            }, 1e3)
        }
    },
    setitngWidth: function() {
        var $self = this.$el;
        if (!$self[0]) return false;
        var $item = $self.find(this.param.carouselRtoasterItem),
            $view = $self.find(this.param.carouselRtoasterView),
            $container = $self.find(this.param.carouselRtoasterContainer),
            itemTotalWidth, margin, marginLeft, viewNum, slideCount, defMarginR = parseInt(this.param.defMarginR.replace("px", ""), 10),
            defMarginL = parseInt(this.param.defMarginL.replace("px", ""), 10);
        $view.width("");
        $container.width("");
        this.param.itemNum = $item.filter(function() {
            return snm.$(this).children().length > 0
        }).length;
        this.param.sliderContainerWid = $view.width();
        this.param.sliderItemWid = $item.outerWidth();
        itemTotalWidth = (this.param.sliderItemWid + defMarginL + defMarginR) * this.param.itemNum;
        viewNum = this.param.viewNum;
        slideCount = this.param.slideCount;
        this.param.viewNum = this.param.itemNum;
        for (var i = 1, len = this.param.itemNum + 1; i < len; i++) {
            if (this.param.sliderContainerWid < (this.param.sliderItemWid + defMarginR + defMarginL) * i) {
                this.param.viewNum = i - 1;
                this.param.slideCount = i - 1;
                break
            }
        }
        margin = (this.param.sliderContainerWid - this.param.sliderItemWid * this.param.viewNum) / this.param.viewNum / 2;
        if (snm.util.navigator.is_ie && snm.util.navigator.ie_version == 8) {
            margin = Math.ceil(margin)
        }
        $view.width(this.param.sliderContainerWid + "px");
        if (this.param.sliderContainerWid < itemTotalWidth) {
            $item.css({
                marginRight: margin + "px",
                marginLeft: margin + "px"
            });
            $view.css("overflow", "hidden");
            $container.width($item.outerWidth(true) * (this.param.itemNum + 1)).css("position", "relative")
        } else {
            $container.css("marginLeft", 0);
            $item.css({
                marginRight: this.param.defMarginR,
                marginLeft: this.param.defMarginL
            });
            $self.find(this.param.carouselRtoasterNav).hide();
            return false
        }
        if (viewNum !== this.param.viewNum) {
            $container.css("marginLeft", "");
            $self.find(this.param.carouselRtoasterNav).show();
            $self.find(this.param.carouselRtoasterNavPrev).hide();
            $self.find(this.param.carouselRtoasterNavNext).show();
            this.param.prevPermitFlg = false;
            this.param.nextPermitFlg = true
        } else {
            this.param.slideCount = slideCount;
            marginLeft = $item.outerWidth(true) * (this.param.slideCount - this.param.viewNum);
            $container.css("marginLeft", "-" + marginLeft + "px")
        }
        this.param.sliderVolume = $item.eq(1).outerWidth(true)
    },
    slidePrev: function(e) {
        if (e) {
            e.preventDefault();
            this.param.beforeMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            this.param.currentMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""))
        }
        if (this.param.slideFlag) {
            this.renderSlide("prev")
        } else {
            return false
        }
    },
    slideNext: function(e) {
        if (e) {
            e.preventDefault();
            this.param.beforeMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            this.param.currentMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""))
        }
        if (this.param.slideFlag) {
            this.renderSlide("next")
        } else {
            return false
        }
    },
    renderSlide: function(direction) {
        this.param.slideFlag = false;
        var self = this,
            slide, volume, calc, difference;
        volume = this.param.slideNum === "all" ? this.param.sliderVolume * this.param.viewNum : this.param.sliderVolume * this.param.slideNum;
        if (direction === "next") {
            if (this.param.swipeFlag && (!this.param.nextPermitFlg || -this.param.swipeTrigger < this.param.touchM)) {
                calc = "+=";
                slide = Math.abs(this.param.currentMarginLeft - this.param.beforeMarginLeft)
            } else {
                if (this.param.slideNum === "all") {
                    difference = volume - (this.param.beforeMarginLeft - this.param.currentMarginLeft);
                    this.param.slideCount = this.param.slideCount + this.param.viewNum
                } else {
                    difference = this.param.sliderVolume - (this.param.beforeMarginLeft - this.param.currentMarginLeft);
                    this.param.slideCount = this.param.slideCount + this.param.slideNum
                }
                if (difference > 0) {
                    calc = "-="
                } else {
                    calc = "+="
                }
                slide = Math.abs(difference)
            }
        } else {
            if (this.param.swipeFlag && (!this.param.prevPermitFlg || this.param.swipeTrigger > this.param.touchM)) {
                calc = "-=";
                slide = Math.abs(this.param.currentMarginLeft - this.param.beforeMarginLeft)
            } else {
                if (this.param.slideNum == "all") {
                    difference = volume + (this.param.beforeMarginLeft - this.param.currentMarginLeft);
                    this.param.slideCount = this.param.slideCount - this.param.viewNum
                } else {
                    difference = this.param.sliderVolume + (this.param.beforeMarginLeft - this.param.currentMarginLeft);
                    this.param.slideCount = this.param.slideCount - this.param.slideNum
                }
                if (difference > 0) {
                    calc = "+="
                } else {
                    calc = "-="
                }
                slide = Math.abs(difference)
            }
        }
        this.param.startFlag = true;
        this.param.endFlag = true;
        this.$el.find(this.param.carouselRtoasterNavPrev).show();
        this.$el.find(this.param.carouselRtoasterNavNext).show();
        this.param.nextPermitFlg = true;
        this.param.prevPermitFlg = true;
        if (this.param.slideCount <= this.param.viewNum) {
            this.$el.find(this.param.carouselRtoasterNavPrev).hide();
            this.param.prevPermitFlg = false;
            this.param.slideCount = this.param.viewNum;
            this.param.startFlag = false
        }
        if (this.param.slideCount >= this.param.itemNum) {
            this.$el.find(this.param.carouselRtoasterNavNext).hide();
            this.param.nextPermitFlg = false;
            this.param.slideCount = this.param.slideCount--;
            this.param.endFlag = false
        }
        this.param.$wrap.animate({
            marginLeft: calc + slide + "px"
        }, this.param.swipeSpeed, this.param.swipeEasing, function() {
            self.param.slideFlag = true;
            self.param.swipeFlag = false;
            self.param.touchStart = false;
            self.param.touchM = 0
        })
    },
    touchStart: function(e) {
        if (this.param.slideFlag) {
            this.param.touchStart = true;
            this.param.beforeMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            this.param.touchS = e.originalEvent.touches[0].pageX
        }
    },
    touchMove: function(e) {
        if (this.param.slideFlag && this.param.touchStart) {
            e.preventDefault();
            this.param.touchM = e.originalEvent.touches[0].pageX - this.param.touchS;
            this.param.$wrap.css("marginLeft", Number(this.param.beforeMarginLeft) + this.param.touchM + "px")
        }
    },
    touchEnd: function() {
        if (this.param.slideFlag && this.param.touchStart) {
            this.param.currentMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            for (var i = 0; i < this.param.itemNum; i++) {
                if (Math.abs(this.param.touchM) < this.param.sliderVolume * i) {
                    this.param.swipeSliderNum = i;
                    this.param.swipeDiff = this.param.sliderVolume * i - Math.abs(this.param.touchM);
                    break
                }
            }
            if (0 < this.param.touchM) {
                this.param.swipeFlag = true;
                this.slidePrev()
            } else if (0 > this.param.touchM) {
                this.param.swipeFlag = true;
                this.slideNext()
            }
        }
    }
});
snm.module.view.CarouselSimple = snm.Backbone.View.extend({
    param: {
        carouselSimpleView: ".js-carouselSimpleView",
        carouselSimpleWrap: ".js-carouselSimpleWrap",
        carouselSimpleItem: ".js-carouselSimpleItem",
        carouselSimpleNav: ".js-carouselSimpleNav",
        carouselSimpleNavPrev: ".js-carouselSimpleNavPrev",
        carouselSimpleNavNext: ".js-carouselSimpleNavNext",
        noBorderRight: "js-noBorderRight",
        carouselSimpleDuringTouch: "js-carouselSimpleDuringTouch",
        slideFlag: true,
        sliderVolume: 0,
        sliderCount: 0,
        sliderNum: 0,
        viewNum: 0,
        swipeEasing: "linear",
        swipeSpeed: 200,
        swipeTrigger: 80,
        beforeMarginLeft: 0,
        currentMarginLeft: 0,
        touchStart: false,
        nextPermitFlg: false,
        prevPermitFlg: false,
        activeTab: 0,
        oneWidth: 0
    },
    events: {
        "click .js-carouselSimpleNavPrev": "slidePrev",
        "click .js-carouselSimpleNavNext": "slideNext",
        "click .js-carouselSimpleItem": "preRightBorderDel",
        "touchstart .js-carouselSimpleView": "touchStart",
        "touchmove .js-carouselSimpleView": "touchMove",
        "touchend .js-carouselSimpleView": "touchEnd"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.$item = this.$el.find(this.param.carouselSimpleItem);
        this.param.$wrap = this.$el.find(this.param.carouselSimpleWrap);
        this.param.$navPrev = this.$el.find(this.param.carouselSimpleNavPrev);
        this.param.$navNext = this.$el.find(this.param.carouselSimpleNavNext);
        this.param.itemWid = this.param.$item.outerWidth();
        this.param.sliderNum = this.param.$item.length;
        this.param.borderLeft = this.param.$item.css("border-left-width").replace("px", "");
        this.slideSetting();
        var self = this,
            resizeTimer;
        snm.$(window).on("resize", function() {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                self.slideSetting()
            }, 50)
        })
    },
    slideSetting: function() {
        var viewMargin = Number(this.$el.find(this.param.carouselSimpleView).css("margin-left").replace(/px/, "")) + Number(this.$el.find(this.param.carouselSimpleView).css("margin-right").replace(/px/, ""));
        var viewWid = this.$el.width() - viewMargin;
        var wrapWid, viewNum, sliderCount, marginLeft;
        viewNum = this.param.viewNum;
        this.param.viewNum = Math.floor(viewWid / this.param.itemWid);
        if (this.param.viewNum === 0) this.param.viewNum = 1;
        sliderCount = this.param.sliderCount;
        this.param.sliderCount = this.param.viewNum;
        this.param.oneWidth = Math.floor(viewWid / this.param.viewNum);
        this.param.$item.outerWidth(this.param.oneWidth);
        if (this.param.viewNum >= this.param.sliderNum) {
            this.$el.find(this.param.carouselSimpleNav).hide();
            wrapWid = "100%"
        } else {
            this.$el.find(this.param.carouselSimpleNav).show();
            wrapWid = this.param.oneWidth * this.param.sliderNum
        }
        this.param.$wrap.width(wrapWid);
        this.$el.find(this.param.carouselSimpleView).width(this.param.oneWidth * this.param.viewNum);
        if (viewNum !== this.param.viewNum) {
            this.param.$wrap.css("marginLeft", "");
            this.param.$navPrev.hide();
            this.param.$navNext.show();
            this.param.prevPermitFlg = false;
            this.param.nextPermitFlg = true;
            this.decisionBorderRight()
        } else {
            this.param.sliderCount = sliderCount;
            marginLeft = this.param.oneWidth * (this.param.sliderCount - this.param.viewNum);
            this.param.$wrap.css("marginLeft", "-" + marginLeft + "px")
        }
        this.param.sliderVolume = this.param.oneWidth * this.param.viewNum
    },
    resetNoBorderRightClass: function() {
        this.$el.find(this.param.carouselSimpleItem).removeClass(this.param.noBorderRight)
    },
    preRightBorderDel: function(e, trigger) {
        this.resetNoBorderRightClass();
        if (trigger == "noClickEvent") {
            this.$el.find(e).prev().addClass(this.param.noBorderRight)
        } else {
            this.$el.find(e.currentTarget).prev().addClass(this.param.noBorderRight)
        }
    },
    decisionBorderRight: function() {
        var self = this;
        this.$el.find(this.param.carouselSimpleItem).each(function(i) {
            if (self.$el.find(self.param.carouselSimpleItem).eq(i).hasClass("is-active")) {
                self.param.activeTab = i + 1;
                return
            }
        });
        var activePage = Math.ceil(this.param.activeTab / this.param.viewNum);
        var withInFirst = activePage * this.param.viewNum - (this.param.viewNum - 1);
        if (this.param.activeTab == withInFirst) {
            this.resetNoBorderRightClass()
        } else {
            this.preRightBorderDel(this.$el.find(".is-active", this.param.carouselSimpleItem), "noClickEvent")
        }
    },
    slidePrev: function(e) {
        if (e) {
            e.preventDefault();
            this.param.beforeMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            this.param.currentMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""))
        }
        if (this.param.slideFlag) {
            this.renderSlide("prev");
            this.decisionBorderRight()
        } else {
            return false
        }
    },
    slideNext: function(e) {
        if (e) {
            e.preventDefault();
            this.param.beforeMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            this.param.currentMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""))
        }
        if (this.param.slideFlag) {
            this.renderSlide("next")
        } else {
            return false
        }
    },
    renderSlide: function(direction) {
        this.param.slideFlag = false;
        var difference, slide, calc;
        if (direction === "next") {
            if (this.param.swipeFlag && (!this.param.nextPermitFlg || -this.param.swipeTrigger < this.param.touchM)) {
                calc = "+=";
                slide = Math.abs(this.param.currentMarginLeft - this.param.beforeMarginLeft)
            } else {
                difference = this.param.sliderVolume - (this.param.beforeMarginLeft - this.param.currentMarginLeft);
                if (difference > 0) {
                    calc = "-="
                } else {
                    calc = "+="
                }
                slide = Math.abs(difference);
                this.param.sliderCount = this.param.sliderCount + this.param.viewNum
            }
        } else {
            if (this.param.swipeFlag && (!this.param.prevPermitFlg || this.param.swipeTrigger > this.param.touchM)) {
                calc = "-=";
                slide = Math.abs(this.param.currentMarginLeft - this.param.beforeMarginLeft)
            } else {
                difference = this.param.sliderVolume + (this.param.beforeMarginLeft - this.param.currentMarginLeft);
                if (difference > 0) {
                    calc = "+="
                } else {
                    calc = "-="
                }
                slide = Math.abs(difference);
                this.param.sliderCount = this.param.sliderCount - this.param.viewNum
            }
        }
        var self = this;
        this.param.$wrap.animate({
            marginLeft: calc + slide + "px"
        }, this.param.swipeSpeed, this.param.swipeEasing, function() {
            self.removeDuringTouch();
            self.param.slideFlag = true;
            self.param.swipeFlag = false;
            self.param.touchStart = false;
            self.param.touchM = 0
        });
        this.param.$navNext.show();
        this.param.$navPrev.show();
        this.param.nextPermitFlg = true;
        this.param.prevPermitFlg = true;
        if (this.param.sliderNum <= this.param.sliderCount) {
            this.param.$navNext.hide();
            this.param.nextPermitFlg = false
        }
        if (this.param.viewNum >= this.param.sliderCount) {
            this.param.$navPrev.hide();
            this.param.prevPermitFlg = false
        }
    },
    touchStart: function(e) {
        if (this.param.slideFlag) {
            this.param.touchStart = true;
            this.param.beforeMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            this.param.touchS = e.originalEvent.touches[0].pageX
        }
    },
    touchMove: function(e) {
        if (this.param.slideFlag && this.param.touchStart) {
            e.preventDefault();
            if (!this.$el.find(this.param.carouselSimpleView).hasClass(this.param.carouselSimpleDuringTouch)) {
                this.$el.find(this.param.carouselSimpleView).addClass(this.param.carouselSimpleDuringTouch)
            }
            this.param.touchM = e.originalEvent.touches[0].pageX - this.param.touchS;
            this.param.$wrap.css("marginLeft", Number(this.param.beforeMarginLeft) + this.param.touchM + "px")
        }
    },
    touchEnd: function() {
        if (this.param.slideFlag && this.param.touchStart) {
            this.param.currentMarginLeft = Number(this.param.$wrap.css("marginLeft").replace(/px/, ""));
            for (var i = 0; i < this.param.sliderNum; i++) {
                if (Math.abs(this.param.touchM) < this.param.sliderVolume * i) {
                    this.param.swipeSliderNum = i;
                    this.param.swipeDiff = this.param.sliderVolume * i - Math.abs(this.param.touchM);
                    break
                }
            }
            if (0 < this.param.touchM) {
                this.param.swipeFlag = true;
                this.slidePrev()
            } else if (0 > this.param.touchM) {
                this.param.swipeFlag = true;
                this.slideNext()
            } else {
                this.removeDuringTouch()
            }
        }
    },
    removeDuringTouch: function() {
        this.$el.find(this.param.carouselSimpleView).removeClass(this.param.carouselSimpleDuringTouch)
    }
});
snm.module.view.CategorySelect = snm.Backbone.View.extend({
    param: {
        categorySelectSelect: ".js-categorySelectSelect",
        categorySelectSelectSize: ".js-categorySelectSelectSize",
        categorySelectTextArea: ".js-categorySelectTextArea",
        categorySelectText: ".js-categorySelectText"
    },
    events: {
        "change .js-categorySelectSelect": "render",
        "click .js-categorySelectClear": "renderClear"
    },
    initialize: function() {
        if (this.$el.find(this.param.categorySelectSelect).length > 0 && this.$el.find(this.param.categorySelectTextArea).length > 0) {
            if (this.$el.find(this.param.categorySelectSelectSize).length > 0) {
                this.$el.find(this.param.categorySelectSelect).css({
                    width: this.$el.find(this.param.categorySelectSelectSize).css("width"),
                    height: this.$el.find(this.param.categorySelectSelectSize).css("height")
                })
            }
            this.render()
        }
    },
    render: function() {
        if (this.$el.find(this.param.categorySelectSelect + " option:selected").get(0) && this.$el.find(this.param.categorySelectSelect + " option:selected").val() != "") {
            this.$el.find(this.param.categorySelectText).text(this.$el.find(this.param.categorySelectSelect + " option:selected").text());
            this.$el.find(this.param.categorySelectTextArea).show()
        } else {
            this.$el.find(this.param.categorySelectText).text("");
            this.$el.find(this.param.categorySelectTextArea).hide()
        }
    },
    renderClear: function() {
        this.$el.find(this.param.categorySelectSelect).val("");
        this.$el.find(this.param.categorySelectText).text("");
        this.$el.find(this.param.categorySelectTextArea).hide()
    }
});
snm.module.view.ClearForm = snm.Backbone.View.extend({
    param: {
        clearFormSelect: ".js-clearFormSelect",
        clearFormRadio: ".js-clearFormRadio",
        clearFormRadioDefault: ".js-clearFormRadioDefault"
    },
    events: {
        "click .js-clearFormTrigger": "render"
    },
    render: function() {
        this.clearSelect();
        this.clearRadio();
        return false
    },
    clearSelect: function() {
        this.$el.find(this.param.clearFormSelect).each(function() {
            snm.$(this).find("option").eq(0).prop("selected", true).change()
        })
    },
    clearRadio: function() {
        var self = this;
        this.$el.find(this.param.clearFormRadio + ":checked").each(function() {
            if (self.$el.find(self.param.clearFormRadio + self.param.clearFormRadioDefault + "[name = '" + snm.$(this).attr("name") + "']")[0]) {
                if (!snm.$(this).hasClass(self.param.clearFormRadioDefault.replace(".", ""))) {
                    self.$el.find(self.param.clearFormRadio + self.param.clearFormRadioDefault + "[name = '" + snm.$(this).attr("name") + "']").prop("checked", true).change()
                }
            } else {
                snm.$(this).prop("checked", false).change()
            }
        })
    }
});
snm.module.view.CloseWindow = snm.Backbone.View.extend({
    events: {
        click: "render"
    },
    render: function() {
        window.close();
        return false
    }
});
snm.module.view.ContactAttention = snm.Backbone.View.extend({
    param: {
        contactAttentionWrap: ".js-contactAttentionWrap",
        contactAttentionProblem: "#contactAttentionProblem",
        contactAttentionQuestion: ".js-contactAttentionQuestion",
        contactAttentionBtn: ".js-contactAttentionBtn",
        counselingForm: ".js-counselingForm",
        contactAttentionModal: "#js-contactAttentionModal"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.$contactAttentionModal = snm.$(this.param.contactAttentionModal);
        this.param.defContactAttention = this.$contactAttentionModal.find(this.param.contactAttentionWrap).html();
        this.param.problemTmp = snm._.template(snm.$(this.param.contactAttentionProblem).html());
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: this.$contactAttentionModal,
                clickDel: true
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: this.$contactAttentionModal,
                clickDel: true
            })
        }
        var self = this;
        this.$contactAttentionModal.on("click", this.param.contactAttentionBtn, function() {
            self.ansCheck()
        });
        snm.$(".js-counselingForm").on("submit", function(e) {
            e.preventDefault();
            self.modalRun()
        })
    },
    modalRun: function() {
        if (this.param.reset) {
            this.$contactAttentionModal.find(this.param.contactAttentionWrap).html(this.param.defContactAttention)
        }
        this.param.modal.render();
        return false
    },
    ansCheck: function() {
        if (this.$contactAttentionModal.find(this.param.contactAttentionQuestion).prop("checked")) {
            this.sendSubmit()
        } else {
            this.renderWarned()
        }
        return false
    },
    sendSubmit: function() {
        snm.$(this.param.counselingForm)[0].submit()
    },
    renderWarned: function() {
        this.param.reset = true;
        this.$contactAttentionModal.find(this.param.contactAttentionWrap).html(this.param.problemTmp)
    }
});
snm.module.CookieCheck = snm.Backbone.View.extend({
    param: {
        noCookie: "no-cookie"
    },
    initialize: function() {
        var ua = snm.util.navigator;
        if (ua.is_ie) {
            var param = {
                path: "/",
                domain: snm.cookie.domain01,
                "max-age": 60 * 60 * 24 * 30
            };
            snm.module.cookie.set("omni.osd.common.cookie_check", "check", param);
            if (snm.module.cookie.get("omni.osd.common.cookie_check") !== "check") {
                this.render()
            } else {
                snm.module.cookie.set("omni.osd.common.cookie_check", "", param)
            }
        } else {
            if (!navigator.cookieEnabled) {
                this.render()
            }
        }
    },
    render: function() {
        if (!this.$el.hasClass(this.param.noCookie)) {
            this.$el.addClass(this.param.noCookie)
        }
    }
});
snm.module.cookie = {
    set: function(key, value, param_) {
        var cookie = key + "=" + encodeURIComponent(value);
        for (var param_key in param_) {
            cookie += "; " + param_key + "=" + param_[param_key]
        }
        document.cookie = cookie
    },
    get: function(key) {
        var cookie, cookies = document.cookie.split("; ");
        for (var i = 0, length = cookies.length; i < length; i++) {
            cookie = cookies[i].split("=");
            if (cookie[0] === key) {
                return decodeURIComponent(cookie[1])
            }
        }
        return undefined
    },
    del: function(key, param_) {
        var t = new Date;
        t.setDate(t.getDate() - 1);
        this.set(key, "", snm.$.extend({}, param_, {
            expires: t.toUTCString()
        }))
    }
};
snm.module.view.Counseling = snm.Backbone.View.extend({
    param: {
        counselingWrap: ".js-counselingWrap",
        counselingProblem: "#counselingProblem",
        counselingNoProblem: "#counselingNoProblem",
        counselingRouse: "#counselingRouse",
        counselingQuestion: ".js-counselingQuestion",
        counselingBtn: ".js-counselingBtn",
        counselingForm: ".js-counselingForm",
        counselingCartFor: ".js-counselingCartFor",
        counselingModal: "#js-counselingModal",
        counselingState: "#COUNSELING_FLG",
        counselingAlert: ".js-counselingAlert"
    },
    events: {
        "submit .js-counselingForm": "modalRun"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.$counseling = snm.$(this.param.counselingModal);
        this.param.defCounseling = this.$counseling.find(this.param.counselingWrap).html();
        this.param.rouseTmp = snm._.template(this.$counseling.find(this.param.counselingRouse).html());
        this.param.problemTmp = snm._.template(this.$counseling.find(this.param.counselingProblem).html());
        this.param.noProblemTmp = snm._.template(this.$counseling.find(this.param.counselingNoProblem).html());
        this.param.$state = snm.$(this.param.counselingState);
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: snm.$(this.param.counselingModal),
                clickDel: true
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: snm.$(this.param.counselingModal),
                clickDel: true
            })
        }
        var self = this;
        snm.$(this.$counseling).on("click", this.param.counselingBtn, function() {
            self.ansCheck()
        }).on("click", this.param.counselingCartFor, function() {
            self.sendSubmit()
        })
    },
    modalRun: function() {
        if (this.param.reset) {
            this.param.$state.val("")
        }
        if (this.param.$state.val() !== "") {
            this.renderCounseling()
        } else {
            if (this.param.reset) {
                this.$counseling.find(this.param.counselingWrap).html(this.param.defCounseling);
                snm.$(this.param.counselingModal + " .js-activityChange").each(function() {
                    new snm.module.view.ActivityChange({
                        el: snm.$(this)
                    })
                })
            }
            this.$counseling.find(this.param.counselingAlert).hide();
            this.param.modal.render()
        }
        return false
    },
    ansCheck: function() {
        var quesNum = this.$counseling.find(this.param.counselingQuestion).length,
            check = [],
            q = [],
            resultCount = 0,
            radioName, i, msg = "";
        for (i = 0; i < quesNum; i++) {
            radioName = this.$counseling.find(this.param.counselingQuestion).eq(i).attr("name");
            check.push(this.$counseling.find("[name='" + radioName + "']").is(":checked"));
            q.push(this.$counseling.find("[name='" + radioName + "']:checked").not(":disabled").val())
        }
        if (!check[0]) {
            msg = "カウンセリング1を回答して下さい。"
        } else if (q[0] == "yes" && !check[1]) {
            msg = "カウンセリング2を回答して下さい。"
        }
        if (!check[2]) {
            if (msg !== "") {
                msg += "<br>"
            }
            msg += "カウンセリング3を回答して下さい。"
        }
        if (msg !== "") {
            this.$counseling.find(this.param.counselingAlert).html(msg).show();
            return false
        }
        if (q[0] == "yes") resultCount += 4;
        if (q[1] == "yes") resultCount += 2;
        if (q[2] == "yes") resultCount += 1;
        this.param.$state.val(resultCount);
        if (q[0] == "yes" && q[1] == "no") {
            this.renderWarned()
        } else {
            if (q[2] == "yes" || q[0] == "yes") {
                this.renderRouse()
            } else {
                this.renderRejected()
            }
        }
        return false
    },
    sendSubmit: function() {
        this.$el.find(this.param.counselingForm)[0].submit()
    },
    renderRejected: function() {
        this.param.reset = false;
        this.$counseling.find(this.param.counselingWrap).html(this.param.noProblemTmp)
    },
    renderWarned: function() {
        this.param.reset = true;
        this.$counseling.find(this.param.counselingWrap).html(this.param.problemTmp)
    },
    renderRouse: function() {
        this.param.reset = false;
        this.$counseling.find(this.param.counselingWrap).html(this.param.rouseTmp)
    },
    renderCounseling: function() {
        var status = this.param.$state.val();
        if (status === "0" || status === "2") {
            this.sendSubmit()
        } else {
            if (status === "1" || status === "3" || status === "6" || status === "7") {
                this.renderRouse()
            } else {
                this.renderWarned()
            }
            this.$counseling.find(this.param.counselingAlert).hide();
            this.param.modal.render();
            return false
        }
    }
});
snm.module.model.DeliveryDate = snm.Backbone.Model.extend({});
snm.module.view.DeliveryDate = snm.Backbone.View.extend({
    param: {
        deliveryDate: ".js-deliveryDate",
        deliveryDateCalendar: ".js-deliveryDateCalendar",
        deliveryDateCalendarTable: ".js-deliveryDateCalendarTable",
        deliveryDateCalendarYear: ".js-deliveryDateCalendarYear",
        deliveryDateCalendarMonth: ".js-deliveryDateCalendarMonth",
        deliveryDateCalendarDay: ".js-deliveryDateCalendarDay",
        deliveryDateDating: ".js-deliveryDateDating",
        isSelected: "is-selected",
        isActive: "is-checked",
        selectCalendar: ".js-selectCalendar"
    },
    events: {
        "click .js-deliveryDateCalendarOpen": "renderCalendarToggle",
        "click .js-deliveryDateCalendarClose": "renderCalendarClose",
        "click .js-deliveryDateCalendarDay": "renderCalendarDateChange",
        "click .js-deliveryDateCalendarNext": "renderCalendarNext",
        "click .js-deliveryDateCalendarPrev": "renderCalendarPrev",
        "change .js-deliveryDateNo input": "renderCalendarClose",
        "change .js-deliveryDateDating": "renderSelectDateChange"
    },
    initialize: function() {
        this.model.on("change", this.renderSelect, this);
        this.param = snm._.defaults({}, this.param);
        this.param.$calendar = this.$el.find(this.param.deliveryDateCalendar);
        this.param.$calendarTable = this.$el.find(this.param.deliveryDateCalendarTable);
        this.param.$dateSelect = this.$el.find(this.param.deliveryDateDating);
        if (this.param.$calendarTable.find("." + this.param.isActive).length) {
            this.param.$calendarTable.hide();
            this.param.$calendarTable.find("." + this.param.isActive).eq(0).closest(this.param.deliveryDateCalendarTable).show()
        } else {
            this.$el.find(this.param.deliveryDateCalendarTable + ":gt(0)").hide()
        }
        var self = this;
        snm.$(document).off("click.delivery_date").on("click.delivery_date", function(e) {
            if (snm.$(e.target).closest(self.param.deliveryDateCalendar)[0]) return;
            snm.$(self.param.deliveryDateCalendar).hide().css({
                top: "",
                left: ""
            })
        })
    },
    renderCalendarToggle: function(e) {
        var documentHei = snm.$(window).height() + snm.$(document).scrollTop(),
            $calendar = snm.$(e.target).parents(this.param.deliveryDate).find(this.param.deliveryDateCalendar),
            position = {},
            carendarHei;
        if (snm.$(e.target).parents(".is-disabled").length == 0) {
            this.param.$calendar.toggle();
            carendarHei = $calendar.offset().top + $calendar.outerHeight() - 5;
            if (documentHei < carendarHei) {
                position = {
                    top: documentHei - carendarHei + "px",
                    left: "+=" + snm.$(e.target).parents(this.param.deliveryDateCalendarOpen).outerWidth() + "px"
                }
            } else {
                position = {
                    top: "",
                    left: ""
                }
            }
            $calendar.css(position)
        }
        if (snm.$(this.param.deliveryDateCalendar + ":visible").length > 1) {
            snm.$(this.param.deliveryDateCalendar).not($calendar).hide().css({
                top: "",
                left: ""
            })
        }
        return false
    },
    renderCalendarClose: function() {
        this.param.$calendar.hide().css({
            top: "",
            left: ""
        });
        return false
    },
    renderCalendarDateChange: function(e) {
        this.param.$table = snm.$(e.target).parents(this.param.deliveryDateCalendarTable);
        var year = this.param.$table.find(this.param.deliveryDateCalendarYear).text(),
            month = this.param.$table.find(this.param.deliveryDateCalendarMonth).text(),
            day = snm.$(e.target).text();
        this.param.date = year + "-" + ("0" + month).slice(-2) + "-" + ("0" + day).slice(-2);
        this.renderCalendarClose();
        var $parent = snm.$(e.target).parent();
        if ($parent.hasClass(this.param.isActive)) {
            if ($parent.closest(this.param.selectCalendar).length) {
                return false
            }
            $parent.removeClass(this.param.isActive);
            this.param.$dateSelect.prop("selectedIndex", 0);
            this.model.unset("date", {
                silent: true
            });
            return false
        }
        this.model.set("date", day, {
            silent: true
        });
        this.renderSelect();
        this.activeChange();
        this.param.$calendar.css({
            top: "",
            left: ""
        });
        return false
    },
    renderSelectDateChange: function() {
        var date = this.param.$dateSelect.val(),
            selectIndex = this.param.$dateSelect.prop("selectedIndex"),
            dateCut = date.split("-"),
            year = dateCut[0],
            month = Number(dateCut[1]),
            day = Number(dateCut[2]),
            $dateTable = this.param.$calendarTable,
            num = $dateTable.length,
            i;
        if (selectIndex === 0 && !date) {
            this.$el.find(this.param.deliveryDateCalendarDay).parent().removeClass(this.param.isActive);
            return false
        }
        for (i = 0; i < num; i++) {
            if ($dateTable.eq(i).find(this.param.deliveryDateCalendarYear + ":contains('" + year + "')")[0] && $dateTable.eq(i).find(this.param.deliveryDateCalendarMonth + ":contains('" + month + "')")[0]) {
                this.param.$table = $dateTable.eq(i);
                break
            }
        }
        $dateTable.hide();
        this.param.$table.show();
        this.model.set("date", day, {
            silent: true
        });
        this.activeChange()
    },
    renderSelect: function() {
        this.param.$dateSelect.val(this.param.date);
        if (this.param.$dateSelect.closest(this.param.selectCalendar).length) {
            this.param.$dateSelect.change()
        }
    },
    renderCalendarNext: function() {
        var current = this.param.$calendarTable.filter(function() {
            return snm.$(this).css("display") != "none"
        });
        if (current.next().length > 0) {
            current.hide().next().show()
        }
        return false
    },
    renderCalendarPrev: function() {
        var current = this.param.$calendarTable.filter(function() {
            return snm.$(this).css("display") != "none"
        });
        if (current.prev().length > 0) {
            current.hide().prev().show()
        }
        return false
    },
    activeChange: function() {
        var self = this;
        this.$el.find(this.param.deliveryDateCalendarDay).parent().removeClass(this.param.isActive);
        this.param.$table.find(this.param.deliveryDateCalendarDay).filter(function() {
            if (snm.$(this).text() == self.model.get("date")) {
                snm.$(this).parent().addClass(self.param.isActive);
                return
            }
        })
    }
});
snm.module.model.DeliverySetting = snm.Backbone.Model.extend({});
snm.module.view.DeliverySetting = snm.Backbone.View.extend({
    param: {
        deliverySettingRadio: ".js-deliverySettingRadio",
        deliverySettingPerson: ".js-deliverySettingPerson",
        deliverySettingCompany: ".js-deliverySettingCompany",
        deliverySettingBoth: ".js-deliverySettingBoth",
        deliverySettingPersonBody: ".js-deliverySettingPersonBody",
        deliverySettingCompanyBody: ".js-deliverySettingCompanyBody",
        deliverySettingBothBody: ".js-deliverySettingBothBody",
        deliverySettingSelect: ".js-deliverySettingSelect",
        deliverySettingHidden: ".js-deliverySettingHidden",
        deliverySettingAddressRadio: ".js-deliverySettingAddressRadio",
        deliverySettingAddressChange: ".js-deliverySettingAddressChange",
        deliverySettingAddressBody: ".js-deliverySettingAddressBody",
        accordionSpeed: 300,
        moveFlag: true,
        previouslyClass: ""
    },
    events: {
        "change .js-deliverySettingRadio": "accordionSetting",
        "change .js-deliverySettingAddressRadio": "accordionSettingAddress",
        "change .js-deliverySettingSelect": "settingHidden"
    },
    initialize: function() {
        this.heightReset();
        if (!this.$el.find(this.param.deliverySettingBoth).is(":checked")) {
            if (!this.$el.find(this.param.deliverySettingPerson).is(":checked")) {
                this.accordionAction("", this.param.deliverySettingPersonBody)
            }
            if (!this.$el.find(this.param.deliverySettingCompany).is(":checked")) {
                this.accordionAction("", this.param.deliverySettingCompanyBody)
            }
            this.accordionAction("", this.param.deliverySettingBothBody)
        }
        this.settingHidden();
        this.settingDisabled();
        if (!this.$el.find(this.param.deliverySettingAddressChange).is(":checked")) {
            this.accordionAction("", this.param.deliverySettingAddressBody)
        }
    },
    accordionSetting: function() {
        if (!this.$el.find(this.param.deliverySettingBoth).is(":checked")) {
            if (this.$el.find(this.param.deliverySettingPerson).is(":checked")) {
                if (this.isAbleToMove(this.param.deliverySettingPerson)) this.accordionAction(this.param.deliverySettingPersonBody, this.param.deliverySettingCompanyBody + "," + this.param.deliverySettingBothBody)
            } else if (this.$el.find(this.param.deliverySettingCompany).is(":checked")) {
                if (this.isAbleToMove(this.param.deliverySettingCompany)) this.accordionAction(this.param.deliverySettingCompanyBody, this.param.deliverySettingPersonBody + "," + this.param.deliverySettingBothBody)
            } else {
                this.accordionAction("", this.param.deliverySettingPersonBody + "," + this.param.deliverySettingCompanyBody + "," + this.param.deliverySettingBothBody)
            }
        } else {
            if (this.isAbleToMove(this.param.deliverySettingBoth)) this.accordionAction(this.param.deliverySettingPersonBody + "," + this.param.deliverySettingCompanyBody + "," + this.param.deliverySettingBothBody)
        }
        this.settingDisabled()
    },
    accordionSettingAddress: function() {
        var self = this,
            targetSelector;
        if (this.isAbleToMove(this.param.deliverySettingAddressBody)) {
            if (!this.$el.find(this.param.deliverySettingAddressChange).is(":checked")) {
                targetSelector = this.$el.find(this.param.deliverySettingAddressBody + ":visible");
                targetSelector.slideUp(this.param.accordionSpeed, function() {
                    self.$el.find(targetSelector).closest("tr").css({
                        display: "none"
                    })
                })
            } else {
                targetSelector = this.$el.find(this.param.deliverySettingAddressBody + ":hidden");
                self.$el.find(targetSelector).closest("tr").show();
                self.$el.find(targetSelector).slideDown(self.param.accordionSpeed)
            }
        }
    },
    accordionAction: function(showSelector, hideSelector) {
        var self = this;
        if (showSelector) {
            if (hideSelector) {
                hideSelector = hideSelector.replace(/,/g, ":visible,") + ":visible";
                this.$el.find(hideSelector).slideUp(this.param.accordionSpeed, function() {
                    self.$el.find(hideSelector).closest("tr").css({
                        display: "none"
                    })
                })
            }
            showSelector = showSelector.replace(/,/g, ":hidden,") + ":hidden";
            self.$el.find(showSelector).closest("tr").show();
            self.$el.find(showSelector).slideDown(self.param.accordionSpeed)
        } else if (hideSelector) {
            hideSelector = hideSelector.replace(/,/g, ":visible,") + ":visible";
            this.$el.find(hideSelector).css({
                display: "none"
            }).closest("tr").css({
                display: "none"
            })
        }
    },
    heightReset: function() {
        this.heightSetting(this.param.deliverySettingPersonBody);
        this.heightSetting(this.param.deliverySettingCompanyBody);
        this.heightSetting(this.param.deliverySettingBothBody)
    },
    heightSetting: function(selecter, unsetFlag) {
        if (!unsetFlag) {
            var $elm = this.$el.find(selecter);
            if ($elm.parents("td").height() === $elm.parents("th").height()) {
                $elm.each(function() {
                    snm.$(this).css("height", snm.$(this).parent().height() - 20)
                })
            } else {
                $elm.each(function() {
                    var parentHeight = snm.$(this).parent().height();
                    if (parentHeight !== $elm.parents("th").height()) {
                        snm.$(this).css("height", parentHeight)
                    } else {
                        snm.$(this).css("height", snm.$(this).height())
                    }
                })
            }
        } else {
            this.$el.find(selecter).css("height", "")
        }
    },
    isAbleToMove: function(className) {
        var self = this;
        if (this.param.moveFlag) {
            this.param.previouslyClass = className;
            setTimeout(function() {
                self.param.moveFlag = true
            }, this.param.accordionSpeed * 1.1);
            this.param.moveFlag = false;
            return true
        } else {
            this.$el.find(this.param.previouslyClass).prop("checked", true);
            return false
        }
    },
    settingHidden: function() {
        this.$el.find(this.param.deliverySettingHidden).val(this.$el.find(this.param.deliverySettingSelect).val())
    },
    settingDisabled: function() {
        var disabledFlg = false;
        if (this.$el.find(this.param.deliverySettingBoth).is(":checked")) {
            disabledFlg = true
        }
        this.$el.find(this.param.deliverySettingSelect).prop("disabled", disabledFlg)
    }
});
snm.module.model.DisplayChange = snm.Backbone.Model.extend({});
snm.module.view.DisplayChange = snm.Backbone.View.extend({
    param: {
        displayChangeRadio: ".js-displayChangeRadio",
        displayChangeTarget: ".js-displayChangeTarget",
        dataDefState: "data-display-change-default",
        dataState: "data-display-change-state",
        defState: "off",
        isHide: "is-hide"
    },
    events: {
        "change .js-displayChangeRadio": "setState"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.set("state", "");
        this.model.on("change", this.render, this);
        if (this.$el.attr(this.param.dataDefState) && this.$el.attr(this.param.dataDefState) === "on") {
            this.param.defState = this.$el.attr(this.param.dataDefState)
        }
        this.setState()
    },
    setState: function() {
        var trigerRadio = this.$el.find(this.param.displayChangeRadio + ":checked");
        if (trigerRadio.length && trigerRadio.attr(this.param.dataState)) {
            this.model.set("state", trigerRadio.attr(this.param.dataState))
        } else {
            this.model.set("state", this.param.defState)
        }
    },
    render: function() {
        var self = this;
        if (this.model.get("state") === "on") {
            this.$el.find(this.param.displayChangeTarget).each(function() {
                if (snm.$(this).hasClass(self.param.isHide)) {
                    snm.$(this).removeClass(self.param.isHide)
                }
            })
        } else if (this.model.get("state") === "off") {
            this.$el.find(this.param.displayChangeTarget).each(function() {
                if (!snm.$(this).hasClass(self.param.isHide)) {
                    snm.$(this).addClass(self.param.isHide)
                }
            })
        }
    }
});
snm.module.model.Dropdown = snm.Backbone.Model.extend({});
snm.module.view.Dropdown = snm.Backbone.View.extend({
    param: {
        dropdownBtn: ".js-dropdownBtn",
        dropdownFilter: ".js-dropdownFilter",
        dropdownContents: ".js-dropdownContents",
        dropdownMultiBtn: ".js-dropdownMultiBtn",
        dropdownMultiContents: ".js-dropdownMultiContents",
        dropdownSpeed: 300,
        multi: false
    },
    events: {
        mouseenter: "modelChange",
        mouseleave: "renderClose",
        "click .js-dropdownBtn": "noLink",
        "click .js-dropdownContents": "renderClose"
    },
    initialize: function(options) {
        options = options || {};
        this.param = snm._.defaults(options, this.param);
        this.model.on("change", this.render, this);
        if (this.param.multi) {
            this.events = {
                mouseenter: "modelChange",
                mouseleave: "renderClose",
                "mouseenter .js-dropdownMultiBtn": "renderMultiOpen",
                "mouseleave .js-dropdownMultiBtn": "renderMultiClose",
                "click .js-dropdownBtn": "noLink",
                "click .js-dropdownContents": "renderClose"
            }
        }
        var isTablet = snm.util.navigator.tablet || snm.util.navigator.smartphone;
        if (isTablet) {
            this.$el.find(this.param.dropdownFilter).css({
                position: "absolute",
                top: 0,
                left: 0,
                display: "none",
                width: "100%",
                height: "100%"
            });
            this.events = {
                "click .js-dropdownBtn": "modelChange",
                "click .js-dropdownFilter": "renderClose",
                "click .js-dropdownContents": "renderClose"
            }
        }
        this.delegateEvents(this.events)
    },
    render: function() {
        if (this.model.get("status") == "none") {
            this.$el.find(this.param.dropdownContents).stop().fadeIn(this.param.dropdownSpeed);
            this.$el.find(this.param.dropdownFilter).show()
        } else {
            this.$el.find(this.param.dropdownContents).stop().fadeOut(this.param.dropdownSpeed);
            this.$el.find(this.param.dropdownFilter).hide()
        }
    },
    renderClose: function() {
        this.model.set("status", "block", {
            silent: true
        });
        this.$el.find(this.param.dropdownContents).hide();
        this.$el.find(this.param.dropdownFilter).hide()
    },
    renderMultiOpen: function(e) {
        snm.$(e.target).parents(this.param.dropdownMultiBtn).find(this.param.dropdownMultiContents).stop().fadeIn(this.param.dropdownSpeed)
    },
    renderMultiClose: function(e) {
        snm.$(e.target).parents(this.param.dropdownMultiBtn).find(this.param.dropdownMultiContents).stop().fadeOut(this.param.dropdownSpeed)
    },
    noLink: function() {
        return false
    },
    modelChange: function(e) {
        this.model.set("status", this.$el.find(this.param.dropdownContents).css("display"));
        return false
    }
});
snm.module.model.FlexibleAccordion = snm.Backbone.Model.extend({});
snm.module.view.FlexibleAccordion = snm.Backbone.View.extend({
    param: {
        flexibleAccordion: ".js-flexibleAccordion",
        flexibleAccordionBody: ".js-flexibleAccordionBody",
        flexibleAccordionCloseBtn: ".js-flexibleAccordionCloseBtn",
        flexibleAccordionActiveClass: "",
        flexibleAccordionWrap: ".js-flexibleAccordionWrap",
        dataFlexibleAccordionHeaderNum: "data-flexible-accordion-header-num",
        dataFlexibleAccordionBodyNum: "data-flexible-accordion-body-num",
        dataFlexibleAccordionActiveClass: "data-flexible-accordion-active-class",
        speed: 300,
        slideFlag: true
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        if (this.$el.attr(this.param.dataFlexibleAccordionActiveClass)) {
            this.param.flexibleAccordionActiveClass = this.$el.attr(this.param.dataFlexibleAccordionActiveClass)
        }
        if (this.$el.closest(this.param.flexibleAccordionWrap)[0]) {
            this.param.linkFlag = true
        } else {
            this.param.linkFlag = false
        }
        this.model.set({
            state: "close",
            initialize: true
        });
        this.model.on("change", this.render, this);
        var self = this;
        this.$el.on("click", function(e, escapeFlag) {
            if (!escapeFlag) {
                self.param.escapeFlag = false
            } else {
                self.param.escapeFlag = true
            }
            if (!self.param.escapeFlag || self.param.escapeFlag && self.model.get("state") === "open") {
                self.changeModel()
            }
        });
        if (this.$el.attr(this.param.dataFlexibleAccordionHeaderNum)) {
            snm.$("[" + this.param.dataFlexibleAccordionBodyNum + " = " + this.$el.attr(this.param.dataFlexibleAccordionHeaderNum) + "]").find(this.param.flexibleAccordionCloseBtn).on("click", function() {
                self.accordionClose()
            })
        }
        this.param.escapeFlag = false;
        this.render()
    },
    changeModel: function() {
        if (this.param.slideFlag) {
            this.param.slideFlag = false;
            var nextState = this.model.get("state") === "open" ? "close" : "open";
            this.model.set("state", nextState)
        }
        return false
    },
    accordionClose: function() {
        if (this.model.get("state") === "open") {
            this.model.set("state", "close")
        }
    },
    render: function() {
        var self = this,
            i;
        this.renderPanel();
        this.renderHead();
        if (this.param.linkFlag && this.model.get("state") === "open" && !this.param.escapeFlag) {
            i = this.$el.closest(this.param.flexibleAccordionWrap).find(this.param.flexibleAccordion).index(this.$el);
            this.$el.closest(this.param.flexibleAccordionWrap).find(this.param.flexibleAccordion).each(function() {
                if (self.$el.closest(self.param.flexibleAccordionWrap).find(self.param.flexibleAccordion).index(snm.$(this)) !== i) {
                    snm.$(this).trigger("click", [true])
                }
            })
        }
    },
    renderHead: function() {
        if (this.param.flexibleAccordionActiveClass != "") {
            if (this.model.get("state") === "open") {
                if (!this.$el.hasClass(this.param.flexibleAccordionActiveClass)) {
                    this.$el.addClass(this.param.flexibleAccordionActiveClass)
                }
            } else if (this.model.get("state") === "close") {
                if (this.$el.hasClass(this.param.flexibleAccordionActiveClass)) {
                    this.$el.removeClass(this.param.flexibleAccordionActiveClass)
                }
            }
        }
    },
    renderPanel: function() {
        var self = this;
        if (this.model.get("initialize")) {
            if (this.model.get("state") === "open") {
                snm.$("[" + this.param.dataFlexibleAccordionBodyNum + " = " + this.$el.attr(this.param.dataFlexibleAccordionHeaderNum) + "]").show()
            } else if (this.model.get("state") === "close") {
                snm.$("[" + this.param.dataFlexibleAccordionBodyNum + " = " + this.$el.attr(this.param.dataFlexibleAccordionHeaderNum) + "]").hide()
            }
            this.model.set("initialize", false);
            self.param.slideFlag = true;
            return false
        }
        if (this.model.get("state") === "open") {
            snm.$("[" + this.param.dataFlexibleAccordionBodyNum + " = " + this.$el.attr(this.param.dataFlexibleAccordionHeaderNum) + "]").slideDown(this.param.speed, function() {
                self.param.slideFlag = true
            })
        } else if (this.model.get("state") === "close") {
            snm.$("[" + this.param.dataFlexibleAccordionBodyNum + " = " + this.$el.attr(this.param.dataFlexibleAccordionHeaderNum) + "]").slideUp(this.param.speed, function() {
                self.param.slideFlag = true
            })
        } else {
            self.param.slideFlag = true
        }
    }
});
snm.module.view.Floating = snm.Backbone.View.extend({
    param: {
        floatingArea: ".js-floatingArea",
        floatingItem: ".js-floatingItem"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var self = this;
        snm.$(window).on("scroll", function() {
            self.render()
        });
        snm.$(window).on("resize", function() {
            self.render()
        })
    },
    render: function() {
        var positionTop = snm.$(window).scrollTop(),
            floatingItem = this.$el.find(this.param.floatingItem);
        if (this.$el.find(this.param.floatingArea).height() < this.$el.find(this.param.floatingItem).height()) {
            return
        }
        this.setParam();
        if (positionTop > this.param.moveMin && positionTop < this.param.moveMax) {
            var marginTop = positionTop - this.param.moveMin;
            floatingItem.css({
                "margin-top": marginTop
            })
        } else if (positionTop < this.param.moveMin) {
            floatingItem.css({
                "margin-top": ""
            })
        } else if (positionTop > this.param.moveMax) {
            floatingItem.css({
                "margin-top": this.param.marginMax
            })
        }
    },
    setParam: function() {
        var area = this.$el.find(this.param.floatingArea),
            item = this.$el.find(this.param.floatingItem);
        this.param.moveMin = area.offset().top - 10;
        this.param.moveMax = this.param.moveMin + area.height() - item.height();
        this.param.marginMax = this.param.moveMax - this.param.moveMin
    }
});
snm.module.model.GiftEdit = snm.Backbone.Model.extend({});
snm.module.view.GiftEdit = snm.Backbone.View.extend({
    param: {
        giftEditWorks: ".js-giftEditWorks",
        giftEditWrapping: ".js-giftEditWrapping",
        giftEditPackSelect: ".js-giftEditPackSelect",
        giftEditFitSelect: ".js-giftEditFitSelect",
        giftEditFitText: ".js-giftEditFitText",
        giftEditWorksTrigger: ".js-giftEditWorksTrigger",
        giftEditColTrigger: ".js-giftEditColTrigger",
        giftEditColInput: ".js-giftEditColInput",
        giftEditWorksName: ".js-giftEditWorksName",
        giftEditWorksNameAdd: ".js-giftEditWorksNameAdd",
        giftEditAdd: ".js-giftEditAdd",
        giftEditItem: ".js-giftEditItem",
        giftEditItemQuantity: ".js-giftEditItemQuantity",
        giftEditItemQuantitySelect: ".js-giftEditItemQuantitySelect",
        dataAddNum: "data-add-num",
        dataTrigger: "data-trigger",
        dataNameValue01: "data-name-value01",
        dataNameValue02: "data-name-value02",
        dataSelectType: "data-select-type",
        giftEditAccordionTarget: ".js-giftEditAccordionTarget",
        accordionSpeed: 300,
        giftEditBtnDisabledTrigger: ".js-giftEditBtnDisabledTrigger",
        giftEditSubmitBtn: ".js-giftEditSubmitBtn",
        isHide: "is-hide",
        giftEditHideTarget: ".js-giftEditHideTarget"
    },
    events: {
        "change .js-giftEditColTrigger": "renderActive",
        "change .js-giftEditPackSelect": "renderSelectSwitch",
        "click .js-giftEditWorksNameAddBtn": "renderNameAdd"
    },
    initialize: function() {
        var self = this;
        this.param = snm._.defaults({}, this.param);
        this.$el.find(this.param.giftEditAdd).find(this.param.giftEditWorksName + ":gt(0)").hide();
        this.$el.find(this.param.giftEditWorksNoMsg).hide();
        if (this.$el.find(this.param.giftEditAccordionTarget)[0]) {
            if (!this.$el.find(this.param.giftEditColTrigger + " option:selected" + "[" + this.param.dataTrigger + "]")[0]) {
                this.$el.find(this.param.giftEditAccordionTarget).hide()
            }
        }
        var len, addNum;
        this.$el.find(this.param.giftEditAdd).each(function() {
            len = snm.$(this).find(self.param.giftEditWorksName).length;
            addNum = snm.$(this).attr(self.param.dataAddNum);
            if (len == 1) {
                snm.$(this).find(self.param.giftEditWorksNameAdd).eq(0).hide()
            } else {
                for (var i = 0; i < len; i++) {
                    if (snm.$(this).find(self.param.giftEditColTrigger).eq(i).prop("selectedIndex") !== 0) {
                        snm.$(this).find(self.param.giftEditWorksNameAdd).eq(i - 1).hide();
                        snm.$(this).find(self.param.giftEditWorksName).eq(i).show();
                        if (i == addNum || len == 1) {
                            snm.$(this).find(self.param.giftEditWorksNameAdd).eq(i).hide();
                            break
                        }
                    }
                }
            }
        });
        this.param.btnDisabledTrigger = "";
        this.param.submitSettingFlag = false;
        if (!this.$el.find(this.param.giftEditSubmitBtn).prop("disabled") && this.$el.find(this.param.giftEditBtnDisabledTrigger)[0]) {
            this.param.submitSettingFlag = true;
            this.param.btnDisabledTrigger = this.$el.find(this.param.giftEditBtnDisabledTrigger).val()
        }
    },
    renderNameAdd: function(e) {
        var $parent = snm.$(e.target).parents(this.param.giftEditWorksName),
            nameLen = snm.$(e.target).parents(this.param.giftEditAdd).find(this.param.giftEditWorksName + ":visible").length,
            addNum = snm.$(e.target).parents(this.param.giftEditAdd).attr(this.param.dataAddNum);
        $parent.next(this.param.giftEditWorksName).find(this.param.giftEditColInput).prop("disabled", true);
        $parent.find(this.param.giftEditWorksNameAdd).hide();
        if ($parent.nextAll(this.param.giftEditWorksName).length == 1) {
            $parent.next(this.param.giftEditWorksName).find(this.param.giftEditWorksNameAdd).hide()
        }
        if (nameLen == addNum) {
            $parent.next(this.param.giftEditWorksName).find(this.param.giftEditWorksNameAdd).hide()
        }
        if (nameLen <= addNum) {
            $parent.next(this.param.giftEditWorksName).show()
        }
        return false
    },
    renderActive: function(e) {
        var self = this,
            $parent = snm.$(e.target).parents(this.param.giftEditWorksName),
            $selected = $parent.find(this.param.giftEditColTrigger + " option:selected"),
            trigger = $selected.attr(this.param.dataTrigger),
            $accordionTarget = $parent.find(this.param.giftEditAccordionTarget),
            $hideTarget = $parent.find(this.param.giftEditHideTarget);
        if (snm.$(e.target).parents(this.param.giftEditWorksName)[0]) {
            $parent = snm.$(e.target).parents(this.param.giftEditWorksName);
            $selected = $parent.find(this.param.giftEditColTrigger + " option:selected")
        }
        if (trigger !== undefined) {
            if (trigger === "name") {
                $parent.find(this.param.giftEditColInput).eq(0).prop("disabled", true);
                $parent.find(this.param.giftEditColInput).eq(1).prop("disabled", false);
                if (!snm.util.navigator.smartphone) {
                    $parent.find(this.param.giftEditColInput).eq(1).focus()
                }
            } else {
                $parent.find(this.param.giftEditColInput).prop("disabled", false);
                if (!snm.util.navigator.smartphone) {
                    $parent.find(this.param.giftEditColInput).eq(0).focus()
                }
                if ($accordionTarget[0]) {
                    $accordionTarget.stop().slideDown(this.param.accordionSpeed)
                }
            }
            if ($hideTarget[0]) {
                $hideTarget.each(function() {
                    if (snm.$(this).hasClass(self.param.isHide)) {
                        snm.$(this).removeClass(self.param.isHide)
                    }
                });
                if (!snm.util.navigator.smartphone && $hideTarget.find("input")[0]) {
                    $hideTarget.find("input").eq(0).focus()
                }
            }
        } else {
            $parent.find(this.param.giftEditColInput).prop("disabled", true);
            if ($accordionTarget[0]) {
                $accordionTarget.stop().slideUp(this.param.accordionSpeed)
            }
            if ($hideTarget[0]) {
                $hideTarget.each(function() {
                    if (!snm.$(this).hasClass(self.param.isHide)) {
                        snm.$(this).addClass(self.param.isHide)
                    }
                })
            }
        }
        if ($selected.attr(this.param.dataNameValue01) !== undefined) {
            $parent.find(this.param.giftEditColInput).eq(0).val($selected.attr(this.param.dataNameValue01));
            $parent.find(this.param.giftEditColInput).eq(1).val($selected.attr(this.param.dataNameValue02))
        } else {
            $parent.find(this.param.giftEditColInput).val("")
        }
        if (this.param.submitSettingFlag) {
            if (snm.$(e.target).hasClass(this.param.giftEditBtnDisabledTrigger.replace(".", ""))) {
                if (snm.$(e.target).val() === this.param.btnDisabledTrigger) {
                    this.$el.find(this.param.giftEditSubmitBtn).prop("disabled", false)
                } else {
                    this.$el.find(this.param.giftEditSubmitBtn).prop("disabled", true)
                }
            }
        }
    },
    renderSelectSwitch: function() {
        this.param.selectType = this.$el.find(this.param.giftEditPackSelect + " option:selected").attr(this.param.dataSelectType);
        var targetSelect = this.$el.find(this.param.giftEditFitSelect),
            targetText = this.$el.find(this.param.giftEditFitText);
        if (this.param.selectType === undefined || this.param.selectType === "" || !this.$el.find(this.param.giftEditFitSelect + "[" + this.param.dataSelectType + "='" + this.param.selectType + "']")[0]) {
            targetText.hide();
            targetSelect.hide()
        } else {
            targetText.show();
            targetSelect.hide();
            this.$el.find(this.param.giftEditFitSelect + "[" + this.param.dataSelectType + "='" + this.param.selectType + "']").show();
            targetSelect.prop("selectedIndex", 0)
        }
    }
});
snm.module.view.HeaderNav = snm.Backbone.View.extend({
    param: {
        headerNavOpen: ".js-headerNavOpen",
        headerNavSearchStoreOpen: ".js-headerNavSearchStoreOpen",
        headerNavOpenTarget: ".js-headerNavOpenTarget",
        headerNavCategoryList: ".js-headerNavCategoryList",
        headerNavCategoryListWrap: ".js-headerNavCategoryListWrap",
        headerNavSearchStore: ".js-headerNavSearchStore",
        headerNavSearchStoreText: ".js-headerNavSearchStoreText",
        headerNavSearchStoreList: ".js-headerNavSearchStoreList",
        headerNavSearchStoreListItem: ".js-headerNavSearchStoreListItem",
        headerNavSearchStoreSelect: ".js-headerNavSearchStoreSelect",
        headerNavGlobal: ".js-headerNavGlobal",
        headerNavGlobalTarget: ".js-headerNavGlobalTarget",
        headerNavGlobalItem: ".js-headerNavGlobalItem",
        headerNavListArea: ".js-headerNavListArea",
        headerNavInput: ".js-headerNavInput",
        tmpHeaderNavList: "#tmpHeaderNavList",
        dataSearchText: "data-search-text",
        dataSearchName: "data-search-name",
        listChangeTime: 400,
        listChangeTimeGlobal: 100,
        globalNavSlideSpeed: 200,
        tiggerRadian: 60,
        isActive: "is-active",
        flagHeightSet: true,
        headerNavCartBtn: ".js-headerNavCartBtn",
        headerNavClickable: ".js-headerNavClickable",
        isPointer: "is-pointer",
        isDisabled: "is-disabled"
    },
    events: {
        "mouseenter .js-headerNavOpen": "renderOpen",
        "mouseleave .js-headerNavOpen": "renderClose",
        "mouseenter .js-headerNavCategoryList": "renderCateListIn",
        "mouseleave .js-headerNavCategoryList": "renderCateListOut",
        "mousemove .js-headerNavCategoryList": "CateListMouseMove",
        "click .js-headerNavCategoryListLink": "nolink",
        "click .js-headerNavSearchStoreOpen": "renderCateOpen",
        "mouseleave .js-headerNavSearchStore": "renderCateClose",
        "click .js-headerNavSearchStoreListItem": "renderSearchCate",
        "mouseenter .js-headerNavGlobal": "renderGlobalNavIn",
        "mouseleave .js-headerNavGlobal": "renderGlobalNavOut",
        "click .js-headerNavGlobalLink": "nolink",
        "click .js-headerNavClickable": "cartTransition"
    },
    initialize: function() {
        this.$el.find(this.param.headerNavGlobalItem).hide();
        if (this.$el.find(this.param.headerNavSearchStoreSelect).length > 0) {
            this.param.listTemplate = snm._.template(this.$el.find(this.param.tmpHeaderNavList).html());
            this.$el.find(this.param.headerNavSearchStoreSelect).hide();
            this.createCateList()
        }
        this.isTablet = snm.util.navigator.tablet || snm.util.navigator.smartphone;
        if (this.isTablet) {
            this.events = {
                "click .js-headerNavOpen": "renderOpen",
                "click .js-headerNavCategoryList": "renderCateListIn",
                "click .js-headerNavSearchStoreOpen": "renderCateOpen",
                "click .js-headerNavSearchStoreListItem": "renderSearchCate",
                "click .js-headerNavGlobal": "renderGlobalNavIn"
            }
        } else if (snm.util.navigator.is_edge) {
            this.events = {
                "click .js-headerNavOpen": "renderOpen",
                "pointerenter .js-headerNavOpen": "renderOpen",
                "pointerleave .js-headerNavOpen": "renderClose",
                "click .js-headerNavCategoryList": "renderCateListIn",
                "pointerenter .js-headerNavCategoryList": "renderCateListIn",
                "pointerleave .js-headerNavCategoryList": "renderCateListOut",
                "pointermove .js-headerNavCategoryList": "CateListMouseMove",
                "click .js-headerNavCategoryListLink": "nolink",
                "click .js-headerNavSearchStoreOpen": "renderCateOpen",
                "pointerleave .js-headerNavSearchStore": "renderCateClose",
                "click .js-headerNavSearchStoreListItem": "renderSearchCate",
                "click .js-headerNavGlobal": "renderGlobalNavIn",
                "pointerenter .js-headerNavGlobal": "renderGlobalNavIn",
                "pointerleave .js-headerNavGlobal": "renderGlobalNavOut",
                "click .js-headerNavGlobalLink": "nolink",
                "click .js-headerNavClickable": "cartTransition"
            }
        }
        var $clickable = this.$el.find(this.param.headerNavClickable);
        if (this.$el.find(this.param.headerNavCartBtn).length === 0 && $clickable.closest(this.param.headerNavOpen + "[data-url]").length === 0) {
            $clickable.removeClass(this.param.headerNavClickable.replace(".", ""))
        } else {
            $clickable.addClass(this.param.isPointer)
        }
    },
    renderOpen: function(e) {
        if (this.isTouchDevice(e) && this.isPointerenter(e)) return;
        var $target = snm.$(e.target).is(this.param.headerNavOpen) ? snm.$(e.target) : snm.$(e.target).parents(this.param.headerNavOpen);
        if (this.isTouchDevice(e) && snm.$(e.target).parents(this.param.headerNavCategoryList).length === 0) {
            if ($target.find(this.param.headerNavOpenTarget).hasClass(this.param.isActive)) {
                $target.find(this.param.headerNavOpenTarget).removeClass(this.param.isActive);
                this.$el.find(this.param.headerNavCategoryList).removeClass(this.param.isActive)
            } else {
                $target.find(this.param.headerNavOpenTarget).addClass(this.param.isActive)
            }
        } else {
            $target.find(this.param.headerNavOpenTarget).addClass(this.param.isActive)
        }
        if (this.param.flagHeightSet) {
            this.heightSetting();
            this.param.flagHeightSet = false
        }
    },
    heightSetting: function() {
        var $listArea = this.$el.find(this.param.headerNavOpenTarget).next(),
            $listTitle = this.$el.find(".mod-header_categoryListTitle").eq(1),
            $subCate = this.$el.find(this.param.headerNavCategoryListWrap),
            top = $listArea.offset().top,
            bottom, height;
        if ($listTitle[0]) {
            bottom = $listTitle.offset().top;
            height = bottom - top + 10
        } else {
            height = $listArea.outerHeight() - 5
        }
        $subCate.css("min-height", height - parseInt($subCate.css("paddingTop"), 10) - parseInt($subCate.css("paddingBottom"), 10))
    },
    renderClose: function(e) {
        if (this.isTouchDevice(e)) return;
        this.$el.find(this.param.headerNavOpenTarget).removeClass(this.param.isActive);
        this.$el.find(this.param.headerNavCategoryList).removeClass(this.param.isActive)
    },
    renderCateOpen: function(e) {
        var $parent = snm.$(e.target).hasClass(this.param.headerNavSearchStoreOpen.replace(".", "")) ? snm.$(e.target) : snm.$(e.target).parents(this.param.headerNavSearchStoreOpen);
        $parent.toggleClass(this.param.isActive);
        this.$el.find(".mod-header_searchColPullDownDetail").css("background", "");
        return false
    },
    renderCateClose: function(e) {
        if (this.isTouchDevice(e)) return;
        this.$el.find(this.param.headerNavSearchStoreOpen).removeClass(this.param.isActive)
    },
    CateListMouseMove: function(e) {
        if (this.isTouchDevice(e)) return;
        var moveX = e.clientX - this.param.ListAreaX,
            moveY = e.clientY - this.param.ListAreaY,
            radian = Math.atan2(moveY, moveX) / (Math.PI / 180),
            self = this,
            mouseTimer;
        if (Math.abs(radian) < this.param.tiggerRadian) {
            this.param.mouseAngle = true
        } else {
            this.param.mouseAngle = false
        }
        clearTimeout(mouseTimer);
        mouseTimer = setTimeout(function() {
            self.param.ListAreaX = e.clientX
        }, 500)
    },
    nolink: function(e) {
        return this.isTouchDevice(e)
    },
    renderCateListIn: function(e) {
        if (this.isTouchDevice(e) && this.isPointerenter(e)) return;
        this.param.ListAreaX = e.clientX;
        this.param.ListAreaY = e.clientY;
        if (this.isTouchDevice(e)) {
            this.$el.find(this.param.headerNavCategoryList).removeClass(this.param.isActive);
            snm.$(e.target).parents(this.param.headerNavCategoryList).addClass(this.param.isActive).find(this.param.headerNavCategoryListWrap).show()
        } else {
            if (this.param.mouseAngle) {
                var self = this;
                this.param.listTimer = setTimeout(function() {
                    self.$el.find(self.param.headerNavCategoryList).removeClass(self.param.isActive).find(self.param.headerNavCategoryListWrap).eq(0).hide();
                    snm.$(e.target).parents(self.param.headerNavCategoryList).addClass(self.param.isActive).find(self.param.headerNavCategoryListWrap).eq(0).show()
                }, this.param.listChangeTime)
            } else {
                this.$el.find(this.param.headerNavCategoryList).removeClass(this.param.isActive).find(this.param.headerNavCategoryListWrap).eq(0).hide();
                snm.$(e.target).parents(this.param.headerNavCategoryList).addClass(this.param.isActive).find(this.param.headerNavCategoryListWrap).eq(0).show()
            }
        }
        this.param.mouseInX = e.clientX
    },
    renderCateListOut: function(e) {
        if (this.isTouchDevice(e)) return;
        clearTimeout(this.param.listTimer)
    },
    renderSearchCate: function(e) {
        var $parent = snm.$(e.target).hasClass(this.param.headerNavSearchStoreListItem.replace(".", "")) ? snm.$(e.target) : snm.$(e.target).parents(this.param.headerNavSearchStoreListItem),
            index = $parent.index(),
            $selected = this.$el.find(this.param.headerNavSearchStoreSelect + " option").eq(index),
            placeholder = $selected.attr(this.param.dataSearchName),
            selectText;
        if ($selected.attr(this.param.dataSearchText)) {
            selectText = $selected.attr(this.param.dataSearchText)
        } else {
            selectText = $parent.text()
        }
        this.$el.find(this.param.headerNavSearchStoreText).text(selectText);
        $selected.prop("selected", true);
        snm.$(e.target).parents(this.param.headerNavSearchStore).find(this.param.headerNavSearchStoreOpen).removeClass(this.param.isActive);
        this.$el.find(this.param.headerNavSearchStoreListItem).removeClass(this.param.isActive);
        $parent.addClass(this.param.isActive);
        this.$el.find(this.param.headerNavInput).attr("placeholder", placeholder);
        snm.module.placeholder.replaceVal(this.$el, placeholder);
        return false
    },
    renderGlobalNavIn: function(e) {
        if (this.isTouchDevice(e) && this.isPointerenter(e)) return;
        var self = this,
            position = this.globalNavPosition(e);
        if (this.isTouchDevice(e)) {
            if (snm.$(e.target).parents(this.param.headerNavGlobal).find(this.param.headerNavGlobalTarget).hasClass(this.param.isActive)) {
                snm.$(e.target).parents(this.param.headerNavGlobal).find(this.param.headerNavGlobalItem).stop().slideUp(this.param.globalNavSlideSpeed, function() {
                    self.$el.find(self.param.headerNavGlobalTarget).removeClass(self.param.isActive)
                })
            } else {
                this.$el.find(this.param.headerNavGlobalTarget).removeClass(this.param.isActive);
                this.$el.find(this.param.headerNavGlobalItem).stop().slideUp(this.param.globalNavSlideSpeed);
                snm.$(e.target).parents(this.param.headerNavGlobal).find(this.param.headerNavGlobalTarget).addClass(this.param.isActive);
                snm.$(e.target).parents(this.param.headerNavGlobal).find(this.param.headerNavGlobalItem).css(position).stop().slideDown(this.param.globalNavSlideSpeed)
            }
        } else {
            if (!snm.$(e.target).parents(this.param.headerNavGlobal).find(this.param.headerNavGlobalTarget).hasClass(this.param.isActive)) {
                this.param.globalNavTimer = setTimeout(function() {
                    self.$el.find(self.param.headerNavGlobalTarget).removeClass(self.param.isActive);
                    self.$el.find(self.param.headerNavGlobalItem).stop().slideUp(self.param.globalNavSlideSpeed);
                    snm.$(e.target).parents(self.param.headerNavGlobal).find(self.param.headerNavGlobalTarget).addClass(self.param.isActive);
                    snm.$(e.target).parents(self.param.headerNavGlobal).find(self.param.headerNavGlobalItem).css(position).stop().slideDown(self.param.globalNavSlideSpeed)
                }, this.param.listChangeTimeGlobal)
            }
        }
    },
    globalNavPosition: function(e) {
        var $target = snm.$(e.target),
            baseLeft = this.$el.find(this.param.headerNavGlobal).eq(0).offset().left,
            baseLeftBorderLeft = this.$el.find(this.param.headerNavGlobalTarget).eq(0).css("border-left-width").replace("px", ""),
            rightPosi = $target.offset().left + $target.parents(this.param.headerNavGlobal).find(this.param.headerNavGlobalItem).outerWidth(),
            position = {
                left: $target.offset().left - (baseLeft + Number(baseLeftBorderLeft)) + "px"
            };
        if (document.body.clientWidth < rightPosi) {
            position = {
                left: "auto",
                right: 0
            }
        }
        return position
    },
    renderGlobalNavOut: function(e) {
        if (this.isTouchDevice(e)) return;
        clearTimeout(this.param.globalNavTimer);
        var self = this,
            $target = snm.$(e.target).hasClass(this.param.headerNavGlobal.replace(".", "")) ? snm.$(e.target) : snm.$(e.target).parents(this.param.headerNavGlobal);
        if (snm.$(e.target).hasClass(this.param.headerNavGlobal.replace(".", ""))) {
            $target = snm.$(e.target)
        } else {
            $target = snm.$(e.target).parents(this.param.headerNavGlobal)
        }
        $target.find(this.param.headerNavGlobalItem).stop().slideUp(this.param.globalNavSlideSpeed, function() {
            $target.find(self.param.headerNavGlobalTarget).removeClass(self.param.isActive)
        })
    },
    createCateList: function() {
        var list = {
                item: []
            },
            self = this,
            selectText, type;
        this.$el.find(this.param.headerNavSearchStoreSelect + " option").each(function(i) {
            if (snm.$(this).hasClass(self.param.isDisabled)) {
                type = "disabled"
            } else {
                type = "normal"
            }
            list.item[i] = {
                name: snm.$(this).text(),
                type: type
            }
        });
        this.$el.find(this.param.headerNavSearchStoreList).html(this.param.listTemplate(list));
        if (this.$el.find(this.param.headerNavSearchStoreSelect + " option:selected").attr(this.param.dataSearchText)) {
            selectText = this.$el.find(this.param.headerNavSearchStoreSelect + " option:selected").attr(this.param.dataSearchText)
        } else {
            selectText = this.$el.find(this.param.headerNavSearchStoreSelect + " option:selected").text()
        }
        this.$el.find(this.param.headerNavSearchStoreText).text(selectText)
    },
    cartTransition: function(e) {
        if (this.isTouchDevice(e)) return;
        var $cartBtn = this.$el.find(this.param.headerNavCartBtn),
            $dataUrl = snm.$(e.target).closest(this.param.headerNavOpen + "[data-url]"),
            btnUrl = $cartBtn.attr("href"),
            dataUrl = $dataUrl.attr("data-url");
        if ($cartBtn.length > 0) {
            location.href = btnUrl
        } else if ($dataUrl.length > 0) {
            location.href = dataUrl
        }
    },
    isTouchDevice: function(e) {
        return this.isTablet || e.originalEvent.pointerType === "touch"
    },
    isPointerenter: function(e) {
        return e.type === "pointerenter"
    }
});
snm.module.view.Heightline = snm.Backbone.View.extend({
    param: {
        heightlineChild: ".js-heightlineBox"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var self = this,
            arr = [];
        this.$child = this.$el.find(this.param.heightlineChild);
        this.$el.find(this.param.heightlineChild).height("auto");
        if (this.$el.find("img")[0]) {
            this.$el.find("img").each(function() {
                arr.push(snm.$(this).attr("src"))
            });
            snm.util.preload.init(arr, function() {
                self.heightGroup(0)
            })
        } else {
            this.heightGroup(0)
        }
        snm.$(window).resize(function(e, a) {
            var speed = 500;
            if (a == "fast") {
                speed = 0
            }
            var resizeFunc = snm._.debounce(function() {
                self.$el.find(self.param.heightlineChild).height("auto");
                self.heightGroup(0)
            }, speed);
            resizeFunc()
        })
    },
    heightGroup: function(num) {
        var contentsNum = this.$child.length,
            baseTop = this.$child.eq(num).offset().top,
            heightArr = [],
            i, top, max;
        for (i = num; i < contentsNum; i++) {
            top = this.$child.eq(i).offset().top;
            heightArr.push(this.$child.eq(i).innerHeight());
            if (baseTop != top) {
                heightArr.pop();
                max = Math.max.apply(null, heightArr);
                this.heightGive(i - 1, num, max);
                break
            }
            if (i == contentsNum - 1) {
                max = Math.max.apply(null, heightArr);
                this.heightGive(i, num, max)
            }
        }
    },
    heightGive: function(roop, num, max) {
        var i;
        for (i = num; i <= roop; i++) {
            this.$child.eq(i).height(max)
        }
        roop++;
        if (roop == this.$child.length) {
            return false
        }
        this.heightGroup(roop)
    }
});
snm.module.model.IconHidden = snm.Backbone.Model.extend({});
snm.module.view.IconHidden = snm.Backbone.View.extend({
    param: {
        iconHiddenItem: ".js-iconHiddenItem",
        showNum: 3
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        var iconNum = this.$el.find(this.param.iconHiddenItem).length;
        if (iconNum > this.param.showNum) {
            this.model.set("hidden", true)
        }
    },
    render: function() {
        this.$el.find(this.param.iconHiddenItem + ":gt(" + (this.param.showNum - 1) + ")").hide()
    }
});
snm.module.view.IframeResize = snm.Backbone.View.extend({
    param: {
        iframeResizeParent: "js-iframeResizeParent",
        isParent: false,
        marginHeight: 25,
        checkIntervalId: 0,
        checkInterval: 1e3,
        currentHeight: 0
    },
    initialize: function() {
        var self = this;
        this.param.isParent = this.$el.hasClass(this.param.iframeResizeParent);
        if (this.param.isParent) {
            var eventName = snm.util.is_ie ? "readystatechange" : "load";
            this.$el.on(eventName, function(e) {
                self.beginConnect(e)
            })
        } else {
            this.param.currentHeight = this.getHeight();
            this.param.checkIntervalId = setInterval(function() {
                self.checkHeight()
            }, this.param.checkInterval)
        }
        snm.$(window).on("message", function(e) {
            self.getMessage(e.originalEvent)
        })
    },
    beginConnect: function(e) {
        if (e.type !== "load") {
            return
        }
        this.sendMessage("getHeight")
    },
    checkHeight: function() {
        if (this.param.currentHeight === this.getHeight()) {
            return
        }
        this.param.currentHeight = this.getHeight();
        this.sendMessage("sendHeight," + this.param.currentHeight)
    },
    sendMessage: function(message) {
        if (this.param.isParent) {
            this.$el[0].contentWindow.postMessage(message, "*")
        } else {
            var target = parent;
            if (!parent.postMessage) {
                target = parent.document.postMessage ? parent.document : undefined
            }
            if (target !== undefined) {
                target.postMessage(message, "*")
            }
        }
    },
    getMessage: function(e) {
        var dataList = e.data.split(",");
        switch (dataList[0]) {
            case "getHeight":
                this.sendMessage("sendHeight," + this.getHeight());
                break;
            case "sendHeight":
                this.setIframeHeight(dataList[1]);
                break;
            case "finishSetIframeHeight":
                this.param.currentHeight = this.getHeight();
                break;
            default:
                break
        }
    },
    getHeight: function() {
        return this.$el[0].scrollHeight + this.param.marginHeight
    },
    setIframeHeight: function(height) {
        if (!this.param.isParent) {
            return
        }
        this.$el.css({
            height: height
        });
        this.sendMessage("finishSetIframeHeight")
    }
});
snm.module.InputCheck = {
    param: {
        inputCheck: ".js-inputCheck",
        inputCheckItemWrap: ".js-inputCheckItemWrap",
        inputCheckItem: ".js-inputCheckItem",
        inputCheckItemName: ".js-inputCheckItemName",
        inputCheckRadio: ".js-inputCheckRadio",
        inputCheckText: ".js-inputCheckText",
        inputCheckTextRequired: ".js-inputCheckTextRequired",
        maxlength: []
    },
    init: function() {
        var self = this;
        snm.$(this.param.inputCheckText).each(function() {
            if (snm.$(this).attr("maxlength")) {
                self.param.maxlength.push(snm.$(this).attr("maxlength"))
            } else {
                self.param.maxlength.push(0)
            }
        })
    },
    checkAll: function(el) {
        var $target = snm.$(el).closest(this.param.inputCheck).find(this.param.inputCheckItem),
            self = this,
            alertFlag = false,
            alertMsg = "",
            alertFixMsg = "が未入力または未選択です。",
            textIndex = 0;
        if (!$target[0]) {
            return true
        }
        $target.each(function() {
            if (snm.$(this).find(self.param.inputCheckRadio)[0]) {
                if (!snm.$(this).find(self.param.inputCheckRadio + ":checked")[0]) {
                    alertFlag = true;
                    alertMsg = snm.$(this).closest(self.param.inputCheckItemWrap).find(self.param.inputCheckItemName).text();
                    return false
                }
            } else if (snm.$(this).find(self.param.inputCheckText)[0]) {
                textIndex = snm.$(self.param.inputCheckText).index(snm.$(this).find(self.param.inputCheckText)[0]);
                if (snm.$(this).find(self.param.inputCheckText + self.param.inputCheckTextRequired)[0]) {
                    if (snm.$(this).find(self.param.inputCheckText + self.param.inputCheckTextRequired).val() === "") {
                        alertFlag = true;
                        alertMsg = snm.$(this).closest(self.param.inputCheckItemWrap).find(self.param.inputCheckItemName).text();
                        return false
                    }
                }
                if (!snm.util.objValidation(self.param.maxlength[textIndex]) && self.param.maxlength[textIndex] > 0) {
                    if (snm.$(this).find(self.param.inputCheckText).val().length > self.param.maxlength[textIndex]) {
                        alertFlag = true;
                        alertMsg = snm.$(this).closest(self.param.inputCheckItemWrap).find(self.param.inputCheckItemName).text();
                        alertFixMsg = "は" + self.param.maxlength[textIndex] + "文字以内でご記入ください。";
                        return false
                    }
                }
            }
        });
        if (alertFlag) {
            snm.alertModal.alert(alertMsg + alertFixMsg);
            return false
        }
        setTimeout(function() {
            snm.$(el).prop("disabled", true)
        }, 10);
        return true
    }
};
snm.module.Is_iOS = snm.Backbone.View.extend({
    param: {
        is_iOS: "is-iOS"
    },
    initialize: function() {
        var ua = snm.util.navigator;
        if (ua.is_iOS) this.$el.addClass(this.param.is_iOS)
    }
});
snm.module.IsTablet = snm.Backbone.View.extend({
    param: {
        isTablet: "is-tablet"
    },
    initialize: function() {
        var ua = snm.util.navigator;
        if (ua.tablet || ua.smartphone) this.$el.addClass(this.param.isTablet)
    }
});
snm.module.model.LayoutSwitching = snm.Backbone.Model.extend({});
snm.module.view.LayoutSwitching = snm.Backbone.View.extend({
    param: {
        LayoutSwitchingBtn: ".js-layoutSwitchingBtn",
        LayoutSwitchingContents: ".js-layoutSwitchingContents",
        LayoutSwitchingGrid: "is-gridDisplay",
        LayoutSwitchingActive: "is-active",
        heightline: ".js-heightline"
    },
    events: {
        "click .js-layoutSwitchingBtn": "switching"
    },
    initialize: function() {
        var cookie = snm.module.cookie.get("layoutSwitchingType");
        this.model.on("change", this.render, this);
        this.$el.find(this.param.LayoutSwitchingContents).addClass(this.param.LayoutSwitchingGrid);
        if (cookie !== undefined) {
            this.model.set("type", cookie)
        }
    },
    render: function() {
        var num = this.$el.find(this.param.LayoutSwitchingBtn).length,
            $active = this.$el.find(this.param.LayoutSwitchingBtn),
            i;
        if (this.model.get("type") == "Tile") {
            this.$el.find(this.param.LayoutSwitchingContents).addClass(this.param.LayoutSwitchingGrid)
        } else {
            this.$el.find(this.param.LayoutSwitchingContents).removeClass(this.param.LayoutSwitchingGrid)
        }
        $active.parent().removeClass(this.param.LayoutSwitchingActive);
        for (i = 0; i < num; i++) {
            if ($active.eq(i).attr("data-layout-type") == this.model.get("type")) {
                $active.eq(i).parent().addClass(this.param.LayoutSwitchingActive)
            }
        }
        if (this.$el.find(this.param.heightline).length) {
            snm.$(window).trigger("resize", "fast")
        }
    },
    switching: function(e) {
        var layoutType;
        if (snm.$(e.target).attr("data-layout-type")) {
            layoutType = snm.$(e.target).attr("data-layout-type")
        } else if (snm.$(e.target).closest("[data-layout-type]").attr("data-layout-type")) {
            layoutType = snm.$(e.target).parent().attr("data-layout-type")
        } else {
            return false
        }
        snm.module.cookie.set("layoutSwitchingType", layoutType, {
            path: "/"
        });
        this.modelChange(layoutType);
        return false
    },
    modelChange: function(layoutType) {
        this.model.set("type", layoutType)
    }
});
snm.module.view.MedicineCheck = snm.Backbone.View.extend({
    param: {
        medicineCheckWrap: ".js-medicineCheckWrap",
        medicineCheckItemCheck: ".js-medicineCheckItemCheck",
        medicineCheckItemWrap: ".js-medicineCheckItemWrap",
        medicineCheckItemAttention: ".js-medicineCheckItemAttention",
        medicineCheckBtn: ".js-medicineCheckBtn",
        medicineCheckInput: ".js-medicineCheckInput",
        medicineCheckRadio: ".js-medicineCheckRadio",
        medicineCheckUserAbove: ".js-medicineCheckUserAbove",
        medicineCheckUserOther: "js-medicineCheckUserOther",
        medicineCheckUserWrap: ".js-medicineCheckUserWrap",
        medicineCheckTrigger: "js-medicineCheckTrigger",
        medicineCheckAccordion: ".js-medicineCheckAccordion",
        isClosed: "is-closed",
        speed: 300
    },
    events: {
        "keyup .js-medicineCheckInput": "checkInput",
        "paste .js-medicineCheckInput": "checkInput",
        "change .js-medicineCheckRadio": "checkAll",
        "change .js-medicineCheckUserAbove,.js-medicineCheckUserOther": "userAccordionSetting",
        "change .js-medicineCheckTrigger,.js-medicineCheckItemCheck": "changeAttention"
    },
    initialize: function() {
        var self = this;
        this.$el.find(this.param.medicineCheckUserAbove + ",." + this.param.medicineCheckUserOther).each(function() {
            self.userAccordionSetting("", snm.$(this))
        });
        this.$el.find("." + this.param.medicineCheckTrigger + "," + this.param.medicineCheckItemCheck).each(function() {
            self.changeAttention("", snm.$(this))
        });
        this.checkAll()
    },
    userAccordionSetting: function(e, $o) {
        var $target = e ? snm.$(e.target) : $o,
            speed = $o ? 0 : this.param.speed,
            self = this,
            $accordionArea = $target.closest(this.param.medicineCheckUserWrap).find(this.param.medicineCheckAccordion);
        this.checkAll();
        if ($target.hasClass(this.param.medicineCheckUserOther) && ($target.is(":checked") || $target.attr("checked"))) {
            $accordionArea.slideDown(speed, function() {
                snm.$(this).find("input").removeClass(self.param.isClosed);
                snm.$(this).find(self.param.medicineCheckItemAttention).find("input").addClass(self.param.isClosed);
                self.checkAll()
            })
        } else {
            $accordionArea.slideUp(speed, function() {
                snm.$(this).find("input").addClass(self.param.isClosed);
                self.checkAll()
            })
        }
        return
    },
    changeAttention: function(e, $o) {
        var $target = e ? snm.$(e.target) : $o,
            speed = $o ? 0 : this.param.speed,
            self = this,
            $accordionArea = $target.closest(this.param.medicineCheckItemWrap).find(this.param.medicineCheckItemAttention);
        this.checkAll();
        if ($accordionArea[0]) {
            if ($target.is(":checked")) {
                $accordionArea.slideDown(speed, function() {
                    snm.$(this).find("input").removeClass(self.param.isClosed);
                    self.checkAll()
                })
            } else {
                $accordionArea.slideUp(speed, function() {
                    snm.$(this).find("input").addClass(self.param.isClosed);
                    self.checkAll()
                })
            }
        }
        return
    },
    checkAll: function() {
        var self = this,
            submitBtn = this.$el.find(this.param.medicineCheckBtn),
            disabledFlag = false;
        if (this.$el.find(this.param.medicineCheckItemCheck + ":checked")[0]) {
            this.$el.find(this.param.medicineCheckItemCheck + ":checked").each(function() {
                if (!snm.$(this).is(":disabled") && !snm.$(this).hasClass(self.param.isClosed)) {
                    disabledFlag = true
                }
            })
        }
        if (!disabledFlag && this.$el.find(this.param.medicineCheckInput)[0]) {
            this.$el.find(this.param.medicineCheckInput).each(function() {
                if (!snm.$(this).is(":disabled") && !snm.$(this).hasClass(self.param.isClosed) && snm.$(this).val() === "") {
                    disabledFlag = true
                }
            })
        }
        if (!disabledFlag && this.$el.find(this.param.medicineCheckRadio)[0]) {
            this.$el.find(this.param.medicineCheckRadio).each(function() {
                if (!snm.$(this).hasClass(self.param.isClosed) && !self.$el.find(self.param.medicineCheckRadio + "[name='" + snm.$(this).attr("name") + "']:checked")[0]) {
                    disabledFlag = true
                }
            })
        }
        submitBtn.prop("disabled", disabledFlag)
    },
    checkInput: function(e) {
        var target = this.$el.find(e.currentTarget),
            submitBtn = this.$el.find(this.param.medicineCheckBtn);
        if (target.val() === "" && submitBtn.prop("disabled") || target.val() !== "" && !submitBtn.prop("disabled")) {
            return
        }
        this.checkAll()
    }
});
snm.module.Modal = snm.Backbone.View.extend({
    param: {
        modalClose: ".js-modalClose",
        modalBg: ".js-modalBg",
        modalContents: ".js-modalContents",
        modalMoveToBody: "js-modalMoveToBody",
        dataModalOpen: "data-modal-open",
        dataAreaNoclick: "data-area-noclick",
        dataReturnPosition: "data-return-position",
        outAreaClick: true,
        outAreaBg: true,
        clickDel: false,
        bgHidden: true,
        speed: 500,
        activeFlag: false,
        modalId: ""
    },
    events: {
        click: "render"
    },
    initialize: function(options) {
        this.options = options || {};
        this.param = snm._.defaults(this.options, this.param);
        if (this.$el.attr("href")) {
            this.param.modalId = this.$el.attr("href")
        } else if (this.$el.attr("data-modal-id")) {
            this.param.modalId = this.$el.attr("data-modal-id")
        } else if (this.$el.context === document) {
            this.param.modalId = this.$el
        }
        if (this.param.modalId === undefined || typeof this.param.modalId === "string" && !this.param.modalId.match(/^#/)) {
            delete this.events.click;
            return false
        }
        if (snm.$(this.param.modalId).hasClass(this.param.modalMoveToBody)) {
            snm.$(this.param.modalId).appendTo(snm.$("body"))
        }
        if (this.param.clickDel) {
            delete this.events.click
        } else {
            this.events.click = "render"
        }
        if (snm.$(this.param.modalId).attr(this.param.dataModalOpen) !== undefined) {
            this.render()
        }
        var self = this;
        snm.$(document).on("keydown", function(e) {
            if (e.keyCode == 27) {
                self.renderClose(self.param.modalId)
            }
        })
    },
    render: function() {
        var self = this;
        if (snm.$(this.param.modalContents + ":visible").length > 0) {
            var $parent = snm.$(this.param.modalBg).parent();
            snm.$(this.param.modalBg).fadeOut(this.param.speed);
            snm.$(this.param.modalContents).fadeOut(this.param.speed, function() {
                $parent.hide();
                self.renderModal()
            })
        } else {
            self.renderModal()
        }
        if (this.$el.filter("[" + this.param.dataReturnPosition + "]")[0]) {
            this.param.scrollTop = snm.$(document).scrollTop()
        }
        if (snm.util.navigator.is_ie) snm.$("embed:not(" + this.param.modalContents + " embed)").hide();
        return false
    },
    renderModal: function() {
        var self = this;
        if (this.$el.attr("disabled")) return false;
        if (snm.$(this.param.modalId).attr(this.param.dataAreaNoclick) !== undefined) this.param.outAreaClick = false;
        this.renderClick();
        if (this.param.bgHidden) {
            snm.$(this.param.modalId).find(this.param.modalBg).hide()
        }
        snm.$(this.param.modalId).find(this.param.modalContents).hide();
        snm.$(this.param.modalId).show().css({
            position: "absolute",
            top: snm.$(document).scrollTop() + "px",
            left: 0,
            right: 0
        });
        if (this.param.bgHidden) {
            snm.$(this.param.modalId).find(this.param.modalBg).fadeIn(this.param.speed, function() {
                snm.$(self.param.modalId).find(self.param.modalContents).eq(0).fadeIn(self.param.speed, function() {
                    self.param.activeFlag = true
                })
            })
        } else {
            snm.$(this.param.modalId).find(this.param.modalBg).hide();
            snm.$(this.param.modalId).find(this.param.modalContents).eq(0).fadeIn(this.param.speed, function() {
                self.param.activeFlag = true
            })
        }
        var windowHei = snm.$(window).height(),
            modalHei = snm.$(this.param.modalId).find(this.param.modalContents).innerHeight(),
            modalMargin;
        if (snm.$(this.param.modalId).find(this.param.modalContents).css("marginTop") !== undefined) {
            modalMargin = snm.$(this.param.modalId).find(this.param.modalContents).css("marginTop").replace("px", "")
        } else {
            modalMargin = 0
        }
        if (windowHei > modalHei) {
            snm.$(this.param.modalId).css({
                top: "+=" + (windowHei / 2 - modalHei / 2 - modalMargin) + "px"
            })
        }
        if (!this.param.outAreaBg) {
            snm.$(this.param.modalId).find(this.param.modalBg).css("background", "none")
        }
    },
    renderClick: function() {
        var self = this;
        snm.$(this.param.modalId).off("click.modal_close", this.param.modalClose).on("click.modal_close", this.param.modalClose, function() {
            self.renderClose(self.param.modalId);
            return false
        });
        if (this.param.outAreaClick === true) {
            snm.$(document).off("click.modal_bg", this.param.modalBg).on("click.modal_bg", this.param.modalBg, function() {
                self.renderClose();
                return false
            })
        } else {
            snm.$(document).off("click.modal_bg", this.param.modalBg)
        }
    },
    renderClose: function() {
        var self = this;
        if (this.param.activeFlag) {
            this.param.activeFlag = false;
            snm.$(this.param.modalBg).fadeOut(this.param.speed);
            snm.$(this.param.modalId).find(this.param.modalContents).fadeOut(this.param.speed, function() {
                snm.$(self.param.modalId).hide();
                if (snm.util.navigator.is_ie) snm.$("embed:not(" + self.param.modalContents + " embed)").show()
            })
        }
        if (this.$el.filter("[" + this.param.dataReturnPosition + "]")[0]) {
            snm.$(document).scrollTop(this.param.scrollTop)
        }
    }
});
snm.module.model.MouseOnMenu = snm.Backbone.Model.extend({});
snm.module.view.MouseOnMenu = snm.Backbone.View.extend({
    param: {
        mouseOnMenuWrap: ".js-mouseOnMenuWrap",
        mouseOnMenuTrigger: ".js-mouseOnMenuTrigger",
        mouseOnMenuTarget: ".js-mouseOnMenuTarget",
        mouseOnMenuTargetMainImg: ".js-mouseOnMenuTargetMainImg",
        mouseOnMenuList: ".js-MouseOnMenuList",
        mouseOnMenuCloseButton: ".js-mouseOnMenuCloseButton",
        viewSpeed: 300,
        isActive: "is-active",
        isLeft: "is-left",
        itemImageSize: 201,
        colorPalettePadding: 5,
        colorPaletteWidth: 125,
        meinContentWidth: 330,
        isMouseLeave: false
    },
    events: {
        "mouseenter .js-mouseOnMenuTrigger": "mouseEvents",
        "mouseleave .js-mouseOnMenuTarget": "mouseEvents",
        "click .js-mouseOnMenuCloseButton": "clickEvents"
    },
    initialize: function() {
        var self = this,
            timer;
        snm.$(window).on("resize orientationchange", function() {
            clearTimeout(timer);
            timer = setTimeout(function() {
                var $activeArea = self.$el.find(self.param.mouseOnMenuWrap + "." + self.param.isActive),
                    relative = $activeArea.find(self.param.mouseOnMenuTrigger).parents("p").position(),
                    absolute = $activeArea.find(self.param.mouseOnMenuTrigger).parents("p").offset();
                if (!absolute) return;
                if (absolute.left * 1 + self.param.meinContentWidth > snm.$(window).width() * 1) {
                    $activeArea.find(self.param.mouseOnMenuTarget).addClass(self.param.isLeft).css({
                        right: relative.left - self.param.colorPalettePadding * 2 + "px",
                        left: ""
                    })
                } else {
                    $activeArea.find(self.param.mouseOnMenuTarget).removeClass(self.param.isLeft).css({
                        left: relative.left - self.param.colorPalettePadding * 2 + "px",
                        right: ""
                    })
                }
            }, self.param.viewSpeed);
            return
        });
        snm.$("body:not(.is-tablet), .is-tablet, .js-mouseOnMenuClose").on("click mouseover", function(e) {
            var hideFunc = function() {
                if (!snm.$(e.target).closest(self.param.mouseOnMenuTarget).closest(self.param.mouseOnMenuWrap + "." + self.param.isActive)[0]) {
                    self.hideFunc()
                }
            };
            hideFunc();
            setTimeout(hideFunc(), self.param.viewSpeed * 2);
            return
        }); {
            var $ul = snm.$(this.param.mouseOnMenuTarget).find("ul"),
                $img = snm.$(this.param.mouseOnMenuTargetMainImg);
            var itemImageSize = parseInt(snm.$(this.param.mouseOnMenuTrigger).css("width")) + parseInt($img.css("padding-left")) + parseInt($img.css("padding-right")) + parseInt($img.css("border-left-width")) + parseInt($img.css("border-right-width"));
            var colorPalettePadding = parseInt($ul.css("padding-right"));
            var colorPaletteWidth = parseInt($ul.css("width")) + this.param.colorPalettePadding + parseInt($ul.css("padding-left"));
            var meinContentWidth = this.param.itemImageSize + this.param.colorPaletteWidth + this.param.colorPalettePadding;
            this.param.itemImageSize = isNaN(itemImageSize) ? this.param.itemImageSize : itemImageSize;
            this.param.colorPalettePadding = isNaN(colorPalettePadding) ? this.param.colorPalettePadding : colorPalettePadding;
            this.param.colorPaletteWidth = isNaN(colorPaletteWidth) ? this.param.colorPaletteWidth : colorPaletteWidth;
            this.param.meinContentWidth = isNaN(meinContentWidth) ? this.param.meinContentWidth : meinContentWidth
        }
        if (snm.util.navigator.tablet) this.param.viewSpeed *= .5;
        this.model.on("change", this.render, this);
        this.$el.find(this.param.mouseOnMenuWrap).removeClass(this.param.isActive).find(this.param.mouseOnMenuTarget).css({
            display: "none"
        })
    },
    mouseEvents: function(e) {
        if (snm.util.navigator.tablet) return;
        var type = e.type === "mouseenter" ? "on" : "off";
        this.param.isMouseLeave = e.type === "mouseenter" ? false : true;
        this.param.$parent = snm.$(e.target).parents(this.param.mouseOnMenuWrap);
        this.model.set("status", type);
        return false
    },
    clickEvents: function(e) {
        if (!snm.util.navigator.tablet) return;
        var $target = snm.$(e.target);
        this.param.$parent = $target.parents(this.param.mouseOnMenuWrap);
        var type = this.param.$parent.attr("class").indexOf(this.param.isActive.replace(/\./g, "")) < 0 ? "on" : "off";
        var targeClass = $target.attr("class");
        if (targeClass.indexOf(this.param.mouseOnMenuCloseButton.replace(/\./g, "")) >= 0) {
            if (type === "on") {
                $target.html($target.data("openmes"))
            } else {
                $target.html($target.data("closemes"))
            }
        }
        this.model.set("status", type);
        return false
    },
    render: function() {
        if (this.model.get("status") === "on") {
            this.renderOver()
        } else {
            this.renderOut()
        }
    },
    renderOver: function() {
        var self = this,
            relative, absolute;
        if (self.param.$parent.hasClass(self.param.isActive)) return;
        this.timerClear();
        this.param.showTimer = setTimeout(function() {
            self.hideFunc();
            relative = self.param.$parent.find(self.param.mouseOnMenuTrigger).parents("p").position();
            absolute = self.param.$parent.find(self.param.mouseOnMenuTrigger).parents("p").offset();
            if (absolute.left * 1 + self.param.meinContentWidth > snm.$(window).width() * 1) {
                self.param.$parent.find(self.param.mouseOnMenuTarget).addClass(self.param.isLeft).css({
                    right: relative.left - self.param.colorPalettePadding * 2 + "px",
                    left: ""
                })
            } else {
                self.param.$parent.find(self.param.mouseOnMenuTarget).removeClass(self.param.isLeft).css({
                    left: relative.left - self.param.colorPalettePadding * 2 + "px",
                    right: ""
                })
            }
            self.param.$parent.addClass(self.param.isActive).find(self.param.mouseOnMenuTarget).css({
                top: relative.top - self.param.colorPalettePadding * 2 + "px"
            }).animate({
                opacity: "show",
                width: self.param.meinContentWidth
            }, {
                duration: self.param.viewSpeed,
                easing: "swing",
                complete: function() {
                    if (self.param.isMouseLeave) self.hideFunc();
                    self.param.isMouseLeave = false
                }
            }).find(self.param.mouseOnMenuList).css({
                width: 0
            }).animate({
                opacity: "show",
                width: self.param.colorPaletteWidth
            }, {
                duration: self.param.viewSpeed,
                easing: "swing"
            })
        }, this.param.viewSpeed)
    },
    renderOut: function() {
        var self = this;
        this.timerClear();
        this.param.hideTimer = setTimeout(function() {
            self.hideFunc()
        }, 0)
    },
    timerClear: function() {
        clearTimeout(this.param.showTimer);
        clearTimeout(this.param.hideTimer);
        this.model.set("status", "", {
            silent: true
        })
    },
    hideFunc: function() {
        var $activeArea = this.$el.find(this.param.mouseOnMenuWrap + "." + this.param.isActive),
            size = $activeArea.find(this.param.mouseOnMenuTrigger).parents("div").offset(),
            self = this;
        if (!size) return;
        if (snm.util.navigator.tablet) {
            var $target = snm.$(this.param.mouseOnMenuWrap + "." + this.param.isActive).find(this.param.mouseOnMenuCloseButton);
            $target.html($target.data("closemes"))
        }
        if (size.left * 1 + this.param.meinContentWidth > snm.$(window).width() * 1) {
            $activeArea.removeClass(this.param.isActive).find(self.param.mouseOnMenuTarget).animate({
                opacity: "hide",
                width: this.param.itemImageSize
            }, {
                duration: this.param.viewSpeed,
                easing: "swing",
                complete: function() {
                    $activeArea.find(self.param.mouseOnMenuTarget).removeClass(self.param.isLeft)
                }
            }).find(this.param.mouseOnMenuList).animate({
                width: 0
            }, {
                duration: this.param.viewSpeed,
                easing: "swing"
            })
        } else {
            $activeArea.removeClass(this.param.isActive).find(self.param.mouseOnMenuTarget).animate({
                opacity: "hide",
                width: this.param.itemImageSize
            }, {
                duration: this.param.viewSpeed,
                easing: "swing"
            }).find(this.param.mouseOnMenuList).animate({
                width: 0
            }, {
                duration: this.param.viewSpeed,
                easing: "swing"
            })
        }
        return
    }
});
snm.module.model.NameNear = snm.Backbone.Model.extend({});
snm.module.view.NameNear = snm.Backbone.View.extend({
    param: {
        nameNearTrigger: ".js-nameNearTrigger",
        nameNearModal: ".js-nameNearModal",
        nameNearBtn: ".js-nameNearBtn",
        nameNearContents: ".js-nameNearContents",
        nameNearSelect: ".js-nameNearSelect",
        nameNearModalId: "data-name-near-modal-id"
    },
    events: {
        "click .js-nameNearTrigger": "modalRun",
        "click .js-nameNearBtn": "modelChange",
        "change .js-nameNearSelect input": "selectIndex"
    },
    initialize: function() {
        var self = this;
        this.param = snm._.defaults({}, this.param);
        this.model.on("change", this.render, this);
        this.param.selectNum = this.$el.find(this.param.nameNearSelect + " input").index(this.$el.find(this.param.nameNearSelect + " input:checked"));
        if (this.$el.attr(this.param.nameNearModalId)) {
            this.param.modalId = "#" + this.$el.attr(this.param.nameNearModalId);
            snm.$(this.param.modalId + " " + this.param.nameNearSelect + " input").on("change", function(e) {
                self.selectIndexSp(e)
            });
            snm.$(this.param.modalId + " " + this.param.nameNearBtn).on("click", function() {
                self.modelChange()
            })
        } else {
            this.param.modalId = "#" + this.$el.find(this.param.nameNearModal).attr("id")
        }
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: this.param.modalId,
                clickDel: true
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: this.param.modalId,
                clickDel: true
            })
        }
        this.$el.find(this.param.nameNearContents).each(function(i) {
            self.param["contentData" + i] = snm.$(this).html()
        });
        this.$el.find(this.param.nameNearContents).not(":first").hide()
    },
    modalRun: function() {
        this.param.modal.render();
        return false
    },
    modelChange: function() {
        this.param.modal.renderClose();
        this.model.set("status", "change");
        return false
    },
    selectIndex: function(e) {
        this.param.selectNum = this.$el.find(this.param.nameNearSelect + " input").index(e.target)
    },
    selectIndexSp: function(e) {
        this.param.selectNum = snm.$(this.param.modalId + " " + this.param.nameNearSelect + " input").index(e.target)
    },
    render: function() {
        this.$el.find(this.param.nameNearContents).hide();
        this.$el.find(this.param.nameNearContents).eq(this.param.selectNum).show().html(this.param["contentData" + this.param.selectNum]);
        this.model.set("status", "def", {
            silent: true
        })
    }
});
snm.module.model.NumberDays = snm.Backbone.Model.extend({});
snm.module.view.NumberDays = snm.Backbone.View.extend({
    param: {
        numberDaysYear: ".js-numberDaysYear",
        numberDaysMonth: ".js-numberDaysMonth",
        numberDaysDay: ".js-numberDaysDay",
        numberDaysNameJP: ".js-numberDaysNameJP",
        numberDaysNameJPNum: ".js-numberDaysNameJPNum",
        meijiStart: 1867,
        taishouStart: 1911,
        shouwaStart: 1925,
        heiseiStart: 1988
    },
    events: {
        "change .js-numberDaysYear": "lastDay",
        "change .js-numberDaysMonth": "lastDay",
        "change .js-numberDaysNameJPNum": "lastDay",
        "change .js-numberDaysNameJP": "nameJPLastDay"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change:month", this.switchSelect, this);
        this.model.on("change:year", this.switchSelect, this);
        if (this.$el.find(this.param.numberDaysYear)[0] && this.$el.find(this.param.numberDaysMonth)[0] && this.$el.find(this.param.numberDaysDay)[0]) {
            if (!this.$el.find(this.param.numberDaysYear).val().match(/[0-9]/) || !this.$el.find(this.param.numberDaysMonth).val().match(/[0-9]/)) {
                this.$el.find(this.param.numberDaysDay + " option:gt(0)").remove();
                this.$el.find(this.param.numberDaysNameJPNum + " option:gt(0)").remove()
            }
        } else {
            this.events = {}
        }
    },
    lastDay: function() {
        var data, year, month;
        if (this.$el.find(this.param.numberDaysNameJP).length > 0) {
            this.nameJPLastDay(false);
            year = this.param.JPLastYear
        } else {
            year = this.$el.find(this.param.numberDaysYear).val()
        }
        month = this.$el.find(this.param.numberDaysMonth).val();
        if (this.$el.find(this.param.numberDaysYear).prop("selectedIndex") == 0 || this.$el.find(this.param.numberDaysMonth).prop("selectedIndex") == 0 || this.$el.find(this.param.numberDaysNameJPNum).prop("selectedIndex") == 0) {
            this.$el.find(this.param.numberDaysDay + " option:gt(0)").remove();
            this.model.set("year", year, {
                silent: true
            });
            this.model.set("month", month, {
                silent: true
            });
            return false
        }
        this.model.set("year", year);
        this.model.set("month", month)
    },
    switchSelect: function() {
        var date = new Date(this.model.get("year"), this.model.get("month"), 0);
        this.param.lastDay = date.getDate();
        this.param.dayNum = this.$el.find(this.param.numberDaysDay + " option").length;
        this.render()
    },
    render: function() {
        var num = this.param.lastDay - (this.param.dayNum - 1),
            obj = "",
            i, date;
        if (num > 0) {
            for (i = 0; i < Math.abs(num); i++) {
                obj += "<option value='" + (this.param.dayNum + i) + "'>" + (this.param.dayNum + i) + "</option>"
            }
            this.$el.find(this.param.numberDaysDay).append(obj)
        } else {
            for (i = 0; i < Math.abs(num); i++) {
                this.$el.find(this.param.numberDaysDay + " option").eq(-1).remove()
            }
        }
        this.$el.find(this.param.numberDaysDay + " option").eq(0).prop("selected", true)
    }
});
snm.module.model.NumberSeparate = snm.Backbone.Model.extend({});
snm.module.view.NumberSeparate = snm.Backbone.View.extend({
    events: {
        change: "chengeText"
    },
    initialize: function() {
        this.render(this.$el.text())
    },
    render: function(text) {
        if (text.length > 3 && snm.$.isNumeric(text)) {
            var commaText = this.textSepatate(text);
            this.$el.text(commaText)
        }
    },
    textSepatate: function(text) {
        text = text.toString();
        var textNum = text.length,
            commaText = "",
            i;
        for (i = textNum - 1; i >= 0; i--) {
            commaText += text.charAt(textNum - 1 - i);
            if (i % 3 == 0 && i != 0) {
                commaText += ","
            }
        }
        return commaText
    },
    chengeText: function() {
        this.render(this.$el.text())
    }
});
snm.module.view.OpenWindow = snm.Backbone.View.extend({
    param: {
        options: "location=no, menubar=no, status=no, scrollbars=yes, resizable=yes, toolbar=no",
        openWidth: 912,
        openHeight: 550,
        openWindowName: "popup",
        dataWindowWidth: "data-window-width",
        dataWindowHeight: "data-window-height",
        dataWindowName: "data-window-name"
    },
    events: {
        click: "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        if (this.$el.attr(this.param.dataWindowName) && this.$el.attr(this.param.dataWindowName) !== "") {
            this.param.openWindowName = this.$el.attr(this.param.dataWindowName)
        }
        if (this.$el.attr(this.param.dataWindowWidth) && this.$el.attr(this.param.dataWindowWidth) !== "") {
            this.param.openWidth = this.$el.attr(this.param.dataWindowWidth)
        }
        if (this.$el.attr(this.param.dataWindowHeight) && this.$el.attr(this.param.dataWindowHeight) !== "") {
            this.param.openHeight = this.$el.attr(this.param.dataWindowHeight)
        }
    },
    render: function() {
        var options = this.param.options,
            openWidth = this.param.openWidth,
            openHeight = this.param.openHeight;
        if (window.screen.width > openWidth) {
            options += ", left=" + (window.screen.width - openWidth) / 2
        } else {
            openWidth = window.screen.width
        }
        if (window.screen.height > openHeight) {
            options += ", top=" + (window.screen.height - openHeight) / 2
        } else {
            openHeight = window.screen.height
        }
        options += ", width=" + openWidth + ", height=" + openHeight;
        window.open(this.$el.attr("href"), this.param.openWindowName, options);
        return false
    }
});
snm.module.model.oneWayAccordion = snm.Backbone.Model.extend({});
snm.module.collection.oneWayAccordion = snm.Backbone.Collection.extend({});
snm.module.view.oneWayAccordion = snm.Backbone.View.extend({
    param: {
        oneWayAccordionWrap: ".js-oneWayAccordionWrap",
        oneWayAccordionOpen: ".js-oneWayAccordionOpen",
        oneWayAccordionClose: ".js-oneWayAccordionClose",
        oneWayAccordionBody: ".js-oneWayAccordionBody",
        viewSpeed: 300
    },
    events: {
        "click .js-oneWayAccordionOpen": "accordionOpen",
        "click .js-oneWayAccordionClose": "accordionClose"
    },
    initialize: function() {
        this.$el.find(this.param.oneWayAccordionBody).slideUp(0)
    },
    accordionOpen: function(e) {
        snm.$(e.target).parents(this.param.oneWayAccordionWrap).find(this.param.oneWayAccordionBody).slideDown(this.param.viewSpeed);
        return false
    },
    accordionClose: function(e) {
        snm.$(e.target).parents(this.param.oneWayAccordionWrap).find(this.param.oneWayAccordionBody).slideUp(this.param.viewSpeed);
        return false
    }
});
snm.module.model.PasswordRouse = snm.Backbone.Model.extend({});
snm.module.view.PasswordRouse = snm.Backbone.View.extend({
    param: {
        passwordRouseTrigger: ".js-passwordRouseTrigger",
        passwordRouseClose: ".js-passwordRouseClose",
        passwordRouseWindow: ".js-passwordRouseWindow",
        passwordRouseWindowSp: ".js-passwordRouseWindowSp",
        passwordRouseAccordion: ".js-passwordRouseAccordion",
        passwordRouseAddIconTarget: ".js-passwordRouseAddIconTarget",
        iconClass: "mod-header_side_menu_noticeIcon",
        isActive: "is-active",
        speed: 300
    },
    events: {
        "click .js-passwordRouseTrigger": "modelChange",
        "click .js-passwordRouseClose": "renderClose"
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        this.cookieCheck()
    },
    cookieCheck: function() {
        this.param.cookieDisplayFlag = snm.module.cookie.get("omni.osd.common.password_balloon_display_flag");
        this.param.cookieSoftFlag = snm.module.cookie.get("omni.osd.common.password_soft_flag");
        if (this.param.cookieSoftFlag !== "0") {
            this.$el.find(this.param.passwordRouseTrigger).show();
            this.$el.find(this.param.passwordRouseAddIconTarget).addClass(this.param.iconClass);
            if (this.param.cookieDisplayFlag === "1" || !this.param.cookieDisplayFlag) {
                this.$el.find(this.param.passwordRouseWindow).addClass(this.param.isActive);
                this.$el.find(this.param.passwordRouseAccordion).show()
            } else {
                this.$el.find(this.param.passwordRouseWindow).removeClass(this.param.isActive);
                this.$el.find(this.param.passwordRouseAccordion).hide()
            }
        } else {
            this.$el.find(this.param.passwordRouseWindowSp).remove()
        }
    },
    cookieSet: function(val) {
        var param = {
            path: "/",
            domain: snm.cookie.domain01,
            "max-age": 60 * 60 * 24 * 30
        };
        snm.module.cookie.set("omni.osd.common.password_balloon_display_flag", val, param);
        this.param.cookieDisplayFlag = snm.module.cookie.get("omni.osd.common.password_balloon_display_flag")
    },
    modelChange: function() {
        this.model.set("status", true);
        return false
    },
    render: function() {
        var self = this,
            isVisible;
        if (this.$el.find(this.param.passwordRouseWindow)[0]) {
            isVisible = this.$el.find(this.param.passwordRouseWindow).is(":visible")
        } else {
            isVisible = this.$el.find(this.param.passwordRouseAccordion).is(":visible")
        }
        if (isVisible) {
            this.renderClose()
        } else {
            this.$el.find(this.param.passwordRouseWindow).fadeIn(this.param.speed);
            this.$el.find(this.param.passwordRouseAccordion).slideDown(this.param.speed);
            this.cookieSet(1);
            this.model.set("status", null, {
                silent: true
            })
        }
    },
    renderClose: function() {
        this.$el.find(this.param.passwordRouseWindow).fadeOut(this.param.speed);
        this.$el.find(this.param.passwordRouseAccordion).slideUp(this.param.speed);
        this.cookieSet(0);
        this.model.set("status", null, {
            silent: true
        });
        return false
    }
});
snm.module.placeholder = {
    init: function(el) {
        var ua = snm.util.navigator,
            self = this;
        this.el = el;
        this.fakeInput = "js-placeholderFake";
        this.value = this.el.attr("placeholder");
        if (ua.is_ie && ua.ie_version === "8" || ua.ie_version === "9") {
            this.render();
            this.focusIn();
            this.focusOut();
            var $fakeInput, resize = snm._.debounce(function() {
                snm.$("input[placeholder]").each(function() {
                    $fakeInput = snm.$(this).prev("." + self.fakeInput);
                    $fakeInput.width(snm.$(this).outerWidth() - parseInt(snm.$(this).css("paddingLeft"), 10) + "px");
                    if (snm.$(this).val().length > 0) $fakeInput.hide()
                })
            }, 50);
            snm.$(window).off("resize.placeholder").on("resize.placeholder", resize)
        }
    },
    render: function() {
        var lineHeight = this.el.is("textarea") ? parseInt(this.el.css("fontSize"), 10) * 2 + "px" : this.el.outerHeight() + "px",
            $input = snm.$("<span></span>", {
                text: this.value,
                addClass: this.fakeInput + " fakePlaceholder",
                css: {
                    "font-size": this.el.css("fontSize"),
                    "line-height": lineHeight,
                    width: this.el.outerWidth() - parseInt(this.el.css("paddingLeft"), 10) + "px",
                    height: this.el.outerHeight() + "px",
                    overflow: "hidden",
                    "padding-left": this.el.css("paddingLeft")
                },
                on: {
                    click: function() {
                        snm.$(this).next("input[placeholder]").focus()
                    }
                },
                insertBefore: this.el
            });
        if (this.el.val().length > 0) $input.hide()
    },
    focusIn: function() {
        var self = this;
        this.el.on("focus", function() {
            snm.$(this).prev("." + self.fakeInput).hide()
        })
    },
    focusOut: function() {
        var self = this;
        this.el.on("blur.placeholder", function() {
            if (snm.$(this).val().length === 0) {
                snm.$(this).prev("." + self.fakeInput).show()
            }
        })
    },
    replaceVal: function(el, newVal) {
        var ua = snm.util.navigator;
        if (ua.is_ie && ua.ie_version === "8" || ua.ie_version === "9") {
            el.find("span.js-placeholderFake").text(newVal)
        }
    }
};
snm.module.model.PointSetting = snm.Backbone.Model.extend({});
snm.module.view.PointSetting = snm.Backbone.View.extend({
    param: {
        pointSettingSet: ".js-pointSettingSet",
        pointSettingItem: ".js-pointSettingItem",
        pointSettingTarget: ".js-pointSettingTarget",
        pointSettingNot: "js-pointSettingNot"
    },
    events: {
        "change input[type='radio']": "modelChange",
        "change .js-pointSettingSet": "settingSet"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change:checked", this.render, this);
        this.model.on("change:setItem", this.renderItem, this);
        this.param.$btnCheck = this.$el.find("input[type='radio']:checked[data-point-target]");
        if (this.$el.find(this.param.pointSettingSet).prop("checked")) {
            this.settingSet()
        }
        if (this.param.$btnCheck[0]) {
            this.modelChange()
        }
    },
    modelChange: function(e) {
        var $target = e ? snm.$(e.target) : this.param.$btnCheck;
        this.param.targetClass = $target.attr("data-point-target");
        this.model.set("checked", $target.prop("checked"))
    },
    settingSet: function(e) {
        var $target = e ? snm.$(e.target) : this.$el.find(this.param.pointSettingSet);
        this.model.set("setItem", $target.prop("checked"))
    },
    render: function() {
        this.$el.find(this.param.pointSettingTarget).hide();
        if (this.model.get("setItem") && this.param.targetClass != this.param.pointSettingNot) {
            this.$el.find("." + this.param.targetClass).show()
        }
        this.model.set("checked", false, {
            silent: true
        })
    },
    renderItem: function() {
        if (this.model.get("setItem")) {
            this.$el.find(this.param.pointSettingItem).show();
            this.render()
        } else {
            this.$el.find(this.param.pointSettingItem).hide();
            this.$el.find(this.param.pointSettingTarget).hide()
        }
    }
});
snm.module.view.PopupInput = snm.Backbone.View.extend({
    param: {
        popupInputText: ".js-popupInputText",
        popupInputHidden: ".js-popupInputHidden",
        popupInputTarget: ".js-popupInputTarget",
        popupWindow: ".js-popupWindow"
    },
    events: {
        "click .js-popupInputSubmit": "render",
        "click .js-popupInputActive": "renderPopup"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var strText = this.$el.find(this.param.popupInputHidden).val();
        this.$el.find(this.param.popupInputTarget).children("b").text(strText);
        this.param.popup = new snm.module.view.Popup({
            el: this.$el,
            model: new snm.module.model.Popup({})
        });
        if (snm.util.navigator.is_iOS) this.param.cursorStyle = snm.$("html").css("cursor")
    },
    renderPopup: function() {
        var self = this;
        this.$el.find(this.param.popupInputText).val(this.$el.find(this.param.popupInputHidden).val());
        snm.$("html").off("click.closePopup").on("click.closePopup", function(e) {
            self.renderClose(e)
        });
        if (snm.util.navigator.is_iOS) snm.$("html").css("cursor", "pointer");
        this.param.popup.renderDisplay();
        return false
    },
    render: function() {
        var strText = this.$el.find(this.param.popupInputText).val();
        this.$el.find(this.param.popupInputTarget).children("b").text(strText);
        this.$el.find(this.param.popupInputHidden).val(strText);
        this.param.popup.renderClose();
        return false
    },
    renderClose: function(e) {
        if (!snm.$(e.target).closest(this.param.popupWindow)[0]) {
            snm.$("html").off("click.closePopup");
            if (snm.util.navigator.is_iOS) snm.$("html").css("cursor", this.param.cursorStyle);
            this.param.popup.renderClose()
        }
    }
});
snm.module.model.Popup = snm.Backbone.Model.extend({});
snm.module.view.Popup = snm.Backbone.View.extend({
    param: {
        popupActive: ".js-popupActive",
        popupWindow: ".js-popupWindow",
        ajaxShopingListProductsBtn: ".js-ajaxShopingListProductsBtn",
        popupWindowWrapper: "js-popupWindowWrapper",
        popupClose: ".js-popupClose",
        popupSpeed: 300,
        popupMoveTop: 5
    },
    events: {
        "click .js-popupActive": "clickTrigger",
        "click .js-popupClose": "closeClick",
        "mouseover .js-popupWindow": "mouseOn",
        "mouseleave .js-popupWindow": "mouseOut"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var ua = snm.util.navigator,
            self = this;
        if (ua.tablet || ua.smartphone) {
            this.$el.find(this.param.popupClose).css("display", "block")
        }
        this.model.on("change", this.render, this);
        this.$el.find(this.param.popupWindow).css({
            opacity: 0,
            display: "none"
        }).wrap("<div class=" + this.param.popupWindowWrapper + "></div>");
        snm.$(document).on("keydown", function(e) {
            if (e.keyCode == 27) {
                self.renderClose()
            }
        })
    },
    clickTrigger: function() {
        this.model.set("click", true);
        return false
    },
    render: function() {
        this.renderDisplay();
        this.timer()
    },
    renderDisplay: function() {
        var $popup = this.$el.find(this.param.popupWindow),
            $popupWrap = this.$el.find("." + this.param.popupWindowWrapper),
            windowWid = snm.$(document).width(),
            popupWid;
        $popup.css("display", "block");
        if (this.$el.find(this.param.ajaxShopingListProductsBtn)[0]) {
            $popup.css("left", this.$el.find(this.param.ajaxShopingListProductsBtn).outerWidth() / 2 + "px")
        }
        $popupWrap.css({
            position: "relative",
            top: "10px"
        });
        $popup.animate({
            opacity: "1"
        }, this.param.popupSpeed);
        $popupWrap.animate({
            top: "-" + this.param.popupMoveTop + "px"
        }, this.param.popupSpeed);
        popupWid = $popup.offset().left + $popup.outerWidth();
        if (windowWid <= popupWid) {
            $popupWrap.css("left", windowWid - popupWid - 20 + "px")
        } else if ($popup.offset().left <= 0) {
            $popupWrap.css("left", Math.abs($popup.offset().left) + 20 + "px")
        }
    },
    renderClose: function() {
        var self = this;
        clearTimeout(this.param.timerID);
        this.$el.find(this.param.popupWindow).animate({
            opacity: 0
        }, this.param.popupSpeed, function() {
            self.$el.find(self.param.popupWindow).css("display", "none");
            self.$el.find("." + self.param.popupWindowWrapper).animate({
                top: 0
            }, self.param.popupSpeed);
            self.model.set("click", false, {
                silent: true
            })
        })
    },
    closeClick: function() {
        this.model.set("click", false, {
            silent: true
        });
        this.renderClose();
        return false
    },
    mouseOn: function() {
        clearTimeout(this.param.timerID);
        if (this.model.get("click") === true) {
            this.$el.find(this.param.popupWindow).stop().animate({
                opacity: "1"
            }, this.param.popupSpeed)
        }
    },
    mouseOut: function() {
        if (this.model.get("click")) {
            this.timer()
        }
    },
    timer: function() {
        var ua = snm.util.navigator,
            self = this;
        if (!ua.tablet && !ua.smartphone) {
            this.param.timerID = setTimeout(function() {
                self.renderClose()
            }, 2e3)
        }
    }
});
snm.module.model.PostagePart = snm.Backbone.Model.extend({});
snm.module.view.PostagePart = snm.Backbone.View.extend({
    param: {
        postagePartBtnStore: ".js-postagePartBtnStore",
        postagePartBtnDestination: ".js-postagePartBtnDestination",
        postagePartSendIntax: ".js-postagePartSendIntax",
        postagePartSendNotax: ".js-postagePartSendNotax",
        postagePartStoreArea: ".js-postagePartStoreArea",
        postagePartDestinationArea: ".js-postagePartDestinationArea",
        storeFeeinTax: "deliverystoreFeeinTax",
        storeFeenoTax: "deliverystoreFeenoTax",
        destinationFeeinTax: "deliverydestinationFeeinTax",
        destinationFeenoTax: "deliverydestinationFeenoTax",
        sndIntax: "snd_chrg_intax",
        sndNotax: "snd_chrg_notax",
        addActiveTarget: ".js-addActiveTarget",
        isChecked: "is-checked",
        noCalcCharge: "js-noCalcCharge",
        amoutInTax: ".js-amoutInTax",
        amoutNoTax: ".js-amoutNoTax",
        purchaseTotal: ".js-purchaseTotal",
        storereceiptAmoutNoTax: "storereceiptAmoutNoTax",
        storereceiptAmoutInTax: "storereceiptAmoutInTax",
        deliverypaymentAmountNoTax: "deliverypaymentAmountNoTax",
        homedeliveryAmountNoTax: "homedeliveryAmountNoTax",
        homedeliveryAmountInTax: "homedeliveryAmountInTax",
        deliverypaymentAmountInTax: "deliverypaymentAmountInTax",
        amoutInTaxHidden: "cart_ttlchrgintx",
        amoutNoTaxHidden: "cart_ttlchrgntx",
        purchaseTotalHidden: "pay_ttl_gk_intax",
        deliverystoreTax: "deliverystoreTax",
        deliverydestinationTax: "deliverydestinationTax",
        postagePartTax: ".js-postagePartTax"
    },
    events: {
        "change [class*='js-postagePartBtn']": "modelChange"
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        this.param.isCalcCharge = !this.$el.hasClass(this.param.noCalcCharge);
        if (this.param.isCalcCharge) {
            this.getValue()
        }
    },
    getValue: function() {
        this.param.hiddenObj = {
            storInTax: this.$el.find("[name='" + this.param.storeFeeinTax + "']").val(),
            storNoTax: this.$el.find("[name='" + this.param.storeFeenoTax + "']").val(),
            destinationInTax: this.$el.find("[name='" + this.param.destinationFeeinTax + "']").val(),
            destinationNoTax: this.$el.find("[name='" + this.param.destinationFeenoTax + "']").val(),
            storereceiptAmoutInTax: this.$el.find("[name='" + this.param.storereceiptAmoutInTax + "']").val(),
            storereceiptAmoutNoTax: this.$el.find("[name='" + this.param.storereceiptAmoutNoTax + "']").val(),
            deliverypaymentAmountNoTax: this.$el.find("[name='" + this.param.deliverypaymentAmountNoTax + "']").val(),
            homedeliveryAmountInTax: this.$el.find("[name='" + this.param.homedeliveryAmountInTax + "']").val(),
            homedeliveryAmountNoTax: this.$el.find("[name='" + this.param.homedeliveryAmountNoTax + "']").val(),
            deliverypaymentAmountInTax: this.$el.find("[name='" + this.param.deliverypaymentAmountInTax + "']").val(),
            deliverydestinationTax: this.$el.find("[name='" + this.param.deliverydestinationTax + "']").val(),
            deliverystoreTax: this.$el.find("[name='" + this.param.deliverystoreTax + "']").val()
        }
    },
    modelChange: function(e) {
        var type = "";
        if (snm.$(e.target).is(this.param.postagePartBtnStore)) type = "store";
        if (snm.$(e.target).is(this.param.postagePartBtnDestination)) type = "destination";
        if (type === "") return false;
        this.model.set("type", type)
    },
    render: function() {
        if (this.param.isCalcCharge) {
            var intax, notax, amoutInTax, amoutNoTax, purchaseTotal, tax;
            if (this.model.get("type") === "store") {
                intax = this.param.hiddenObj.storInTax;
                notax = this.param.hiddenObj.storNoTax;
                amoutInTax = this.param.hiddenObj.storereceiptAmoutInTax;
                amoutNoTax = this.param.hiddenObj.storereceiptAmoutNoTax;
                purchaseTotal = this.param.hiddenObj.deliverypaymentAmountNoTax;
                tax = this.param.hiddenObj.deliverystoreTax
            }
            if (this.model.get("type") === "destination") {
                intax = this.param.hiddenObj.destinationInTax;
                notax = this.param.hiddenObj.destinationNoTax;
                amoutInTax = this.param.hiddenObj.homedeliveryAmountInTax;
                amoutNoTax = this.param.hiddenObj.homedeliveryAmountNoTax;
                purchaseTotal = this.param.hiddenObj.deliverypaymentAmountInTax;
                tax = this.param.hiddenObj.deliverydestinationTax
            }
            this.$el.find("[name='" + this.param.sndIntax + "']").val(intax);
            this.$el.find("[name='" + this.param.sndNotax + "']").val(notax);
            this.$el.find("[name='" + this.param.amoutInTaxHidden + "']").val(amoutInTax);
            this.$el.find("[name='" + this.param.amoutNoTaxHidden + "']").val(amoutNoTax);
            this.$el.find("[name='" + this.param.purchaseTotalHidden + "']").val(purchaseTotal);
            intax = this.textSepatate(intax);
            notax = this.textSepatate(notax);
            amoutInTax = this.textSepatate(amoutInTax);
            amoutNoTax = this.textSepatate(amoutNoTax);
            purchaseTotal = this.textSepatate(purchaseTotal);
            tax = this.textSepatate(tax);
            this.$el.find(this.param.postagePartSendIntax).text(intax);
            this.$el.find(this.param.postagePartSendNotax).text(notax);
            this.$el.find(this.param.amoutInTax).text(amoutInTax);
            this.$el.find(this.param.amoutNoTax).text(amoutNoTax);
            this.$el.find(this.param.purchaseTotal).text(purchaseTotal);
            this.$el.find(this.param.postagePartTax).text(tax)
        }
        var $area;
        if (this.model.get("type") === "store") {
            $area = this.$el.find(this.param.postagePartStoreArea)
        } else if (this.model.get("type") === "destination") {
            $area = this.$el.find(this.param.postagePartDestinationArea)
        }
        if ($area.find("input")[0] && $area.find("input:checked").length === 0) {
            $area.find("input").eq(0).prop("checked", true).trigger("change")
        }
        this.model.set("type", "", {
            silent: true
        })
    },
    textSepatate: function(num) {
        var text = num + "",
            textNum = text.length,
            commaText = "",
            i;
        for (i = textNum - 1; i >= 0; i--) {
            commaText += text.charAt(textNum - 1 - i);
            if (i % 3 == 0 && i != 0) {
                commaText += ","
            }
        }
        return commaText
    }
});
snm.module.PressTwice = snm.Backbone.View.extend({
    param: {
        clickFlag: false
    },
    events: {
        click: "render"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var self = this,
            ua = snm.util.navigator;
        if (ua.tablet || ua.smartphone) {
            snm.$(window).on("pageshow", function() {
                self.clearStat()
            })
        } else {
            snm.$(window).on("unload", function() {
                self.clearStat()
            })
        }
    },
    render: function() {
        var self = this;
        if (this.$el[0].nodeName === "A") {
            if (this.param.clickFlag) {
                return false
            }
        } else {
            setTimeout(function() {
                self.$el.attr("disabled", true)
            }, 10)
        }
        this.param.clickFlag = true
    },
    clearStat: function() {
        if (this.param.clickFlag) {
            this.$el.attr("disabled", false);
            this.param.clickFlag = false
        }
    }
});
snm.module.print = {
    init: function($el) {
        if (snm.util.navigator.android) {
            $el.hide();
            return
        }
        $el.on("click", function() {
            window.print()
        })
    }
};
snm.module.model.ProductInfo = snm.Backbone.Model.extend({});
snm.module.view.ProductInfo = snm.Backbone.View.extend({
    param: {
        productInfoQuantity: ".js-productInfoQuantity",
        productInfoDefault: ".js-productInfoDefault,.js-productInfoTotalPriceRange",
        productInfoPrice: ".js-productInfoPrice",
        productInfoPriceTax: ".js-productInfoPriceTax",
        productInfoPriceNum: ".js-productInfoPriceNum",
        productInfoPriceStyle: ".js-productInfoPriceStyle",
        productInfoTotalPrice: ".js-productInfoTotalPrice",
        productInfoTotalPriceTax: ".js-productInfoTotalPriceTax",
        productInfoRegular: ".js-productInfoRegular",
        productInfoRegularBtn: ".js-productInfoRegularBtn",
        productInfoRegularMonth: ".js-productInfoRegularMonth",
        productInfoRegularPrice: ".js-productInfoRegularPrice",
        productInfoRegularPriceTax: ".js-productInfoRegularPriceTax",
        productInfoSku01: ".js-productInfoSku01",
        productInfoSkuThumbnail: ".js-productInfoSkuThumbnail",
        productInfoSkuNoStock: ".js-productInfoSkuNoStock",
        productInfoBfrNum: ".js-productInfoBfrNum",
        productInfoBfrTax: ".js-productInfoBfrTax",
        productInfoBfrNotax: ".js-productInfoBfrNotax",
        productInfoBfrPriceStyle: ".js-productInfoBfrPriceStyle",
        productInfoCampaignNum: ".js-productInfoCampaignNum",
        productInfoCampaignTax: ".js-productInfoCampaignTax",
        productInfoCampaignNotax: ".js-productInfoCampaignNotax",
        productInfoCampaignPriceStyle: ".js-productInfoCampaignPriceStyle",
        productInfoDiscRate: ".js-productInfoDiscRate",
        productInfoSpecialIntax: ".js-productInfoSpecialIntax",
        productInfoPostageInfo: ".js-productInfoPostageInfo",
        productInfoPostageWrap: ".js-productInfoPostageWrap",
        productInfoNanacoPoint: ".js-productInfoNanacoPoint",
        productInfoNanacoPeriod: ".js-productInfoNanacoPeriod",
        productInfoSeleReport: ".js-productInfoSeleReport",
        productInfoCampaignPeriod: ".js-productInfoCampaignPeriod",
        productInfoSaleStartDt: ".js-productInfoSaleStartDt",
        productInfoSaleDate: ".js-productInfoSaleDate",
        productInfoResvSaleDate: ".js-productInfoResvSaleDate",
        productInfoPopIcons: ".js-productInfoPopIcons",
        productInfoItemIcons: ".js-productInfoItemIcons",
        productInfoOptionIcons: ".js-productInfoOptionIcons",
        tmpProductInfoIconsImg: "#tmpProductInfoIconsImg",
        productInfoSetName: ".js-productInfoSetName",
        productInfoMultiNum: ".js-productInfoMultiNum",
        productInfoMultiTitle: ".js-productInfoMultiTitle",
        productInfoMultiPeriod: ".js-productInfoMultiPeriod",
        productInfoMultiBtn: ".js-productInfoMultiBtn",
        productInfoMultiLink: ".js-productInfoMultiLink",
        productInfoSetTitle: ".js-productInfoSetTitle",
        productInfoSetPeriod: ".js-productInfoSetPeriod",
        productInfoSetBtn: ".js-productInfoSetBtn",
        productInfoSetLink: ".js-productInfoSetLink",
        productInfoPostageFree: ".js-productInfoPostageFree",
        productInfoPostageSolo: ".js-productInfoPostageSolo",
        productInfoPostageIncluded: ".js-productInfoPostageIncluded",
        productInfoColor: ".js-productInfoColor",
        productInfoSku02: ".js-productInfoSku02",
        productInfoSku03: ".js-productInfoSku03",
        productInfoImageDesc: ".js-productInfoImageDesc",
        productInfoViewerArea: ".js-productInfoViewerArea",
        productInfoViewerSlider: ".js-productInfoViewerSlider",
        productInfoViewerSliderWrap: ".js-productInfoViewerSliderWrap",
        productInfoViewerSliderItem: ".js-productInfoViewerSliderItem",
        productInfoViewerDescText: ".js-productInfoViewerDescText",
        productInfoViewerThumbnail: ".js-productInfoViewerThumbnail",
        productInfoViewerThumbnailWrap: ".js-productInfoViewerThumbnailWrap",
        productInfoViewerThumbnailZoom: ".js-productInfoViewerThumbnailZoom",
        productInfoThumbnailList: "#productInfoThumbnailList",
        productInfoThumbnailListZoom: "#productInfoThumbnailListZoom",
        productInfoViewerScaleBase: ".js-productInfoViewerScaleBase",
        productInfoViewerScaleArea: ".js-productInfoViewerScaleArea",
        productInfoViewerScaleImg: ".js-productInfoViewerScaleImg",
        productInfoViewerSliderPrev: ".js-productInfoViewerSliderPrev",
        productInfoViewerSliderNext: ".js-productInfoViewerSliderNext",
        productInfoViewerLens: ".js-productInfoViewerLens",
        productInfoViewerExpand: ".js-productInfoViewerExpand",
        productInfoCartBtn: ".js-productInfoCartBtn",
        productInfoMedicineBtn: ".js-productInfoMedicineBtn",
        productInfoMedicineText: ".js-productInfoMedicineText",
        productInfoMedicineCheck: ".js-productInfoMedicineCheck",
        productInfoDelWrap: ".js-productInfoDelWrap",
        productInfoItemNum: ".js-productInfoItemNum",
        productInfoBalloon: ".js-productInfoBalloon",
        productInfoBalloonTarget: ".js-productInfoBalloonTarget",
        productInfoBalloonTrigger: ".js-productInfoBalloonTrigger",
        productInfoBalloonClose: ".js-productInfoBalloonClose",
        productInfoBuyComment: ".js-productInfoBuyComment",
        productInfoIcon: ".js-productInfoIcon",
        productInfoWarning: ".js-productInfoWarning",
        productInfoWarningJoin: ".js-productInfoWarningJoin",
        productInfoWarningSku1: ".js-productInfoWarningSku1",
        productInfoWarningSku2: ".js-productInfoWarningSku2",
        productInfoZoomModal: ".js-productInfoZoomModal",
        productInfoSkuValue: ".js-productInfoSkuValue",
        modalZoom: "#js-modalZoom",
        ajaxLoadingWrap: ".js-ajaxLoadingWrap",
        ajaxStockInfoSku: ".js-ajaxStockInfoSku",
        ajaxDeliveryDate: ".js-ajaxDeliveryDate",
        ajaxDeliveryDateBtn: ".js-ajaxDeliveryDateBtn",
        ajaxDeliveryDateErrSkuMsg: ".js-ajaxDeliveryDateErrSkuMsg",
        ajaxDeliveryDateErrZipMsg: ".js-ajaxDeliveryDateErrZipMsg",
        ajaxDeliveryDateAddressWrap: ".js-ajaxDeliveryDateAddressWrap",
        ajaxDeliveryDateHurry: ".js-ajaxDeliveryDateHurry",
        ajaxDeliveryDateHurryText: ".js-ajaxDeliveryDateHurryText",
        ajaxDeliveryDateStoreDate: ".js-ajaxDeliveryDateStoreDate",
        ajaxDeliveryDateStoreTime: ".js-ajaxDeliveryDateStoreTime",
        ajaxDeliveryDateSendDate: ".js-ajaxDeliveryDateSendDate",
        ajaxDeliveryDateSendTime: ".js-ajaxDeliveryDateSendTime",
        ajaxShopingListProductsBtn: ".js-ajaxShopingListProductsBtn",
        productInfoTreatShopsBtn: ".js-productInfoTreatShopsBtn",
        productInfoTreatShopsAlertBtn: ".js-productInfoTreatShopsAlertBtn",
        isActive: "is-active",
        isSelected: "is-selected",
        isDisabled: "is-disabled",
        dataDeliveryDateSku: "data-delivery-date-sku",
        dataShoppingListSku: "data-shohn_cd",
        itemIconShowNum: 6,
        popIconShowNum: 10,
        speed: 400,
        easing: "linear",
        count: 0,
        zoomIndex: 0,
        swipeSpeed: 200,
        swipeEasing: "linear",
        swipeTriggerNum: 50,
        tmpOptionIcons: "",
        thumbnailTmp: "",
        thumbnailTmpZoom: "",
        defData: {},
        productInfoPointArea: ".item-information-0040",
        productInfoOptionArea: ".item-information-0050",
        productInfoViewerThumbnailDefault: ".js-productInfoViewerThumbnailDefault",
        productInfoAttentionPopup: ".js-productInfoAttentionPopup",
        productInfoDefaultBtn: "js-productInfoDefaultBtn",
        defaultBtnState: "",
        productInfoAttentionRegular: ".js-productInfoAttentionRegular",
        productInfoAttentionMedicineText: ".js-productInfoAttentionMedicineText",
        isTextRed: "is-textRed",
        productInfoStockStatus: ".js-productInfoStockStatus",
        productInfoShoppingListBtn: ".js-productInfoShoppingListBtn",
        productInfoShoppingListAlertBtn: ".js-productInfoShoppingListAlertBtn",
        ajaxShopingListProductsMsg: ".js-ajaxShopingListProductsMsg",
        isDsabled: "is-disabled",
        productInfoCouponWrap: ".js-productInfoCouponWrap",
        productInfoCouponText: ".js-productInfoCouponText"
    },
    events: {
        "change .js-productInfoQuantity": "changeQuantity",
        "change .js-productInfoRegular": "changeRegular",
        "change .js-productInfoSku01": "changeSkuSelect",
        "change .js-productInfoSku02": "changeSkuSelect",
        "change .js-productInfoSku03": "changeSku3",
        "change .js-productInfoMedicineCheck": "changeMedicine",
        "click .js-productInfoSkuThumbnail": "changeThumbnail",
        "click .js-productInfoViewerSliderPrev": "prevAction",
        "click .js-productInfoViewerSliderNext": "nextAction",
        "click .js-productInfoViewerThumbnail": "thumbnailAction",
        "click .js-productInfoBalloonTrigger": "renderBalloon",
        "click .js-productInfoBalloonClose": "renderBalloonClose",
        click: "renderBalloonClose",
        "click .js-productInfoViewerSliderItem, .js-productInfoViewerLens": "renderModalZoom",
        "click .js-productInfoViewerThumbnailDefault": "sliderReset",
        "click .js-productInfoDefaultBtn": "btnNoAction",
        "mouseover .js-productInfoDefaultBtn": "attentionCheckOn",
        "mouseout .js-productInfoDefaultBtn": "attentionCheckOff",
        "mouseenter .js-productInfoViewerSliderItem": "renderMouseOver",
        "mouseleave .js-productInfoViewerSliderWrap": "renderMouseOut",
        "mouseover .js-productInfoViewerSliderNext": "scaleHide",
        "mouseover .js-productInfoViewerSliderPrev": "scaleHide",
        "mousemove ": "renderMouseMove",
        "touchstart .js-productInfoViewerSliderItem": "renderTouchStart",
        "touchmove .js-productInfoViewerSliderItem": "renderTouchMove",
        "touchend .js-productInfoViewerSliderItem": "renderTouchEnd"
    },
    initialize: function() {
        this.data = product_info_json;
        this.model.set("status", "stop");
        this.model.on("change:quantity", this.renderPrice, this);
        this.model.on("change:regular", this.renderPrice, this);
        this.model.on("change:sku01", this.renderSku, this);
        this.model.on("change:sku02", this.renderSku, this);
        this.model.on("change:sku03", this.renderSku, this);
        this.model.on("change:status", this.render, this);
        this.model.on("change:thumbnail", this.renderThumbnail, this);
        this.objectCache();
        this.initParam();
        if (this.param.flagSku01 || this.param.flagSku02 || this.param.flagSku03) {
            this.$el.find(this.param.productInfoQuantity).closest(this.param.productInfoDelWrap).hide()
        }
        this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).slice(1).hide();
        this.saveDefData();
        this.initElement();
        this.initAddEvents();
        var scaleImg = snm.$("#js-modalZoom").find(this.param.productInfoViewerScaleImg).closest("div");
        scaleImg.html('<div class="imgCoverWrap"><span class="imgCover" style="z-index:10"></span>' + scaleImg.html() + "</div>");
        snm.$("#js-modalZoom").find(this.param.productInfoViewerThumbnailZoom).eq(0).find("a").prepend('<span class="imgCover" style="width:50px;height:50px;z-index:10"></span>')
    },
    initParam: function() {
        this.param.flagRegular = this.$el.find(this.param.productInfoRegular)[0] ? true : false;
        this.param.flagSku01 = this.element.$productInfoSku01[0] ? true : false;
        this.param.flagSku02 = this.element.$productInfoSku02[0] ? true : false;
        this.param.flagSku03 = this.element.$productInfoSku03[0] ? true : false;
        this.param.flagCounseling = snm.$("#js-counselingModal")[0] ? true : false;
        this.param.flagMedicine = this.$el.find(this.param.productInfoMedicineCheck)[0] ? true : false;
        this.param.flagDeliverySku = this.element.$ajaxDeliveryDateBtn.attr(this.param.dataDeliveryDateSku) ? true : false;
        this.param.itemNum = this.element.$productInfoViewerSlider.eq(0).find(this.param.productInfoViewerSliderItem).length;
        this.param.$sliderClone = this.element.$productInfoViewerSliderItem.eq(0);
        this.param.$thumbnailClone = this.$el.find(this.param.productInfoViewerThumbnail).eq(0);
        this.param.modalZoom = new snm.module.Modal({
            el: snm.$(this.param.modalZoom),
            clickDel: true
        });
        this.param.deliveryDate = new snm.module.view.AjaxDeliveryDate({
            el: this.$el,
            model: new snm.module.model.AjaxDeliveryDate({})
        });
        this.param.isTablet = snm.util.navigator.tablet;
        if (!this.param.isTablet) {
            this.param.isTablet = snm.util.navigator.smartphone
        }
        if (this.$el.find(this.param.productInfoThumbnailList).html()) {
            this.param.thumbnailTmp = snm._.template(this.$el.find(this.param.productInfoThumbnailList).html())
        }
        if (snm.$(this.param.productInfoThumbnailListZoom).html()) {
            this.param.thumbnailTmpZoom = snm._.template(snm.$(this.param.productInfoThumbnailListZoom).html())
        }
        if (typeof product_info_image_json != "undefined") {
            this.imgData = this.param.flagSku01 ? product_info_image_json : null;
            if (!this.imgData) {
                this.param.flagImage = false
            } else {
                this.param.flagImage = true
            }
        } else {
            this.imgData = "";
            this.param.flagImage = false
        }
        if (this.param.flagCounseling) {
            new snm.module.view.Counseling({
                el: this.$el
            })
        }
        this.param.flagAttention = this.$el.find(this.param.productInfoAttentionPopup)[0] ? true : false;
        if (this.param.flagAttention && this.$el.find(this.param.ajaxShopingListProductsBtn)[0] && (this.param.flagSku01 || this.param.flagSku02 || this.param.flagSku03)) {
            this.setShopingListProductsBtn()
        }
        if (this.param.flagAttention && this.$el.find(this.param.productInfoTreatShopsBtn)[0] && (this.param.flagSku01 || this.param.flagSku02 || this.param.flagSku03)) {
            this.setTreatShopsBtn()
        }
        this.cartBtnInit();
        var self = this;
        if (this.param.flagRegular && this.$el.find(this.param.productInfoRegular + ":checked").length > 0) {
            setTimeout(function() {
                self.$el.find(self.param.productInfoRegular + ":checked").trigger("change")
            }, 1)
        }
        if (this.param.flagMedicine && this.$el.find(this.param.productInfoMedicineCheck).prop("checked")) {
            setTimeout(function() {
                self.$el.find(self.param.productInfoMedicineCheck).trigger("change")
            }, 1)
        }
    },
    initElement: function() {
        if (this.param.flagSku01 || this.param.flagSku02 || this.param.flagSku03) {
            if (this.$el.find(this.param.tmpProductInfoIconsImg).html()) {
                this.param.tmpOptionIcons = snm._.template(this.$el.find(this.param.tmpProductInfoIconsImg).html())
            }
            var text;
            this.element.$dataBtnType.each(function() {
                text = snm.$(this).val() || snm.$(this).text();
                snm.$(this).attr("data-default-label", text)
            });
            if (this.param.flagSku01 || this.param.flagSku02) {
                this.$el.find(this.param.productInfoWarning).show();
                if (!this.param.flagSku01 || !this.param.flagSku02) {
                    this.element.$productInfoWarningJoin.hide();
                    if (this.param.flagSku01) this.element.$productInfoWarningSku2.hide();
                    if (this.param.flagSku02) this.element.$productInfoWarningSku1.hide()
                }
            }
            this.getSkuValue()
        } else if (this.param.flagDeliverySku) {
            this.renderDeliveryDate(false)
        }
        this.iconHidden();
        this.sliderInit();
        if (this.$el.find("[data-large-image]").length == 0) {
            delete this.events.mouseover;
            delete this.events.mouseout;
            delete this.events.mousemove
        }
        if (this.param.isTablet) {
            this.element.$productInfoZoomModal.find(this.param.productInfoViewerExpand).hide()
        }
        if (this.$el.find(this.param.productInfoSkuValue)[0] && snm.$(this.param.ajaxStockInfoSku)[0]) {
            snm.$(this.param.ajaxStockInfoSku).val(this.$el.find(this.param.productInfoSkuValue).val())
        }
        if (!this.isImgDesc()) this.$el.find(this.param.productInfoImageDesc).hide()
    },
    initAddEvents: function() {
        var self = this;
        this.element.$productInfoZoomModal.on("click", this.param.productInfoViewerThumbnailZoom, function(e) {
            self.thumbnailZoomAction(e);
            return false
        });
        if (!this.param.isTablet) {
            this.element.$productInfoZoomModal.on("click", this.param.productInfoViewerSliderItem, function(e) {
                self.renderZoomOn(e);
                return false
            })
        }
        this.element.$productInfoZoomModal.on("mousemove", function(e) {
            self.renderZoomMove(e)
        });
        this.element.$productInfoZoomModal.on("mouseenter", this.param.productInfoViewerScaleArea, function() {
            self.param.flagMouseOnZoom = true
        });
        this.element.$productInfoZoomModal.on("mouseleave", this.param.productInfoViewerScaleArea, function() {
            self.param.flagMouseOnZoom = false
        });
        this.element.$productInfoZoomModal.on("click", this.param.productInfoViewerScaleArea, function() {
            snm.$(self.param.productInfoZoomModal).find(self.param.productInfoViewerScaleArea).hide();
            snm.$(self.param.productInfoZoomModal).find(self.param.productInfoViewerSliderItem).eq(self.param.zoomIndex).show();
            self.param.flagMouseOnZoom = false
        });
        if (this.param.isTablet) {
            this.param.startDistance = null;
            this.element.$productInfoZoomModal.on("touchstart", this.param.productInfoViewerSliderItem, function(e) {
                var touch = e.originalEvent.touches,
                    x, y;
                if (touch.length > 1) {
                    x = touch[0].pageX - touch[1].pageX;
                    y = touch[0].pageY - touch[1].pageY;
                    self.param.startDistance = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))
                }
            });
            this.element.$productInfoZoomModal.on("touchmove", this.param.productInfoViewerSliderItem, function(e) {
                var touch = e.originalEvent.touches,
                    x, y;
                if (!e.originalEvent.scale) {
                    x = touch[0].pageX - touch[1].pageX;
                    y = touch[0].pageY - touch[1].pageY;
                    self.param.scale = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) / self.param.startDistance;
                } else {
                    self.param.scale = e.originalEvent.scale
                }
                if (self.param.endScaleRate > 0) self.param.scale += self.param.endScaleRate - 1;
                if (self.param.scale <= 1) return false;
                snm.$(this).css("-webkit-transform", "scale(" + self.param.scale + ")");
                return false
            });
            this.element.$productInfoZoomModal.on("touchend", this.param.productInfoViewerSliderItem, function() {
                self.param.endScaleRate = self.param.scale
            })
        }
    },
    scrollEventOn: function() {
        var self = this;
        snm.$(window).on("scroll.producet_info_scroll", function() {
            self.$el.trigger("mousemove")
        })
    },
    scrollEventOff: function() {
        snm.$(window).off("scroll.producet_info_scroll")
    },
    isImgDesc: function() {
        var defNum = this.imgData ? this.imgData.length : 0,
            thumbnailFlag, thumbnailNum, i, j;
        if (!snm.util.objValidation(this.$el.find(this.param.productInfoImageDesc).text())) return true;
        this.$el.find(this.param.productInfoViewerThumbnail).each(function() {
            if (snm.$(this).attr("data-desc-text")) {
                thumbnailFlag = true;
                return false
            }
        });
        if (thumbnailFlag) return true;
        if (defNum === 0) return false;
        for (i = 0; i < defNum; i++) {
            if (!snm.util.objValidation(this.imgData[i].default_image_info.text)) {
                return true
            }
            thumbnailNum = this.imgData[i].thumbnail_image_info.length;
            for (j = 0; j < thumbnailNum; j++) {
                if (!snm.util.objValidation(this.imgData[i].thumbnail_image_info[j].text)) {
                    return true
                }
            }
        }
        return false
    },
    sliderInit: function() {
        if (this.param.itemNum === 1) {
            this.$el.find(this.param.productInfoViewerSliderNext).hide();
            this.$el.find(this.param.productInfoViewerSliderPrev).hide();
            this.element.$productInfoViewerSlider.css({
                width: "100%",
                marginLeft: 0
            })
        } else {
            this.$el.find(this.param.productInfoViewerSliderNext).show();
            this.$el.find(this.param.productInfoViewerSliderPrev).show()
        }
        this.element.$productInfoViewerSliderItem.slice(1).hide();
        this.isLargeImage(this.$el.find(this.param.productInfoViewerSliderItem).eq(0).attr("data-large-image"));
        if (this.param.itemNum !== 1) {
            this.element.$productInfoViewerSliderItem.show();
            this.slideSetting();
            this.slideCloneItem()
        }
    },
    objectCache: function() {
        this.element = {};
        this.element.$dataBtnType = this.$el.find("[data-btn-type]");
        this.element.$productInfoDefault = this.$el.find(this.param.productInfoDefault);
        this.element.$productInfoSku01 = this.$el.find(this.param.productInfoSku01);
        this.element.$productInfoSetName = this.$el.find(this.param.productInfoSetName);
        this.element.$productInfoSku02 = this.$el.find(this.param.productInfoSku02);
        this.element.$productInfoSku03 = this.$el.find(this.param.productInfoSku03);
        this.element.$productInfoViewerSlider = this.$el.find(this.param.productInfoViewerSlider);
        this.element.$productInfoViewerSliderItem = this.$el.find(this.param.productInfoViewerSliderItem);
        this.element.$productInfoViewerScaleArea = this.$el.find(this.param.productInfoViewerScaleArea);
        this.element.$productInfoViewerScaleImg = this.$el.find(this.param.productInfoViewerScaleImg);
        this.element.$productInfoViewerLens = this.$el.find(this.param.productInfoViewerLens);
        this.element.$productInfoDelWrap = this.$el.find(this.param.productInfoDelWrap);
        this.element.$productInfoWarningJoin = this.$el.find(this.param.productInfoWarningJoin);
        this.element.$productInfoWarningSku1 = this.$el.find(this.param.productInfoWarningSku1);
        this.element.$productInfoWarningSku2 = this.$el.find(this.param.productInfoWarningSku2);
        this.element.$productInfoZoomModal = snm.$(this.param.productInfoZoomModal);
        this.element.$productInfoSkuValue = snm.$(this.param.productInfoSkuValue);
        this.element.$ajaxDeliveryDateBtn = this.$el.find(this.param.ajaxDeliveryDateBtn)
    },
    iconHidden: function() {
        var $itemIcon = this.$el.find(this.param.productInfoItemIcons + " " + this.param.productInfoIcon),
            $popIcon = this.$el.find(this.param.productInfoPopIcons + " " + this.param.productInfoIcon);
        $itemIcon.slice(this.param.itemIconShowNum).hide();
        $popIcon.slice(this.param.popIconShowNum).hide()
    },
    saveDefData: function() {
        if (this.param.saveDefOnce) return false;
        var self = this,
            nanacoPeriod;
        this.param.defDelWrapState = [];
        this.element.$productInfoDelWrap.each(function() {
            self.param.defDelWrapState.push(snm.$(this).css("display"))
        });
        this.param.defDefault = [];
        this.element.$productInfoDefault.each(function() {
            self.param.defDefault.push(snm.$(this).css("display"))
        });
        this.param.defData.sku01 = this.element.$productInfoSku01.html();
        this.param.defData.sku02 = this.element.$productInfoSku02.html();
        this.param.defData.itemNum = this.$el.find(this.param.productInfoItemNum).html();
        this.param.defData.totalPrice = this.$el.find(this.param.productInfoTotalPrice).html();
        this.param.defData.totalPriceTax = this.$el.find(this.param.productInfoTotalPriceTax).html();
        this.param.defData.skuValue = this.element.$productInfoSkuValue.val();
        this.param.defData.price = this.$el.find(this.param.productInfoPrice).html();
        this.param.defData.priceTax = this.$el.find(this.param.productInfoPriceTax).html();
        this.param.defData.priceNum = this.$el.find(this.param.productInfoPriceNum).html();
        this.param.defData.priceNumClass = this.$el.find(this.param.productInfoPriceNum).attr("class");
        this.param.defData.priceStyleClass = this.$el.find(this.param.productInfoPriceStyle).attr("class");
        this.param.defData.bfrNum = this.$el.find(this.param.productInfoBfrNum).html();
        this.param.defData.bfrNumClass = this.$el.find(this.param.productInfoBfrNum).attr("class");
        this.param.defData.bfrTax = this.$el.find(this.param.productInfoBfrTax).html();
        this.param.defData.bfrNotax = this.$el.find(this.param.productInfoBfrNotax).html();
        this.param.defData.bfrStyleClass = this.$el.find(this.param.productInfoBfrPriceStyle).attr("class");
        this.param.defData.campaignNum = this.$el.find(this.param.productInfoCampaignNum).html();
        this.param.defData.campaignNumClass = this.$el.find(this.param.productInfoCampaignNum).attr("class");
        this.param.defData.campaignTax = this.$el.find(this.param.productInfoCampaignTax).html();
        this.param.defData.campaignNotax = this.$el.find(this.param.productInfoCampaignNotax).html();
        this.param.defData.campaignStyle = this.$el.find(this.param.productInfoCampaignPriceStyle).attr("class");
        this.param.defData.discRate = this.$el.find(this.param.productInfoDiscRate).html();
        this.param.defData.specialIntax = this.$el.find(this.param.productInfoSpecialIntax).html();
        this.param.defData.postageInfo = this.$el.find(this.param.productInfoPostageInfo).html();
        this.param.defData.nanacoPoint = this.$el.find(this.param.productInfoNanacoPoint).html();
        this.param.defData.couponText = this.$el.find(this.param.productInfoCouponText).html();
        nanacoPeriod = this.$el.find(this.param.productInfoNanacoPeriod);
        this.param.defData.nanacoPeriod = nanacoPeriod.html();
        this.param.defData.nanacoStyle = nanacoPeriod.hasClass(this.param.isTextRed);
        this.param.defData.seleReport = this.$el.find(this.param.productInfoSeleReport).html();
        this.param.defData.optionIcons = this.$el.find(this.param.productInfoOptionIcons).html();
        this.param.defData.campaignPeriod = this.$el.find(this.param.productInfoCampaignPeriod).html();
        this.param.defData.SaleStartDt = this.$el.find(this.param.productInfoSaleStartDt).html();
        this.param.defData.SaleDate = this.$el.find(this.param.productInfoSaleDate).html();
        this.param.defData.ResvSaleDate = this.$el.find(this.param.productInfoResvSaleDate).html();
        this.param.defData.itemIcons = this.$el.find(this.param.productInfoItemIcons).html();
        this.param.defData.popIcons = this.$el.find(this.param.productInfoPopIcons).html();
        this.param.defData.multiNum = this.$el.find(this.param.productInfoMultiNum).html();
        this.param.defData.multiTitle = this.$el.find(this.param.productInfoMultiTitle).html();
        this.param.defData.multiPeriod = this.$el.find(this.param.productInfoMultiPeriod).html();
        this.param.defData.multiLink = this.$el.find(this.param.productInfoMultiLink).attr("href");
        this.param.defData.setTitle = this.$el.find(this.param.productInfoSetTitle).html();
        this.param.defData.setPeriod = this.$el.find(this.param.productInfoSetPeriod).html();
        this.param.defData.setLink = this.$el.find(this.param.productInfoSetLink).attr("href");
        this.param.defData.buyComment = this.$el.find(this.param.productInfoBuyComment).html();
        this.param.defData.stockStatus = this.$el.find(this.param.productInfoStockStatus).html();
        this.param.defData.stockStyle = this.$el.find(this.param.productInfoStockStatus).attr("class");
        this.param.defData.slider = this.element.$productInfoViewerSlider.html();
        this.param.defData.sliderZoom = this.element.$productInfoZoomModal.find(this.param.productInfoViewerSlider).html();
        this.param.defData.thumbnail = this.$el.find(this.param.productInfoViewerThumbnailWrap).html();
        this.param.defData.thumbnailZoom = this.element.$productInfoZoomModal.find(this.param.productInfoViewerThumbnailWrap).html();
        this.param.defData.imageDesc = this.$el.find(this.param.productInfoImageDesc).html();
        this.param.defData.deliveryDateSku = this.element.$ajaxDeliveryDateBtn.attr(this.param.dataDeliveryDateSku);
        this.param.defData.deliveryDateStoreDate = this.$el.find(this.param.ajaxDeliveryDateStoreDate).html();
        this.param.defData.deliveryDateStoreTime = this.$el.find(this.param.ajaxDeliveryDateStoreTime).html();
        this.param.defData.deliveryDateSendDate = this.$el.find(this.param.ajaxDeliveryDateSendDate).html();
        this.param.defData.deliveryDateSendTime = this.$el.find(this.param.ajaxDeliveryDateSendTime).html();
        this.param.defData.dataShoppingListSku = this.$el.find(this.param.ajaxShopingListProductsBtn).attr(this.param.dataShoppingListSku);
        this.param.defData.setNameBtn = this.element.$productInfoSetName.css("display") !== "none";
        this.param.defData.productInfoMultiBtn = this.$el.find(this.param.productInfoMultiBtn).css("display") !== "none";
        this.param.defData.productInfoSetBtn = this.$el.find(this.param.productInfoSetBtn).css("display") !== "none";
        this.param.defData.btnState = this.$el.find("[data-btn-type]:visible").attr("data-btn-type");
        if (this.$el.find(this.param.productInfoQuantity)[0]) {
            this.param.defData.pullDown = this.$el.find(this.param.productInfoQuantity).html()
        } else {
            this.param.defData.pullDown = null
        }
        this.param.defData.productInfoPostageFree = this.$el.find(this.param.productInfoPostageFree).css("display") !== "none";
        this.param.defData.productInfoPostageSolo = this.$el.find(this.param.productInfoPostageSolo).css("display") !== "none";
        this.param.defData.productInfoPostageIncluded = this.$el.find(this.param.productInfoPostageIncluded).css("display") !== "none";
        this.param.defData.productInfoPostageWrap = this.$el.find(this.param.productInfoPostageWrap).css("display") !== "none";
        this.param.defData.productInfoCouponWrap = this.$el.find(this.param.productInfoCouponWrap).css("display") !== "none";
        this.param.defData.productInfoPointArea = this.$el.find(this.param.productInfoPointArea).css("display") !== "none";
        this.param.defData.productInfoOptionArea = this.$el.find(this.param.productInfoOptionArea).css("display") !== "none";
        this.param.defData.campaignPeriodDisplay = this.$el.find(this.param.productInfoCampaignPeriod).css("display") !== "none";
        this.param.defData.discRateDisplay = this.$el.find(this.param.productInfoDiscRate).css("display") !== "none";
        this.param.defData.postageInfoDisplay = this.$el.find(this.param.productInfoPostageInfo).css("display") !== "none";
        this.param.defData.ajaxDeliveryDateHurryText = this.$el.find(this.param.ajaxDeliveryDateHurryText).css("display") !== "none";
        this.param.defData.seleReportDisplay = this.$el.find(this.param.productInfoSeleReport).css("display") !== "none";
        this.param.defData.buyCommentDisplay = this.$el.find(this.param.productInfoBuyComment).css("display") !== "none";
        this.param.saveDefOnce = true
    },
    setDefData: function() {
        var self = this,
            nanacoPeriod;
        this.element.$productInfoDelWrap.each(function(i) {
            snm.$(this).css("display", self.param.defDelWrapState[i])
        });
        this.element.$productInfoDefault.each(function(i) {
            snm.$(this).css("display", self.param.defDefault[i])
        });
        this.$el.find(this.param.productInfoItemNum).html(this.param.defData.itemNum).show();
        this.$el.find(this.param.productInfoTotalPrice).html(this.param.defData.totalPrice).show();
        this.$el.find(this.param.productInfoTotalPriceTax).html(this.param.defData.totalPriceTax).show();
        this.element.$productInfoSkuValue.val(this.param.defData.skuValue);
        this.$el.find(this.param.productInfoPrice).html(this.param.defData.price).show();
        this.$el.find(this.param.productInfoPriceTax).html(this.param.defData.priceTax).show();
        this.$el.find(this.param.productInfoPriceNum).html(this.param.defData.priceNum).attr("class", this.param.defData.priceNumClass).show();
        this.$el.find(this.param.productInfoPriceStyle).attr("class", this.param.defData.priceStyleClass).show();
        this.$el.find(this.param.productInfoBfrTax).html(this.param.defData.bfrTax).show();
        this.$el.find(this.param.productInfoBfrNotax).html(this.param.defData.bfrNotax).show();
        this.$el.find(this.param.productInfoBfrNum).html(this.param.defData.bfrNum).attr("class", this.param.defData.bfrNumClass).show();
        this.$el.find(this.param.productInfoBfrPriceStyle).attr("class", this.param.defData.bfrStyleClass).show();
        this.$el.find(this.param.productInfoCampaignTax).html(this.param.defData.campaignTax).show();
        this.$el.find(this.param.productInfoCampaignNotax).html(this.param.defData.campaignNotax).show();
        this.$el.find(this.param.productInfoCampaignNum).html(this.param.defData.campaignNum).attr("class", this.param.defData.campaignNumClass).show();
        this.$el.find(this.param.productInfoCampaignPriceStyle).attr("class", this.param.defData.campaignStyle).show();
        this.$el.find(this.param.productInfoDiscRate).html(this.param.defData.discRate).show();
        this.$el.find(this.param.productInfoSpecialIntax).html(this.param.defData.specialIntax).show();
        this.$el.find(this.param.productInfoPostageInfo).html(this.param.defData.postageInfo).show();
        this.$el.find(this.param.productInfoNanacoPoint).html(this.param.defData.nanacoPoint).show();
        this.$el.find(this.param.productInfoCouponText).html(this.param.defData.couponText);
        nanacoPeriod = this.$el.find(this.param.productInfoNanacoPeriod);
        nanacoPeriod.html(this.param.defData.nanacoPeriod).show();
        if (this.param.defData.nanacoStyle && !nanacoPeriod.hasClass(this.param.isTextRed)) {
            nanacoPeriod.addClass(this.param.isTextRed)
        } else if (!this.param.defData.nanacoStyle && nanacoPeriod.hasClass(this.param.isTextRed)) {
            nanacoPeriod.removeClass(this.param.isTextRed)
        }
        this.$el.find(this.param.productInfoSeleReport).html(this.param.defData.seleReport).show();
        this.$el.find(this.param.productInfoOptionIcons).html(this.param.defData.optionIcons).show();
        this.$el.find(this.param.productInfoCampaignPeriod).html(this.param.defData.campaignPeriod).show();
        this.$el.find(this.param.productInfoSaleStartDt).html(this.param.defData.SaleStartDt).show();
        this.$el.find(this.param.productInfoSaleDate).html(this.param.defData.SaleDate).show();
        this.$el.find(this.param.productInfoResvSaleDate).html(this.param.defData.ResvSaleDate).show();
        this.$el.find(this.param.productInfoItemIcons).html(this.param.defData.itemIcons).show();
        this.$el.find(this.param.productInfoPopIcons).html(this.param.defData.popIcons).show();
        this.$el.find(this.param.productInfoMultiNum).html(this.param.defData.multiNum).show();
        this.$el.find(this.param.productInfoMultiTitle).html(this.param.defData.multiTitle).show();
        this.$el.find(this.param.productInfoMultiPeriod).html(this.param.defData.multiPeriod).show();
        this.$el.find(this.param.productInfoMultiLink).attr("href", this.param.defData.multiLink);
        this.$el.find(this.param.productInfoSetTitle).html(this.param.defData.setTitle).show();
        this.$el.find(this.param.productInfoSetPeriod).html(this.param.defData.setPeriod).show();
        this.$el.find(this.param.productInfoSetLink).attr("href", this.param.defData.setLink);
        this.$el.find(this.param.productInfoBuyComment).html(this.param.defData.buyComment).show();
        this.$el.find(this.param.productInfoSku02NoStock).hide();
        this.$el.find(this.param.productInfoStockStatus).attr("class", this.param.defData.stockStyle).html(this.param.defData.stockStatus);
        this.displayChange(this.param.defData.setNameBtn, this.$el.find(this.param.productInfoSetName));
        this.displayChange(this.param.defData.productInfoMultiBtn, this.$el.find(this.param.productInfoMultiBtn));
        this.displayChange(this.param.defData.productInfoSetBtn, this.$el.find(this.param.productInfoSetBtn));
        this.displayChange(this.param.defData.productInfoPostageFree, this.$el.find(this.param.productInfoPostageFree));
        this.displayChange(this.param.defData.productInfoPostageSolo, this.$el.find(this.param.productInfoPostageSolo));
        this.displayChange(this.param.defData.productInfoPostageIncluded, this.$el.find(this.param.productInfoPostageIncluded));
        this.displayChange(this.param.defData.productInfoPostageWrap, this.$el.find(this.param.productInfoPostageWrap));
        this.displayChange(this.param.defData.productInfoCouponWrap, this.$el.find(this.param.productInfoCouponWrap));
        this.displayChange(this.param.defData.productInfoPointArea, this.$el.find(this.param.productInfoPointArea));
        this.displayChange(this.param.defData.productInfoOptionArea, this.$el.find(this.param.productInfoOptionArea));
        this.displayChange(this.param.defData.campaignPeriodDisplay, this.$el.find(this.param.productInfoCampaignPeriod));
        this.displayChange(this.param.defData.discRateDisplay, this.$el.find(this.param.productInfoDiscRate));
        this.displayChange(this.param.defData.postageInfoDisplay, this.$el.find(this.param.productInfoPostageInfo));
        this.displayChange(this.param.defData.ajaxDeliveryDateHurryText, this.$el.find(this.param.ajaxDeliveryDateHurryText));
        this.displayChange(this.param.defData.seleReportDisplay, this.$el.find(this.param.productInfoSeleReport));
        this.displayChange(this.param.defData.buyCommentDisplay, this.$el.find(this.param.productInfoBuyComment));
        this.$el.find(this.param.ajaxDeliveryDate).hide();
        var $btn = this.element.$dataBtnType,
            label;
        for (var i = 0; i < $btn.length; i++) {
            label = $btn.eq(i).attr("data-default-label");
            if ($btn.eq(i).is("input")) {
                $btn.eq(i).val(label).attr("title", label)
            } else {
                $btn.eq(i).html(label)
            }
        }
        if (this.$el.find(this.param.productInfoQuantity)[0]) {
            this.$el.find(this.param.productInfoQuantity).html(this.param.defData.pullDown)
        }
        snm.$(this.param.ajaxStockInfoSku).val("");
        this.element.$productInfoSkuValue.val("");
        this.element.$ajaxDeliveryDateBtn.attr(this.param.dataDeliveryDateSku, "");
        this.$el.find(this.param.ajaxShopingListProductsBtn).attr(this.param.dataShoppingListSku, this.param.defData.dataShoppingListSku);
        this.iconHidden()
    },
    displayChange: function(bool, $ele) {
        if (bool) {
            $ele.show()
        } else {
            $ele.hide()
        }
    },
    getSkuValue: function() {
        var self = this,
            result = "",
            locationPath = window.location.pathname.split("/"),
            hiddenVal = snm.$(this.param.productInfoSkuValue).val(),
            sku01, sku02, sku03, sCodeArr;
        if (locationPath[1] === "detail" && locationPath[2]) {
            sCodeArr = locationPath[2].split("-");
            if (sCodeArr[1]) {
                result = sCodeArr[1]
            }
        }
        if (hiddenVal) {
            result = this.element.$productInfoSkuValue.val()
        }
        if (result === "") {
            if (this.param.flagDeliverySku) {
                this.renderDeliveryDate(false)
            }
            this.checkSkuValue();
            return
        }
        for (var i = 0; i < this.data.length; i++) {
            if (result === this.data[i].sku_cd) {
                sku01 = this.data[i].sku01;
                sku02 = this.data[i].sku02;
                sku03 = this.data[i].sku03;
                break
            }
        }
        if (!sku01 && !sku02 && !sku03) {
            if (this.param.flagDeliverySku) {
                this.renderDeliveryDate(false)
            }
            return false
        }
        this.param.firstDeliveryAjax = true;
        this.selectSkuValue(sku01, sku02, sku03)
    },
    selectSkuValue: function(sku01, sku02, sku03) {
        if (!sku01 && !sku02 && !sku03) return;
        var self = this;
        if (sku01) {
            setTimeout(function() {
                if (!self.$el.find("[data-sku01]").is("select")) {
                    self.$el.find("[alt = '" + sku01 + "']").parents(self.param.productInfoSkuThumbnail).addClass(self.param.isActive).trigger("click")
                } else {
                    self.$el.find("[data-sku01]").val(sku01).change()
                }
            }, 100)
        }
        if (sku02) {
            setTimeout(function() {
                if (!self.$el.find("[data-sku02]").is("select")) {
                    self.$el.find("[alt = '" + sku02 + "']").parents(self.param.productInfoSkuThumbnail).addClass(self.param.isActive).trigger("click")
                } else {
                    self.$el.find("[data-sku02]").val(sku02).change()
                }
            }, 100)
        }
        if (sku03) {
            setTimeout(function() {
                self.element.$productInfoSku03.val([sku03]).change()
            }, 100)
        }
    },
    checkSkuValue: function() {
        if (!this.param.flagSku01 || !this.param.flagSku02) return;
        var sku01Arr = [],
            sku02Arr = [],
            sku01, sku02;
        for (var i = 0; i < this.data.length; i++) {
            if (!snm.util.objValidation(this.data[i].sku01)) sku01Arr.push(this.data[i].sku01);
            if (!snm.util.objValidation(this.data[i].sku02)) sku02Arr.push(this.data[i].sku02)
        }
        sku01Arr = snm._.uniq(sku01Arr);
        sku02Arr = snm._.uniq(sku02Arr);
        sku01 = sku01Arr.length === 1 ? sku01Arr[0] : false;
        sku02 = sku02Arr.length === 1 ? sku02Arr[0] : false;
        this.selectSkuValue(sku01, sku02)
    },
    getJsonIndex: function() {
        var sku01 = this.model.get("sku01") || null,
            sku02 = this.model.get("sku02") || null,
            sku03 = this.model.get("sku03") || null;
        for (var i = 0; i < this.data.length; i++) {
            if (snm.util.objValidation(this.data[i].sku01)) {
                this.data[i].sku01 = null
            }
            if (snm.util.objValidation(this.data[i].sku02)) {
                this.data[i].sku02 = null
            }
            if (snm.util.objValidation(this.data[i].sku03)) {
                this.data[i].sku03 = null
            }
            if (this.data[i].sku01 == sku01 && this.data[i].sku02 === sku02 && this.data[i].sku03 === sku03) {
                return i
            }
        }
        return -1
    },
    quantitySetting: function() {
        var index = this.getJsonIndex(),
            pullDown = "";
        if (index < 0) {
            return
        }
        var stock = this.data[index].item.cart_info.pull_down,
            i;
        var dispFlag = snm.util.objValidation(stock.disp_flg) ? false : stock.disp_flg,
            min = snm.util.objValidation(stock.min) ? 1 : stock.min,
            max = snm.util.objValidation(stock.max) ? 1 : stock.max;
        this.displayChange(dispFlag, this.$el.find(this.param.productInfoQuantity).closest(this.param.productInfoDelWrap));
        for (i = min; i <= max; i++) {
            pullDown += "<option value='" + i + "'>" + this.textSepatate(i) + "</option>"
        }
        this.$el.find(this.param.productInfoQuantity).html(pullDown);
        this.model.set("quantity", this.$el.find(this.param.productInfoQuantity).val(), {
            silent: true
        })
    },
    cartBtnSetting: function() {
        var index = this.getJsonIndex(),
            isMedicineCheck = this.$el.find(this.param.productInfoMedicineCheck).prop("checked"),
            btnState, type, label, $btn;
        if ((index < 0 || this.param.flagMedicine && !isMedicineCheck || this.param.flagRegular && !this.model.get("regular")) && this.param.defData) {
            btnState = this.param.defData.btnState;
            if ((this.param.flagMedicine && isMedicineCheck || this.param.flagRegular && this.model.get("regular")) && this.param.defaultBtnState !== "") {
                btnState = this.param.defaultBtnState
            }
        } else {
            type = !this.param.flagSku01 && !this.param.flagSku02 && !this.param.flagSku03 ? this.data[0] : this.data[index].item;
            if (!snm.util.objValidation(type.btn_state)) {
                btnState = type.btn_state
            } else {
                btnState = this.param.defaultBtnState
            }
        }
        $btn = this.$el.find("[data-btn-type='" + btnState + "']");
        this.$el.find("[data-btn-type]").hide();
        $btn.show();
        if (!type) return;
        if (type && this.param.flagSku01 || this.param.flagSku02 || this.param.flagSku03) {
            if (!snm.util.objValidation(type.btn_label)) {
                if ($btn.is("input")) {
                    $btn.val(type.btn_label).attr("title", type.btn_label)
                } else {
                    $btn.html(type.btn_label)
                }
            } else {
                label = $btn.attr("data-default-label");
                if ($btn.is("input")) {
                    $btn.val(label).attr("title", label)
                } else {
                    $btn.html(label)
                }
            }
        }
    },
    priceInfo: function() {
        var index = this.getJsonIndex(),
            nanacoPeriod, stockStyle;
        if (index < 0) {
            this.setDefData();
            return
        }
        this.$el.find(this.param.productInfoWarning).hide();
        snm.$(this.param.ajaxStockInfoSku).val(this.data[index].sku_cd);
        this.element.$productInfoSkuValue.val(this.data[index].sku_cd);
        this.element.$ajaxDeliveryDateBtn.attr(this.param.dataDeliveryDateSku, this.data[index].sku_cd);
        this.$el.find(this.param.ajaxShopingListProductsBtn).attr(this.param.dataShoppingListSku, this.data[index].sku_cd);
        if (this.data[index].item.delivery_info.delivery_date_disp_flg) {
            var arg = this.param.firstDeliveryAjax ? false : "";
            this.renderDeliveryDate(arg);
            this.param.firstDeliveryAjax = false
        } else {
            this.$el.find(this.param.ajaxDeliveryDate).hide()
        }
        this.element.$ajaxDeliveryDateBtn.attr("disabled", false);
        this.renderPrice();
        if (!snm.util.objValidation(this.data[index].item.cart_info.buy_rstrct_cmmt)) {
            this.$el.find(this.param.productInfoBuyComment).html(this.data[index].item.cart_info.buy_rstrct_cmmt).show()
        } else {
            this.$el.find(this.param.productInfoBuyComment).html("").hide()
        }
        this.contentChange(this.param.productInfoPostageFree, this.data[index].item.cart_info.postage_free_flg);
        this.contentChange(this.param.productInfoPostageSolo, this.data[index].item.cart_info.postage_solo_flg);
        this.contentChange(this.param.productInfoPostageIncluded, this.data[index].item.cart_info.postage_included_flg);
        if (snm.util.objValidation(this.data[index].item.cart_info.stock_status.info)) {
            this.$el.find(this.param.productInfoStockStatus).html("").closest(this.param.productInfoDelWrap).hide()
        } else {
            stockStyle = this.param.productInfoStockStatus.replace(".", "") + " " + this.data[index].item.cart_info.stock_status.style;
            this.$el.find(this.param.productInfoStockStatus).attr("class", stockStyle).html(this.data[index].item.cart_info.stock_status.info).closest(this.param.productInfoDelWrap).show()
        }
        this.contentChange(this.param.productInfoItemNum, this.data[index].item.basic_info.item_num);
        this.contentChange(this.param.productInfoPriceTax, this.data[index].item.price_info.sale_price_num_intax);
        this.contentChange(this.param.productInfoPrice, this.data[index].item.price_info.sale_price_num_notax);
        this.contentChange(this.param.productInfoPriceNum, this.data[index].item.price_info.sale_price_num);
        if (snm.util.objValidation(this.data[index].item.price_info.sale_price_num_notax) || snm.util.objValidation(this.data[index].item.price_info.sale_price_num)) {
            this.$el.find(this.param.productInfoPriceNum).parents(this.param.productInfoDelWrap).hide()
        } else {
            this.$el.find(this.param.productInfoPriceNum).parents(this.param.productInfoDelWrap).show()
        }
        this.contentChange(this.param.productInfoBfrTax, this.data[index].item.price_info.bfr_val_price_intax);
        this.contentChange(this.param.productInfoBfrNotax, this.data[index].item.price_info.bfr_val_price_notax);
        this.contentChange(this.param.productInfoBfrNum, this.data[index].item.price_info.bfr_val_price_num);
        if (snm.util.objValidation(this.data[index].item.price_info.bfr_val_price_notax) || snm.util.objValidation(this.data[index].item.price_info.bfr_val_price_num)) {
            this.$el.find(this.param.productInfoBfrNum).parents(this.param.productInfoDelWrap).hide()
        } else {
            this.$el.find(this.param.productInfoBfrNum).parents(this.param.productInfoDelWrap).show()
        }
        this.contentChange(this.param.productInfoCampaignTax, this.data[index].item.price_info.campaign_price_intax);
        this.contentChange(this.param.productInfoCampaignNotax, this.data[index].item.price_info.campaign_price_notax);
        this.contentChange(this.param.productInfoCampaignNum, this.data[index].item.price_info.campaign_price_num);
        if (snm.util.objValidation(this.data[index].item.price_info.campaign_price_notax) || snm.util.objValidation(this.data[index].item.price_info.campaign_price_num)) {
            this.$el.find(this.param.productInfoCampaignNum).parents(this.param.productInfoDelWrap).hide()
        } else {
            this.$el.find(this.param.productInfoCampaignNum).parents(this.param.productInfoDelWrap).show()
        }
        var bfrStyle = this.param.productInfoBfrNum.replace(".", "") + " " + this.data[index].item.price_info.bfr_val_price_num_style,
            bfrPriceStyle = this.param.productInfoBfrPriceStyle.replace(".", "") + " " + this.data[index].item.price_info.bfr_val_price_style,
            price = this.param.productInfoPriceNum.replace(".", "") + " " + this.data[index].item.price_info.sale_price_num_style,
            priceStyle = this.param.productInfoPriceStyle.replace(".", "") + " " + this.data[index].item.price_info.sale_price_style,
            campaignStyle = this.param.productInfoCampaignNum.replace(".", "") + " " + this.data[index].item.price_info.campaign_price_num_style,
            campaignPriceStyle = this.param.productInfoCampaignPriceStyle.replace(".", "") + " " + this.data[index].item.price_info.campaign_price_style;
        this.$el.find(this.param.productInfoBfrNum).attr("class", bfrStyle);
        this.$el.find(this.param.productInfoBfrPriceStyle).attr("class", bfrPriceStyle);
        this.$el.find(this.param.productInfoPriceNum).attr("class", price);
        this.$el.find(this.param.productInfoPriceStyle).attr("class", priceStyle);
        this.$el.find(this.param.productInfoCampaignNum).attr("class", campaignStyle);
        this.$el.find(this.param.productInfoCampaignPriceStyle).attr("class", campaignPriceStyle);
        this.contentChange(this.param.productInfoDiscRate, this.data[index].item.price_info.disc_rate, true);
        this.contentChange(this.param.productInfoSpecialIntax, this.data[index].item.price_info.special_postage_intax);
        if (!snm.util.objValidation(this.data[index].item.price_info.postage_info)) {
            this.$el.find(this.param.productInfoPostageInfo).html(this.data[index].item.price_info.postage_info).show()
        } else {
            this.$el.find(this.param.productInfoPostageInfo).html("").hide()
        }
        this.contentChange(this.param.productInfoNanacoPoint, this.data[index].item.price_info.nanaco_point);
        nanacoPeriod = this.$el.find(this.param.productInfoNanacoPeriod);
        if (!snm.util.objValidation(this.data[index].item.price_info.nanaco_campaign_color) && this.data[index].item.price_info.nanaco_campaign_color === 1 && !nanacoPeriod.hasClass(this.param.isTextRed)) {
            nanacoPeriod.addClass(this.param.isTextRed)
        } else if ((snm.util.objValidation(this.data[index].item.price_info.nanaco_campaign_color) || this.data[index].item.price_info.nanaco_campaign_color !== 1) && nanacoPeriod.hasClass(this.param.isTextRed)) {
            nanacoPeriod.removeClass(this.param.isTextRed)
        }
        this.contentChange(this.param.productInfoNanacoPeriod, this.data[index].item.price_info.nanaco_campaign_period);
        this.contentChange(this.param.productInfoSeleReport, this.data[index].item.price_info.sele_report, true);
        this.contentChange(this.param.productInfoCampaignPeriod, this.data[index].item.price_info.campaign_period, true);
        this.contentChange(this.param.productInfoSaleStartDt, this.data[index].item.basic_info.sale_start_dt);
        this.contentChange(this.param.productInfoSaleDate, this.data[index].item.basic_info.sale_date);
        this.contentChange(this.param.productInfoResvSaleDate, this.data[index].item.basic_info.resv_sale_date);
        if (snm.util.objValidation(this.data[index].item.price_info.nanaco_point) && snm.util.objValidation(this.data[index].item.price_info.nanaco_campaign_period)) {
            this.$el.find(this.param.productInfoPointArea).hide()
        } else {
            this.$el.find(this.param.productInfoPointArea).show()
        }
        if (snm.util.objValidation(this.data[index].item.price_info.sele_report) && snm.util.objValidation(this.data[index].item.price_info.option_icons)) {
            this.$el.find(this.param.productInfoOptionArea).hide()
        } else {
            this.$el.find(this.param.productInfoOptionArea).show()
        }
        if (snm.util.objValidation(this.data[index].item.price_info.postage_info) && snm.util.objValidation(this.data[index].item.price_info.special_postage_intax) && !this.data[index].item.delivery_info.delivery_date_disp_flg) {
            this.$el.find(this.param.productInfoPostageWrap).hide()
        } else {
            this.$el.find(this.param.productInfoPostageWrap).show()
        }
        if (snm.util.objValidation(this.data[index].item.price_info.coupon_use_ipsbl)) {
            this.$el.find(this.param.productInfoCouponText).html("");
            this.$el.find(this.param.productInfoCouponWrap).hide()
        } else {
            this.$el.find(this.param.productInfoCouponText).html(this.data[index].item.price_info.coupon_use_ipsbl);
            this.$el.find(this.param.productInfoCouponWrap).show()
        }
        var optionIcons = {
                list: this.data[index].item.price_info.option_icons
            },
            itemIcons = {
                list: this.data[index].item.basic_info.brand_icons
            },
            popIcons = {
                list: this.data[index].item.basic_info.item_description_icons
            };
        if (this.data[index].item.price_info.option_icons.length === 0) {
            this.$el.find(this.param.productInfoOptionIcons).html("").hide()
        } else {
            this.$el.find(this.param.productInfoOptionIcons).html(this.param.tmpOptionIcons(optionIcons)).show()
        }
        if (this.data[index].item.basic_info.item_description_icons.length === 0) {
            this.$el.find(this.param.productInfoPopIcons).html("")
        } else {
            this.$el.find(this.param.productInfoPopIcons).html(this.param.tmpOptionIcons(popIcons))
        }
        if (this.data[index].item.basic_info.brand_icons.length === 0) {
            this.$el.find(this.param.productInfoItemIcons).html("")
        } else {
            this.$el.find(this.param.productInfoItemIcons).html(this.param.tmpOptionIcons(itemIcons))
        }
        this.contentChange(this.param.productInfoSetName, this.data[index].item.option_info.set_name_btn);
        var self = this;
        setTimeout(function() {
            self.contentChange(self.param.productInfoMultiNum, self.data[index].item.option_info.multi_buy_min_num);
            self.contentChange(self.param.productInfoMultiTitle, self.data[index].item.option_info.multi_buy_title, true);
            self.contentChange(self.param.productInfoMultiPeriod, self.data[index].item.option_info.multi_buy_period);
            self.contentChange(self.param.productInfoMultiBtn, self.data[index].item.option_info.multi_buy_btn);
            if (!snm.util.objValidation(self.data[index].item.option_info.multi_buy_url)) {
                self.$el.find(self.param.productInfoMultiLink).attr("href", self.data[index].item.option_info.multi_buy_url);
            } else {
                self.$el.find(self.param.productInfoMultiLink).attr("href", "#")
            }
            if (snm.util.objValidation(self.data[index].item.option_info.multi_buy_min_num) && snm.util.objValidation(self.data[index].item.option_info.multi_buy_title)) {
                self.$el.find(self.param.productInfoMultiTitle).closest(self.param.productInfoDelWrap).hide()
            } else {
                self.$el.find(self.param.productInfoMultiTitle).closest(self.param.productInfoDelWrap).show()
            }
        }, 40);
        setTimeout(function() {
            self.contentChange(self.param.productInfoSetTitle, self.data[index].item.option_info.set_buy_title);
            self.contentChange(self.param.productInfoSetPeriod, self.data[index].item.option_info.set_buy_period);
            self.contentChange(self.param.productInfoSetBtn, self.data[index].item.option_info.set_buy_btn);
            if (!snm.util.objValidation(self.data[index].item.option_info.set_buy_url)) {
                self.$el.find(self.param.productInfoSetLink).attr("href", self.data[index].item.option_info.set_buy_url)
            } else {
                self.$el.find(self.param.productInfoSetLink).attr("href", "#")
            }
        }, 80);
        this.iconHidden()
    },
    contentChange: function(element, value, flg) {
        var $element = this.$el.find(element),
            $delWrap = $element.closest(this.param.productInfoDelWrap),
            hasValue = !snm.util.objValidation(value),
            isSelf = snm._.isBoolean(flg) ? flg : false,
            $target = isSelf ? $element : $delWrap;
        if (snm._.isBoolean(value)) {
            this.displayChange(value, $element);
            return
        }
        this.displayChange(hasValue, $target);
        if (hasValue) {
            $element.html(value)
        } else {
            $element.html("")
        }
    },
    styleChange: function($target, style) {
        $target.removeClass(function(i, css) {
            return (css.match(/\u-f\S+/g) || []).join(" ")
        });
        $target.addClass(style)
    },
    scaleHide: function() {
        this.element.$productInfoViewerLens.hide();
        this.element.$productInfoViewerScaleArea.hide()
    },
    changeQuantity: function() {
        this.model.set("quantity", this.$el.find(this.param.productInfoQuantity).val())
    },
    changeRegular: function() {
        var data = this.$el.find(this.param.productInfoRegular + ":checked").parents(this.param.productInfoRegularMonth).attr("data-regular-month");
        this.model.set("regular", data);
        this.cartBtnSetting()
    },
    changeThumbnail: function(e) {
        if (snm.$(e.target).hasClass(this.param.isDisabled) || snm.$(e.target).parents(this.param.productInfoSkuThumbnail).hasClass(this.param.isDisabled)) return false;
        var target, $parentSku, sku01 = snm.$(e.target).parents(this.param.productInfoSku01)[0],
            skuVal = true;
        if (snm.$(e.target).hasClass(this.param.productInfoSkuThumbnail.replace(".", ""))) {
            target = snm.$(e.target).find("img").attr("alt")
        } else {
            target = snm.$(e.target).parents(this.param.productInfoSkuThumbnail).find("img").attr("alt")
        }
        if (sku01) {
            this.param.colorVal = target;
            this.model.set({
                sku01: this.param.colorVal,
                skuNum: 1
            });
            if (this.getJsonIndex() < 0) skuVal = false;
            if (!this.param.colorVal || !skuVal) {
                if (!skuVal) this.$el.find(this.param.productInfoWarning).show();
                this.element.$productInfoWarningJoin.hide();
                this.element.$productInfoWarningSku1.hide();
                this.element.$productInfoWarningSku2.show()
            }
            $parentSku = snm.$(e.target).parents(this.param.productInfoSku01)
        } else {
            this.param.sizeVal = target;
            if (this.param.sizeVal) {
                this.element.$productInfoWarningJoin.hide();
                this.element.$productInfoWarningSku1.show();
                this.element.$productInfoWarningSku2.hide()
            }
            this.model.set({
                sku02: this.param.sizeVal,
                skuNum: 2
            });
            $parentSku = snm.$(e.target).parents(this.param.productInfoSku02)
        }
        $parentSku.find(this.param.productInfoSkuThumbnail).removeClass(this.param.isActive);
        $parentSku.find("[alt='" + target + "']").closest(this.param.productInfoSkuThumbnail).addClass(this.param.isActive);
        return false
    },
    changeSkuSelect: function(e) {
        var $target = snm.$(e.target).val(),
            sku01 = snm.$(e.target).hasClass(this.param.productInfoSku01.replace(".", ""));
        this.$el.find(this.param.productInfoWarning).show();
        this.element.$productInfoWarningJoin.hide();
        this.element.$productInfoWarningSku1.hide();
        this.element.$productInfoWarningSku2.hide();
        if (sku01) {
            this.param.colorVal = $target;
            if (!this.param.colorVal) {
                this.element.$productInfoWarningSku1.show()
            } else {
                this.element.$productInfoWarningSku2.show()
            }
            this.model.set({
                sku01: this.param.colorVal,
                skuNum: 1
            })
        } else {
            this.param.sizeVal = $target;
            if (!this.param.sizeVal) {
                this.element.$productInfoWarningSku2.show()
            } else {
                this.element.$productInfoWarningSku1.show()
            }
            this.model.set({
                sku02: this.param.sizeVal,
                skuNum: 2
            })
        }
        if (this.param.flagSku01 && this.param.flagSku02) {
            if (!this.param.colorVal && !this.param.sizeVal) {
                this.element.$productInfoWarningJoin.show();
                this.element.$productInfoWarningSku1.show();
                this.element.$productInfoWarningSku2.show()
            }
        }
        if (snm.util.navigator.android) {
            snm.$(e.currentTarget).blur()
        }
    },
    changeSku3: function(e) {
        this.model.set({
            sku03: snm.$("[name='" + snm.$(e.target).attr("name") + "']:checked").val(),
            skuNum: 3
        })
    },
    changeMedicine: function(e) {
        if (snm.$(e.target).prop("checked")) {
            this.$el.find(this.param.productInfoMedicineText).hide();
            this.$el.find(this.param.productInfoAttentionMedicineText).hide()
        } else {
            this.$el.find(this.param.productInfoMedicineText).show();
            this.$el.find(this.param.productInfoAttentionMedicineText).show()
        }
        this.cartBtnSetting()
    },
    renderPrice: function() {
        var num = this.$el.find(this.param.productInfoQuantity).val(),
            period = this.model.get("regular"),
            dataIndex = this.getJsonIndex(),
            price, priceTax, i, notax, intax;
        if (!this.$el.find(this.param.productInfoQuantity)[0]) num = 1;
        if (dataIndex < 0 || this.param.flagRegular && snm.util.objValidation(period)) return false;
        notax = this.data[dataIndex].item.cart_info.subtotal_notax;
        intax = this.data[dataIndex].item.cart_info.subtotal_intax;
        this.element.$productInfoDefault.hide();
        if (this.param.flagRegular) {
            var option = this.data[0].item.option_info;
            for (i = 0; i < option.subscription.length; i++) {
                if (option.subscription[i].subscription_period == period) {
                    notax = option.subscription[i].subtotal_notax;
                    intax = option.subscription[i].subtotal_intax
                }
            }
        }
        price = notax * num;
        priceTax = intax * num;
        if (snm.util.objValidation(notax)) price = "";
        if (snm.util.objValidation(intax)) priceTax = "";
        this.contentChange(this.param.productInfoTotalPrice, this.textSepatate(price));
        this.contentChange(this.param.productInfoTotalPriceTax, this.textSepatate(priceTax))
    },
    textSepatate: function(num) {
        var text = num + "",
            textNum = text.length,
            commaText = "",
            i;
        for (i = textNum - 1; i >= 0; i--) {
            commaText += text.charAt(textNum - 1 - i);
            if (i % 3 == 0 && i != 0) {
                commaText += ","
            }
        }
        return commaText
    },
    renderSku: function() {
        var skuNum = this.model.get("skuNum"),
            self = this;
        this.quantitySetting();
        this.cartBtnSetting();
        this.changeShopingListProductsBtn();
        this.changeSetTreatShopsBtn();
        this.priceInfo();
        if (skuNum === 1 && this.param.flagImage) this.imageCreate();
        if (this.param.flagSku01 && this.param.flagSku02) {
            setTimeout(function() {
                self.skuNotSelectable(self.returnSkuObj(skuNum), skuNum)
            }, 1)
        }
    },
    returnSkuObj: function(skuNum) {
        var skuObj = [],
            length = this.data.length,
            i;
        if (!this.param.colorVal && !this.param.sizeVal) return false;
        for (i = 0; i < length; i++) {
            if (skuNum === 1 && this.param.colorVal !== "" || this.param.sizeVal === "") {
                if (this.data[i].sku01 == this.param.colorVal) {
                    skuObj.push({
                        stock_flg: this.data[i].stock_flg,
                        sku: this.data[i].sku02,
                        sku_name: this.data[i].sku02_name
                    })
                }
            } else if (skuNum === 2 || this.param.colorVal === "") {
                if (this.data[i].sku02 == this.param.sizeVal) {
                    skuObj.push({
                        stock_flg: this.data[i].stock_flg,
                        sku: this.data[i].sku01,
                        sku_name: this.data[i].sku01_name
                    })
                }
            }
        }
        return skuObj
    },
    skuNotSelectable: function(obj, axis) {
        var self = this,
            i, label, skuNum = obj.length,
            $sku = axis === 1 ? this.element.$productInfoSku01 : this.element.$productInfoSku02,
            $targetSku = axis === 1 ? this.element.$productInfoSku02 : this.element.$productInfoSku01,
            $sku01 = this.element.$productInfoSku01,
            $sku02 = this.element.$productInfoSku02,
            stockOffText = $targetSku.attr("data-out-stock"),
            selectVal = $targetSku.val(),
            option = '<option value="">選択してください</option>',
            skuArr = snm._.pluck(obj, "sku"),
            index = this.getJsonIndex(),
            defaultOption = axis === 1 ? this.param.defData.sku01 : this.param.defData.sku02,
            targetDeefaultOption = axis === 1 ? this.param.defData.sku02 : this.param.defData.sku01;
        if ($sku01.is("select") && $sku02.is("select")) {
            if ($sku01.prop("selectedIndex") === 0 && $sku02.prop("selectedIndex") === 0) {
                $sku01.html(this.param.defData.sku01);
                $sku02.html(this.param.defData.sku02);
                return false
            }
            if ($sku.prop("selectedIndex") === 0) {
                $targetSku.html(targetDeefaultOption).find("option").filter(function() {
                    return snm.$(this).val() == selectVal
                }).prop("selected", true);
                return false
            }
        }
        if ($targetSku.is("select") || $sku.is("select") && $sku.prop("selectedIndex") === 0) {
            if ($sku.is("select") && $sku.prop("selectedIndex") === 0) stockOffText = $sku.attr("data-out-stock");
            for (i = 0; i < skuNum; i++) {
                label = obj[i].stock_flg === true ? obj[i].sku_name : obj[i].sku_name + " " + stockOffText;
                option += '<option value="' + obj[i].sku + '">' + label + "</option>"
            }
        }
        if ($sku.is("select") && $sku.prop("selectedIndex") === 0) {
            if (!$targetSku.is("select")) {
                $targetSku.find(this.param.productInfoSkuNoStock).hide();
                $targetSku.find(this.param.productInfoSkuThumbnail).removeClass(this.param.isDisabled)
            }
            if (!this.model.get("sku01") && !this.model.get("sku02")) {
                option = defaultOption
            }
            $sku.html(option);
            return false
        }
        if ($targetSku.is("select")) {
            $targetSku.html(option);
            $targetSku.find("option").filter(function() {
                return snm.$(this).val() == selectVal
            }).prop("selected", true)
        } else {
            var imgAlt, diffVal = [];
            imgAlt = $targetSku.find("img").map(function(i, e) {
                if (!snm.$(e).parents(self.param.productInfoSkuNoStock)[0]) {
                    return snm.$(e).attr("alt")
                }
            });
            snm.$.each(imgAlt, function(i, v) {
                if (snm.$.inArray(v, skuArr) == -1) {
                    diffVal.push(v)
                }
            });
            $targetSku.find(this.param.productInfoSkuThumbnail).removeClass(this.param.isDisabled);
            if (diffVal.length > 0) {
                var j, len = diffVal.length;
                for (j = 0; j < len; j++) {
                    $targetSku.find("[alt='" + diffVal[j] + "']").closest(this.param.productInfoSkuThumbnail).addClass(this.param.isDisabled).removeClass(this.param.isActive)
                }
            }
            $targetSku.find(this.param.productInfoSkuNoStock).hide();
            var k;
            for (k = 0; k < skuNum; k++) {
                if (obj[k].stock_flg === false) {
                    $targetSku.find("[alt='" + obj[k].sku + "']").parents(this.param.productInfoSkuThumbnail).find(this.param.productInfoSkuNoStock).show()
                }
            }
        }
        var l, o, p, skuObj, sku01Arr = [],
            sku01Arr2 = [];
        for (l = 0; l < this.data.length; l++) {
            if (!snm.util.objValidation(this.data[l].sku01)) {
                sku01Arr.push(this.data[l].sku01)
            }
        }
        sku01Arr = snm._.uniq(sku01Arr);
        for (o = 0; o < sku01Arr.length; o++) {
            for (p = 0; p < this.data.length; p++) {
                if (sku01Arr[o] === this.data[p].sku01) {
                    sku01Arr2.push(this.data[p].sku01_name);
                    break
                }
            }
        }
        if (this.param.sizeVal && this.param.colorVal) {
            if ($sku01.is("select")) {
                option = '<option value="">選択してください</option>';
                selectVal = $sku01.val();
                var m;
                for (m = 0; m < sku01Arr.length; m++) {
                    option += '<option value="' + sku01Arr[m] + '">' + sku01Arr2[m] + "</option>"
                }
                $sku01.html(option);
                $sku01.find("option").filter(function() {
                    return snm.$(this).val() == self.param.colorVal
                }).prop("selected", true);
                skuObj = this.returnSkuObj(2);
                stockOffText = $sku01.attr("data-out-stock");
                if (index >= 0) {
                    var n;
                    for (n = 0; n < skuObj.length; n++) {
                        if (!skuObj[n].stock_flg) {
                            $sku01.find("option").filter(function() {
                                if (snm.$(this).val() == skuObj[n].sku) {
                                    snm.$(this).html(skuObj[n].sku_name + " " + stockOffText)
                                }
                            })
                        }
                    }
                }
            } else {
                $sku01.find(this.param.productInfoSkuThumbnail).removeClass(this.param.isDisabled);
                if (index < 0) $sku01.find(this.param.productInfoSkuNoStock).hide()
            }
            if (index < 0) {
                if (axis === 1) this.model.set("sku02", "", {
                    silent: true
                });
                if (axis === 2) this.model.set("sku01", "", {
                    silent: true
                })
            }
        }
    },
    renderBalloon: function(e) {
        snm.$(e.target).parents(this.param.productInfoBalloon).toggleClass(this.param.isSelected);
        return false
    },
    renderBalloonClose: function(e) {
        if (!snm.$(e.target).parents(this.param.productInfoBalloon)[0]) {
            this.$el.find(this.param.productInfoBalloon).removeClass(this.param.isSelected)
        }
        if (snm.$(e.target).is(this.param.productInfoBalloonClose) || snm.$(e.target).parents(this.param.productInfoBalloonClose).is(this.param.productInfoBalloonClose)) {
            this.$el.find(this.param.productInfoBalloon).removeClass(this.param.isSelected);
            return false
        }
    },
    slideSetting: function() {
        this.param.itemLen = this.element.$productInfoViewerSlider.eq(0).find(this.param.productInfoViewerSliderItem).length;
        this.param.baseWid = this.$el.find(this.param.productInfoViewerArea).width();
        this.param.sliderW = this.param.itemLen * this.param.baseWid + this.param.baseWid * 2;
        this.$el.find(this.param.productInfoViewerSliderItem).width(this.param.baseWid).show();
        if (this.param.isTablet) {
            this.$el.find(this.param.productInfoViewerSliderWrap).width(this.param.baseWid - 2).css({
                marginLeft: "-1px"
            })
        }
        this.element.$productInfoViewerSlider.width(this.param.sliderW).css("marginLeft", "-" + this.param.baseWid + "px")
    },
    slideCloneItem: function() {
        var cloneObjFirst = this.$el.find(this.param.productInfoViewerSliderItem).eq(0),
            cloneObjLast = this.$el.find(this.param.productInfoViewerSliderItem).eq(-1);
        cloneObjFirst.clone().appendTo(this.element.$productInfoViewerSlider);
        cloneObjLast.clone().prependTo(this.element.$productInfoViewerSlider)
    },
    nextAction: function() {
        if (this.model.get("status") == "stop") {
            this.model.set("status", "next")
        }
        return false
    },
    prevAction: function() {
        if (this.model.get("status") == "stop") {
            this.model.set("status", "prev")
        }
        return false
    },
    thumbnailAction: function(e) {
        this.param.thumbnailIndex = this.$el.find(this.param.productInfoViewerThumbnail).index(snm.$(e.target).parents(this.param.productInfoViewerThumbnail));
        this.model.set("thumbnail", true);
        this.$el.find(this.param.productInfoViewerSliderNext).show();
        this.$el.find(this.param.productInfoViewerSliderPrev).show();
        return false
    },
    thumbnailZoomAction: function(e) {
        if (snm._.isNumber(e)) {
            this.param.zoomIndex = e + 1
        } else {
            this.param.zoomIndex = snm.$(this.param.productInfoViewerThumbnailZoom).index(snm.$(e.target).parents(this.param.productInfoViewerThumbnailZoom));
            this.sliderAdjust()
        }
        var $thumbnai = snm.$(this.param.productInfoViewerThumbnailZoom).eq(this.param.zoomIndex),
            largeImage = this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).eq(this.param.zoomIndex).attr("data-large-image");
        this.isLargeImage(largeImage, this.element.$productInfoZoomModal);
        snm.$(this.param.productInfoViewerThumbnailZoom).removeClass(this.param.isActive);
        $thumbnai.addClass(this.param.isActive);
        this.element.$productInfoZoomModal.find(this.param.productInfoViewerScaleArea).hide();
        this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).removeClass(this.param.isActive).hide();
        this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).eq(this.param.zoomIndex).show();
        if (largeImage) this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).eq(this.param.zoomIndex).addClass(this.param.isActive);
        if (this.param.isTablet) {
            this.param.endScaleRate = 0;
            this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).eq(this.param.zoomIndex).css("-webkit-transform", "scale(1)")
        }
        this.changeImageDesc();
        this.$el.find(this.param.productInfoViewerThumbnailDefault).removeClass(this.param.isActive);
        if (this.param.zoomIndex === 0) this.$el.find(this.param.productInfoViewerThumbnailDefault).addClass(this.param.isActive)
    },
    sliderAdjust: function() {
        var $thumbnail = this.$el.find(this.param.productInfoViewerThumbnail),
            marginVal = this.param.baseWid * (this.param.zoomIndex + 1);
        this.element.$productInfoViewerSlider.css("marginLeft", "-" + marginVal + "px");
        $thumbnail.removeClass(this.param.isActive);
        if (this.param.zoomIndex > 0) $thumbnail.eq(this.param.zoomIndex - 1).addClass(this.param.isActive);
        this.param.count = this.param.zoomIndex
    },
    switchSelect: function() {
        var count = this.param.count == this.param.itemNum ? -1 : this.param.count - 1;
        this.$el.find(this.param.productInfoViewerThumbnail).removeClass(this.param.isActive);
        this.$el.find(this.param.productInfoViewerThumbnailDefault).removeClass(this.param.isActive);
        if (count < -1) count = this.param.itemNum - 2;
        if (count >= 0) {
            this.$el.find(this.param.productInfoViewerThumbnail).eq(count).addClass(this.param.isActive)
        } else {
            this.$el.find(this.param.productInfoViewerThumbnailDefault).addClass(this.param.isActive)
        }
        this.thumbnailZoomAction(count)
    },
    changeImageDesc: function() {
        var count, descText;
        if (this.param.count < 0) {
            count = this.$el.find(this.param.productInfoViewerThumbnail).length - 1
        } else {
            count = this.param.count == this.param.itemNum ? -1 : this.param.count - 1
        }
        if (count >= 0) {
            descText = this.$el.find(this.param.productInfoViewerThumbnail).eq(count).attr("data-desc-text")
        } else {
            descText = this.param.imageDesc ? this.param.imageDesc : this.param.defData.imageDesc
        }
        if (snm.util.objValidation(descText)) {
            descText = ""
        }
        this.$el.find(this.param.productInfoImageDesc).html(descText)
    },
    isLargeImage: function(src) {
        if (this.param.isTablet) return false;
        if (src) {
            snm.$(this.param.productInfoViewerExpand).show()
        } else {
            snm.$(this.param.productInfoViewerExpand).hide()
        }
    },
    imageCreate: function() {
        var self = this,
            thumbnailList = {
                list: [{}]
            },
            $thumbnai = this.$el.find(this.param.productInfoViewerThumbnailWrap),
            $imageDesc = this.$el.find(this.param.productInfoImageDesc),
            $zoomSlider = this.element.$productInfoZoomModal.find(this.param.productInfoViewerSlider),
            $zoomThumbnai = this.element.$productInfoZoomModal.find(this.param.productInfoViewerThumbnailWrap),
            $thumbnailDefault = this.$el.find(this.param.productInfoViewerThumbnailDefault),
            $sliderItem = this.$el.find(this.param.productInfoViewerSliderItem),
            $imgDefault = $sliderItem.length === 1 ? $sliderItem.eq(0) : $sliderItem.eq(1),
            $sliderFirstItem = this.element.$productInfoZoomModal.find(this.param.productInfoViewerThumbnailZoom).eq(0),
            imgDef = {},
            imgThumbnail = {},
            i, sliderList, sliderFirstItem, defaultTumbnailItem;
        for (i = 0; i < this.imgData.length; i++) {
            if (this.imgData[i].sku01 && this.imgData[i].sku01 === this.param.colorVal) {
                imgDef = this.imgData[i].default_image_info;
                imgThumbnail = this.imgData[i].thumbnail_image_info;
                break
            }
        }
        if (this.param.colorVal && imgDef && snm._.isEmpty(imgDef.default_image)) return false;
        snm.$(this.param.productInfoViewerThumbnailWrap).empty();
        snm.$(this.param.productInfoViewerSlider).empty();
        if (snm._.isEmpty(imgThumbnail) || snm._.isEmpty(imgThumbnail[0].default_image)) {
            $thumbnai.html(this.param.defData.thumbnail);
            $imageDesc.html(this.param.defData.imageDesc);
            this.element.$productInfoViewerSlider.html(this.param.defData.slider);
            $zoomThumbnai.html(this.param.defData.thumbnailZoom);
            $zoomSlider.html(this.param.defData.sliderZoom);
            this.param.imageDesc = "";
            if (this.param.colorVal || this.model.get("sku03")) {
                this.element.$productInfoViewerSlider.find(this.param.productInfoViewerSliderItem).eq(0).remove();
                if ($thumbnailDefault.length > 0) this.$el.find(this.param.productInfoViewerThumbnailDefault).remove();
                $zoomThumbnai.find(this.param.productInfoViewerThumbnailZoom).eq(0).remove();
                $zoomSlider.find(this.param.productInfoViewerSliderItem).eq(0).remove()
            }
        } else {
            snm.$.each(imgThumbnail, function(i, val) {
                thumbnailList.list[i] = {
                    text: val.text,
                    image: val.thumbnail_image
                };
                sliderList = self.param.$sliderClone.clone();
                sliderList.attr("data-large-image", val.large_image).find("img").attr("src", val.default_image);
                self.$el.find(self.param.productInfoViewerSlider).append(sliderList)
            });
            snm.$(self.param.productInfoZoomModal).find(self.param.productInfoViewerSlider).html(this.element.$productInfoViewerSlider.html());
            $thumbnai.html(this.param.thumbnailTmp(thumbnailList));
            $zoomThumbnai.html(this.param.thumbnailTmpZoom(thumbnailList))
        }
        if (!snm._.isEmpty(imgDef.default_image)) {
            sliderList = $imgDefault.clone();
            sliderList.attr("data-large-image", imgDef.large_image).find("img").attr("src", imgDef.default_image);
            this.element.$productInfoViewerSlider.prepend(sliderList);
            $imageDesc.html(imgDef.text);
            this.param.imageDesc = imgDef.text;
            sliderList = this.param.$sliderClone.clone();
            sliderList.attr("data-large-image", imgDef.large_image).find("img").attr("src", imgDef.default_image);
            $zoomSlider.prepend(sliderList);
            sliderFirstItem = $sliderFirstItem.clone();
            var thumbnail_image = !snm.util.objValidation(imgDef.thumbnail_image) ? imgDef.thumbnail_image : imgDef.default_image;
            if ($thumbnailDefault.length > 0) {
                defaultTumbnailItem = $thumbnailDefault.clone()
            } else {
                defaultTumbnailItem = this.$el.find(this.param.productInfoViewerThumbnail).eq(0).clone();
                defaultTumbnailItem.removeClass(this.param.productInfoViewerThumbnail.replace(".", "")).addClass(this.param.productInfoViewerThumbnailDefault.replace(".", "")).removeAttr("data-desc-text")
            }
            defaultTumbnailItem.addClass(this.param.isActive).find("img").attr("src", thumbnail_image);
            sliderFirstItem.find("img").attr("src", thumbnail_image);
            $thumbnai.prepend(defaultTumbnailItem);
            $zoomThumbnai.prepend(sliderFirstItem);
            $zoomThumbnai.find(this.param.productInfoViewerThumbnailZoom).eq(0).addClass(this.param.isActive);
            this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem).slice(1).hide()
        }
        this.param.count = 0;
        this.param.itemNum = this.$el.find(this.param.productInfoViewerSliderItem).length;
        this.sliderInit()
    },
    render: function() {
        var self = this,
            moveVal = this.param.baseWid,
            calc;
        if (this.model.get("status") == "next") {
            calc = "-=";
            this.param.count++;
            if (this.touchM) {
                moveVal = this.param.baseWid + this.touchM;
                this.param.marginLeft = Number(this.element.$productInfoViewerSlider.css("marginLeft").replace("px", "")) - this.param.baseWid
            }
        } else {
            calc = "+=";
            this.param.count--;
            if (this.touchM) {
                moveVal = this.param.baseWid - this.touchM;
                this.param.marginLeft = Number(this.element.$productInfoViewerSlider.css("marginLeft").replace("px", "")) + this.param.baseWid
            }
        }
        this.switchSelect();
        this.changeImageDesc();
        this.element.$productInfoViewerSlider.animate({
            marginLeft: calc + moveVal + "px"
        }, this.param.speed, this.param.easing, function() {
            if (self.touchM && self.touchM != 0) {
                self.touchM = 0;
                self.$el.find(self.param.productInfoViewerSlider).css("transform", "translate3d(0,0,0)");
                self.$el.find(self.param.productInfoViewerSlider).css("marginLeft", self.param.marginLeft)
            }
            if (self.model.get("status") == "next" && self.param.count == self.param.itemNum) {
                self.$el.find(self.param.productInfoViewerSlider).css("marginLeft", "-" + self.param.baseWid + "px");
                self.param.count = 0
            } else if (self.param.count < 0) {
                self.$el.find(self.param.productInfoViewerSlider).css("marginLeft", "-" + (self.param.sliderW - self.param.baseWid * 2) + "px");
                self.param.count = self.param.itemNum - 1
            }
            self.model.set("status", "stop", {
                silent: true
            });
            self.isLargeImage(self.$el.find(self.param.productInfoViewerSliderItem).eq(self.param.count + 1).attr("data-large-image"))
        })
    },
    renderThumbnail: function() {
        var self = this;
        this.param.count = this.param.thumbnailIndex + 1;
        this.element.$productInfoViewerSlider.animate({
            marginLeft: "-" + this.param.baseWid * (this.param.count + 1) + "px"
        }, this.param.speed, this.param.easing, function() {
            self.model.set("thumbnail", false, {
                silent: true
            })
        });
        this.isLargeImage(this.element.$productInfoViewerSliderItem.eq(this.param.count + 1).attr("data-large-image"));
        this.switchSelect();
        this.changeImageDesc();
        if (this.param.flagSku01) {
            setTimeout(function() {
                var length = self.data.length,
                    stockOffText01 = self.$el.find(self.param.productInfoSku01).attr("data-out-stock"),
                    i;
                for (i = 0; i < length; i++) {
                    if (self.data[i].sku01 == self.$el.find(self.param.productInfoColor).val()) {
                        if (!self.data[i].stock_flg) {
                            self.$el.find(self.param.productInfoSku01 + " option[value = '" + self.data[i].sku02 + "']").html(self.data[i].sku02 + " " + stockOffText01)
                        } else {
                            self.$el.find(self.param.productInfoSku01 + " option[value = '" + self.data[i].sku02 + "']").html(self.data[i].sku02)
                        }
                    }
                }
            }, 1)
        }
    },
    renderMouseOver: function(e) {
        var self = this,
            $item = snm.$(e.target),
            $scaleImg = this.element.$productInfoViewerScaleImg,
            $scaleArea = this.element.$productInfoViewerScaleArea,
            largeImg = $item.parents(this.param.productInfoViewerSliderItem).attr("data-large-image") || $item.attr("data-large-image"),
            startLeft, startTop, lensLeft, lensTop, maxLeft, maxTop;
        if (this.param.isTablet) return false;
        if ($item.is(this.param.productInfoViewerSliderNext + "," + this.param.productInfoViewerSliderPrev)) {
            return
        }
        if (largeImg) {
            this.param.flagMouseOn = true
        } else {
            return
        }
        if (this.model.get("thumbnail") || this.model.get("status") !== "stop") {
            return
        }
        this.scrollEventOn();
        this.param.currentImgWid = $item.width();
        this.param.currentImgHei = $item.height();
        this.param.sliderItemOffsetX = e.offsetX;
        this.param.sliderItemOffsetY = e.offsetY;
        $scaleImg.attr("src", largeImg);
        $scaleArea.css({
            width: this.$el.find(this.param.productInfoViewerScaleBase).width(),
            height: this.getScaleAreaHeight() + "px",
            left: this.$el.find(this.param.productInfoViewerArea).outerWidth(),
            visibility: "hidden"
        }).show();
        this.element.$productInfoViewerLens.show().css("visibility", "hidden");
        snm.util.preload.init([largeImg], function() {
            $scaleArea.css("visibility", "visible");
            self.element.$productInfoViewerLens.css("visibility", "visible");
            self.param.ratioX = $scaleImg.width() / $item.width();
            self.param.ratioY = $scaleImg.height() / $item.height();
            self.param.lensWid = $scaleArea.width() / $scaleImg.width() * $item.width();
            self.param.lensHei = self.getScaleLensHeight();
            lensLeft = self.param.sliderItemOffsetX - self.param.lensWid / 2;
            lensTop = self.param.sliderItemOffsetY - self.param.lensHei / 2;
            if (lensLeft <= 0) {
                lensLeft = 0
            }
            if (lensLeft + self.param.lensWid >= $item.width()) {
                lensLeft = $item.width() - self.param.lensWid
            }
            if (lensTop <= 0) {
                lensTop = 0
            }
            if (lensTop + self.param.lensHei >= $item.width()) {
                lensTop = $item.height() - self.param.lensHei
            }
            self.element.$productInfoViewerLens.css({
                width: self.param.lensWid + "px",
                height: self.param.lensHei + "px",
                left: lensLeft + "px",
                top: lensTop + "px"
            });
            startLeft = lensLeft * self.param.ratioX;
            startTop = lensTop * self.param.ratioY;
            maxLeft = $scaleImg.width() - $item.width();
            maxTop = $scaleImg.height() - $item.height();
            self.param.startX = startLeft;
            self.param.startY = startTop;
            if (startLeft > maxLeft) {
                startLeft = $scaleImg.width() - $scaleArea.width()
            }
            if (startTop > maxTop) {
                startTop = maxTop
            }
            if ($scaleImg.width() <= $scaleArea.width() || lensLeft <= 0) startLeft = 0;
            if ($scaleImg.height() <= $scaleArea.height() || lensTop <= 0) startTop = 0;
            $scaleImg.css({
                position: "relative",
                left: "-" + startLeft + "px",
                top: "-" + startTop + "px"
            })
        })
    },
    renderMouseOut: function() {
        this.param.flagMouseOn = false;
        this.element.$productInfoViewerScaleArea.hide();
        this.element.$productInfoViewerScaleImg.css({
            top: 0,
            left: 0
        });
        this.element.$productInfoViewerLens.hide();
        this.scrollEventOff()
    },
    renderMouseMove: function(e) {
        var moveX = Math.abs(e.clientX),
            moveY = e.pageY,
            offset = this.$el.find(this.param.productInfoViewerSliderWrap).offset(),
            maxX = offset.left + this.param.currentImgWid - this.param.lensWid / 2,
            maxY = offset.top + this.param.currentImgHei - this.param.lensHei / 2,
            isAreaVisible = this.element.$productInfoViewerScaleArea.is(":visible"),
            left, top, scaleImgTop;
        this.param.sliderItemOffsetX = e.offsetX;
        this.param.sliderItemOffsetY = e.offsetY;
        if (this.param.flagMouseOn) {
            if (!isAreaVisible) this.renderMouseOver(e);
            left = moveX - (offset.left + this.param.lensWid / 2);
            if (moveX - offset.left < this.param.lensWid / 2) {
                left = 0
            }
            if (moveX > maxX) {
                left = this.param.currentImgWid - this.param.lensWid
            }
            top = moveY - (offset.top + this.param.lensHei / 2);
            if (moveY - offset.top < this.param.lensHei / 2) {
                top = 0
            }
            if (moveY > maxY) {
                top = this.param.currentImgHei - this.param.lensHei
            }
            this.param.lensHei = this.getScaleLensHeight();
            this.element.$productInfoViewerLens.css({
                left: left + "px",
                top: top + "px",
                height: this.param.lensHei + "px"
            });
            if (moveX < maxX) {
                this.element.$productInfoViewerScaleImg.css({
                    left: "-" + (moveX - (offset.left + this.param.lensWid / 2)) * this.param.ratioX + "px"
                })
            }
            if (moveY < maxY) {
                this.element.$productInfoViewerScaleImg.css({
                    top: "-" + (moveY - (offset.top + this.param.lensHei / 2)) * this.param.ratioY + "px"
                })
            }
            if (moveY > maxY) {
                scaleImgTop = (this.$el.find(this.param.productInfoViewerSliderItem + ":visible").height() - this.param.lensHei) * this.param.ratioY;
                if (scaleImgTop <= 0) scaleImgTop = 0;
                this.element.$productInfoViewerScaleImg.css({
                    top: "-" + scaleImgTop + "px"
                })
            }
            this.element.$productInfoViewerScaleArea.css("height", this.getScaleAreaHeight() + "px")
        }
    },
    getScaleAreaHeight: function() {
        var bottomSpace = 20,
            scrollBottom = snm.$(window).height() + snm.$(document).scrollTop() - bottomSpace,
            height = scrollBottom - this.$el.find(this.param.productInfoViewerArea).offset().top;
        return height
    },
    getScaleLensHeight: function() {
        var scaleAreaHei = this.element.$productInfoViewerScaleArea.height(),
            scaleImgHei = this.element.$productInfoViewerScaleImg.height(),
            sliderItemHei = this.$el.find(this.param.productInfoViewerSliderItem).height(),
            height = scaleAreaHei / scaleImgHei * sliderItemHei;
        return height
    },
    renderModalZoom: function() {
        var $item = this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderItem),
            width = this.element.$productInfoZoomModal.find(this.param.productInfoViewerArea).width();
        $item.width(width).eq(this.param.zoomIndex).show();
        this.element.$productInfoZoomModal.find(this.param.productInfoViewerScaleArea).hide();
        this.param.modalZoom.render();
        if (this.param.isTablet) {
            $item.eq(this.param.zoomIndex).css("-webkit-transform", "scale(1)")
        }
    },
    renderZoomOn: function(e) {
        var self = this,
            $item = snm.$(e.target),
            $scaleArea = this.element.$productInfoZoomModal.find(this.param.productInfoViewerScaleArea),
            $scaleImg = this.element.$productInfoZoomModal.find(this.param.productInfoViewerScaleImg),
            largeImg = $item.parents(this.param.productInfoViewerSliderItem).attr("data-large-image") || $item.attr("data-large-image");
        if (!largeImg) {
            return
        }
        $scaleImg.attr("src", largeImg);
        snm.util.preload.init([largeImg], function() {
            $scaleArea.toggle().css({
                width: $item.width(),
                height: $item.height()
            });
            self.param.zoomRatioX = $scaleImg.width() / $item.width();
            self.param.zoomRatioY = $scaleImg.height() / $item.height();
            $scaleImg.css({
                position: "relative",
                left: "-" + (e.offsetX * self.param.zoomRatioX - e.offsetX) + "px",
                top: "-" + (e.offsetY * self.param.zoomRatioY - e.offsetY) + "px"
            });
            self.element.$productInfoZoomModal.find(self.param.productInfoViewerSliderItem).hide()
        })
    },
    renderZoomMove: function(e) {
        if (this.param.flagMouseOnZoom) {
            var offset = this.element.$productInfoZoomModal.find(this.param.productInfoViewerSliderWrap).offset(),
                x = e.pageX - offset.left,
                y = e.pageY - offset.top,
                moveX = x * this.param.zoomRatioX - x,
                moveY = y * this.param.zoomRatioY - y,
                $parent = snm.$(e.target).parents(this.param.productInfoViewerArea);
            $parent.find(this.param.productInfoViewerScaleImg).css({
                left: "-" + moveX + "px",
                top: "-" + moveY + "px"
            })
        }
    },
    renderTouchStart: function(e) {
        if (this.model.get("status") == "stop") {
            this.touchM = 0;
            this.touchS = e.originalEvent.touches[0].pageX
        }
    },
    renderTouchMove: function(e) {
        e.preventDefault();
        if (this.model.get("status") == "stop") {
            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            this.touchM = touch.pageX - this.touchS;
            this.element.$productInfoViewerSlider.css("transform", "translate3d(" + this.touchM + "px,0,0)")
        }
    },
    renderTouchEnd: function() {
        if (this.model.get("status") == "stop") {
            if (this.touchM > this.param.swipeTriggerNum) {
                this.prevAction()
            } else if (this.touchM < "-" + this.param.swipeTriggerNum) {
                this.nextAction()
            } else {
                this.element.$productInfoViewerSlider.css("transform", "translate3d(0,0,0)")
            }
        }
    },
    renderDeliveryDate: function(loading) {
        this.param.deliveryDate.render(loading, false)
    },
    sliderReset: function() {
        var self = this;
        this.model.set("thumbnail", true, {
            silent: true
        });
        this.$el.find(this.param.productInfoViewerThumbnail).removeClass(this.param.isActive);
        this.$el.find(this.param.productInfoViewerThumbnailDefault).addClass(this.param.isActive);
        this.$el.find(this.param.productInfoImageDesc).html(this.param.defData.imageDesc);
        this.element.$productInfoViewerSlider.animate({
            marginLeft: "-" + this.param.baseWid + "px"
        }, this.param.speed, this.param.easing, function() {
            self.model.set("thumbnail", false, {
                silent: true
            })
        });
        this.param.count = 0;
        this.isLargeImage(this.$el.find(this.param.productInfoViewerThumbnailDefault).attr("data-large-image"));
        this.thumbnailZoomAction(-1);
        return false
    },
    cartBtnInit: function() {
        var defBtn = this.$el.find("[data-btn-type]:visible"),
            defVal = defBtn.attr("value") ? defBtn.val() : defBtn.html(),
            addBtn;
        if (!this.param.flagAttention) {
            return
        }
        if (this.param.flagSku01 || this.param.flagSku02 || this.param.flagSku03) {
            if (defBtn.prop("disabled")) {
                defBtn.addClass(this.param.isDsabled)
            }
            defBtn.prop("disabled", false);
            if (!defBtn.hasClass(this.param.productInfoDefaultBtn)) {
                defBtn.addClass(this.param.productInfoDefaultBtn)
            }
            defBtn.removeClass("js-pressTwice")
        } else if (this.param.flagRegular || this.param.flagMedicine) {
            this.param.defaultBtnState = defBtn.attr("data-btn-type");
            if (defBtn.prop("disabled")) {
                addBtn = '<button type="button" class="' + defBtn.attr("class").replace("js-pressTwice", "") + " " + this.param.productInfoDefaultBtn + " " + this.param.isDsabled + '" data-btn-type="defaultBtn">' + defVal + "</button>"
            } else {
                addBtn = '<button type="button" class="' + defBtn.attr("class").replace("js-pressTwice", "") + " " + this.param.productInfoDefaultBtn + '" data-btn-type="defaultBtn">' + defVal + "</button>"
            }
            defBtn.hide().before(addBtn)
        }
    },
    attentionCheckOn: function(e) {
        snm.$(e.target).closest(".js-productInfoBtnWrap").prev().find(this.param.productInfoAttentionPopup).stop().fadeIn("fast")
    },
    attentionCheckOff: function(e) {
        snm.$(e.target).closest(".js-productInfoBtnWrap").prev().find(this.param.productInfoAttentionPopup).stop().fadeOut("fast");
    },
    btnNoAction: function() {
        return false
    },
    setShopingListProductsBtn: function() {
        var defBtn = this.$el.find(this.param.ajaxShopingListProductsBtn).parent();
        var alertBtn = defBtn.get(0).outerHTML;
        defBtn.addClass(this.param.productInfoShoppingListBtn.replace(".", ""));
        defBtn.hide().after(alertBtn);
        defBtn.parent().children(':not("' + this.param.productInfoShoppingListBtn + "," + this.param.ajaxShopingListProductsMsg + '")').addClass(this.param.productInfoShoppingListAlertBtn.replace(".", ""));
        this.$el.find(this.param.productInfoShoppingListAlertBtn + " " + this.param.ajaxShopingListProductsBtn).removeClass(this.param.ajaxShopingListProductsBtn.replace(".", "")).addClass(this.param.productInfoDefaultBtn)
    },
    changeShopingListProductsBtn: function() {
        var index = this.getJsonIndex(),
            defBtn = this.$el.find(this.param.productInfoShoppingListBtn),
            alertBtn = this.$el.find(this.param.productInfoShoppingListAlertBtn);
        if (index < 0 || this.param.flagSku01 && !this.model.get("sku01") || this.param.flagSku02 && !this.model.get("sku02") || this.param.flagSku03 && !this.model.get("sku03")) {
            defBtn.hide();
            alertBtn.show()
        } else {
            defBtn.show();
            alertBtn.hide()
        }
    },
    setTreatShopsBtn: function() {
        var self = this;
        var $defBtn = this.$el.find(this.param.productInfoTreatShopsBtn);
        var $alertBtn = $defBtn.eq(0).clone().removeClass(this.param.productInfoTreatShopsBtn.replace(".", "")).addClass(this.param.productInfoDefaultBtn.replace(".", "") + " " + this.param.productInfoTreatShopsAlertBtn.replace(".", ""));
        $defBtn.hide().after($alertBtn)
    },
    changeSetTreatShopsBtn: function() {
        var index = this.getJsonIndex(),
            $defBtn = this.$el.find(this.param.productInfoTreatShopsBtn),
            $alertBtn = this.$el.find(this.param.productInfoTreatShopsAlertBtn);
        if (index < 0 || this.param.flagSku01 && !this.model.get("sku01") || this.param.flagSku02 && !this.model.get("sku02") || this.param.flagSku03 && !this.model.get("sku03")) {
            $defBtn.hide();
            $alertBtn.show()
        } else {
            $defBtn.show();
            $alertBtn.hide()
        }
    }
});
snm.module.model.SelectAction = snm.Backbone.Model.extend({});
snm.module.view.SelectAction = snm.Backbone.View.extend({
    param: {
        dataActionUrl: "data-action-url"
    },
    events: {
        change: "modelChange"
    },
    initialize: function() {
        this.model.on("change", this.render, this)
    },
    modelChange: function(e) {
        var attr = this.$el.find("option:selected").attr(this.param.dataActionUrl);
        if (attr) this.model.set("url", attr)
    },
    render: function() {
        location.href = this.model.get("url");
        this.model.set("url", null, {
            silent: true
        })
    }
});
snm.module.model.SelectCalendar = snm.Backbone.Model.extend({});
snm.module.collection.SelectCalendar = snm.Backbone.Collection.extend({});
snm.module.view.SelectCalendar = snm.Backbone.View.extend({
    param: {
        selectCalendarWrap: ".js-selectCalendarWrap",
        selectCalendarItem: ".js-selectCalendarItem",
        selectCalendarTrigger: ".js-selectCalendarTrigger",
        selectCalendarDating: ".js-selectCalendarDating",
        selectCalendarText: ".js-selectCalendarText",
        selectCalendarForm: ".js-selectCalendarForm",
        dataChangeDateAction: "data-change-date-action",
        dataSelectCalendarType: "data-select-calendar-type",
        isHide: "is-hide",
        baseDate: []
    },
    events: {
        "change .js-selectCalendarTrigger": "render"
    },
    initialize: function() {
        this.param.baseDate = this.getSelectDate();
        this.setChangeEvent("set")
    },
    render: function() {
        var trigger = this.$el.find(this.param.selectCalendarTrigger),
            triggerVal, dataVal;
        if (trigger[0].nodeName === "SELECT") {
            triggerVal = this.$el.find(this.param.selectCalendarTrigger).val();
            dataVal = this.$el.find(this.param.selectCalendarTrigger + " option[value = '" + triggerVal + "']").attr(this.param.dataSelectCalendarType)
        } else {
            dataVal = this.$el.find(this.param.selectCalendarTrigger + ":checked").attr(this.param.dataSelectCalendarType)
        }
        if (!dataVal) {
            return
        }
        this.changeCalendar(dataVal)
    },
    changeCalendar: function(type) {
        var self = this,
            wrapper = this.$el.find(this.param.selectCalendarWrap),
            targetText = this.$el.find(this.param.selectCalendarText),
            submitFlag = false;
        if (!wrapper.length) {
            return
        }
        this.setChangeEvent("remove");
        wrapper.each(function() {
            var hideCalendar = snm.$(this).find(self.param.selectCalendarItem + ":visible"),
                dispCalendar = snm.$(this).find(self.param.selectCalendarItem + "[" + self.param.dataSelectCalendarType + " = '" + type + "']"),
                dispSelect = dispCalendar.find(self.param.selectCalendarDating),
                beforeType = hideCalendar.attr(self.param.dataSelectCalendarType),
                beforeDate = hideCalendar.find(self.param.selectCalendarDating).val();
            if (!dispSelect.length || dispSelect.length && dispSelect.find("option:eq(0)").val() === "") {
                submitFlag = true
            }
            if (dispCalendar.length && type !== beforeType) {
                snm.$(this).find(self.param.selectCalendarItem + ':not(".' + self.param.isHide + '")').addClass(self.param.isHide);
                if (dispSelect.length && hideCalendar.find(self.param.selectCalendarDating).length && beforeDate !== "") {
                    if (dispCalendar.find(self.param.selectCalendarDating + " option[value = '" + beforeDate + "']").length) {
                        dispSelect.val(beforeDate)
                    } else {
                        dispSelect.val(dispSelect.find("option:eq(0)").val())
                    }
                }
                dispCalendar.removeClass(self.param.isHide);
                if (dispSelect.length) {
                    dispSelect.change()
                }
            }
        });
        if (type === "delivery" && targetText.hasClass(this.param.isHide)) {
            targetText.removeClass(this.param.isHide)
        } else if (type === "store" && !targetText.hasClass(this.param.isHide)) {
            targetText.addClass(this.param.isHide)
        }
        if (submitFlag) {
            var $targetForm = this.$el.find(this.param.selectCalendarForm);
            $targetForm.attr("action", $targetForm.attr(this.param.dataChangeDateAction)).submit();
            return false
        } else {
            this.changeSelect()
        }
        this.setChangeEvent("set")
    },
    getSelectDate: function() {
        var self = this,
            days = [],
            wrapper = this.$el.find(this.param.selectCalendarWrap);
        if (wrapper.length) {
            wrapper.each(function() {
                var targetCalendar = snm.$(this).find(self.param.selectCalendarItem + ":visible");
                if (targetCalendar.length && targetCalendar.find(self.param.selectCalendarDating).length) {
                    days.push(targetCalendar.find(self.param.selectCalendarDating).val())
                } else {
                    days.push("")
                }
            })
        }
        return days
    },
    checkDate: function() {
        var nowDate = this.getSelectDate(),
            changeFlag = false;
        snm.$.each(this.param.baseDate, function(i, value) {
            if (nowDate[i] !== value) {
                changeFlag = true
            }
        });
        return changeFlag
    },
    setChangeEvent: function(type) {
        var self = this,
            wrapper = this.$el.find(this.param.selectCalendarWrap);
        if (wrapper.length) {
            wrapper.each(function() {
                var targetCalendar = snm.$(this).find(self.param.selectCalendarItem + ":visible");
                if (targetCalendar.length && targetCalendar.find(self.param.selectCalendarDating).length) {
                    if (type === "set") {
                        targetCalendar.off("change.select_calendar_change", self.param.selectCalendarDating).on("change.select_calendar_change", self.param.selectCalendarDating, function() {
                            self.changeSelect()
                        })
                    } else {
                        targetCalendar.off("change.select_calendar_change", self.param.selectCalendarDating)
                    }
                }
            })
        }
    },
    changeSelect: function() {
        if (this.checkDate()) {
            var $targetForm = this.$el.find(this.param.selectCalendarForm);
            $targetForm.attr("action", $targetForm.attr(this.param.dataChangeDateAction)).submit()
        }
    }
});
snm.module.model.SelectImage = snm.Backbone.Model.extend({});
snm.module.view.SelectImage = snm.Backbone.View.extend({
    param: {
        selectImageViewerArea: ".js-selectImageViewerArea",
        selectImageViewerSlider: ".js-selectImageViewerSlider",
        selectImageViewerSliderWrap: ".js-selectImageViewerSliderWrap",
        selectImageViewerSliderItem: ".js-selectImageViewerSliderItem",
        selectImageViewerThumbnail: ".js-selectImageViewerThumbnail",
        selectImageViewerThumbnailZoom: ".js-selectImageViewerThumbnailZoom",
        selectImageViewerScaleBase: ".js-selectImageViewerScaleBase",
        selectImageViewerScaleArea: ".js-selectImageViewerScaleArea",
        selectImageViewerScaleImg: ".js-selectImageViewerScaleImg",
        selectImageViewerSliderPrev: ".js-selectImageViewerSliderPrev",
        selectImageViewerSliderNext: ".js-selectImageViewerSliderNext",
        selectImageViewerLens: ".js-selectImageViewerLens",
        selectImageViewerExpand: ".js-selectImageViewerExpand",
        selectImageZoomModal: ".js-selectImageZoomModal",
        selectImageViewerThumbnailDefault: ".js-selectImageViewerThumbnailDefault",
        modalZoom: "#js-modalZoom",
        isActive: "is-active",
        speed: 400,
        easing: "linear",
        count: 0,
        zoomIndex: 0,
        swipeTriggerNum: 50
    },
    events: {
        "click .js-selectImageViewerSliderPrev": "prevAction",
        "click .js-selectImageViewerSliderNext": "nextAction",
        "click .js-selectImageViewerThumbnail": "thumbnailAction",
        "click .js-selectImageViewerSliderItem, .js-selectImageViewerLens": "renderModalZoom",
        "click .js-selectImageViewerThumbnailDefault": "sliderReset",
        "mouseenter .js-selectImageViewerSliderItem": "renderMouseOver",
        "mouseleave .js-selectImageViewerSliderWrap": "renderMouseOut",
        "mouseover .js-selectImageViewerSliderNext": "scaleHide",
        "mouseover .js-selectImageViewerSliderPrev": "scaleHide",
        "mousemove ": "renderMouseMove",
        "touchstart .js-selectImageViewerSliderItem": "renderTouchStart",
        "touchmove .js-selectImageViewerSliderItem": "renderTouchMove",
        "touchend .js-selectImageViewerSliderItem": "renderTouchEnd"
    },
    initialize: function() {
        this.model.set("status", "stop");
        this.model.on("change:status", this.render, this);
        this.model.on("change:thumbnail", this.renderThumbnail, this);
        this.param.modalFlag = false;
        this.objectCache();
        this.initParam();
        this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem).slice(1).hide();
        this.initElement();
        if (this.param.modalFlag) {
            this.initAddEvents()
        }
        var scaleImg = snm.$("#js-modalZoom").find(this.param.selectImageViewerScaleImg).closest("div");
        scaleImg.html('<div class="imgCoverWrap"><span class="imgCover" style="z-index:10"></span>' + scaleImg.html() + "</div>");
        snm.$("#js-modalZoom").find(this.param.selectImageViewerThumbnailZoom).eq(0).find("a").prepend('<span class="imgCover" style="width:50px;height:50px;z-index:10"></span>')
    },
    initParam: function() {
        this.param.itemNum = this.element.$selectImageViewerSlider.eq(0).find(this.param.selectImageViewerSliderItem).length;
        this.param.$sliderClone = this.element.$selectImageViewerSliderItem.eq(0);
        this.param.$thumbnailClone = this.$el.find(this.param.selectImageViewerThumbnail).eq(0);
        if (snm.$(this.param.modalZoom)[0]) {
            this.param.modalFlag = true;
            this.param.modalZoom = new snm.module.Modal({
                el: snm.$(this.param.modalZoom),
                clickDel: true
            })
        }
        this.param.isTablet = snm.util.navigator.tablet;
        if (!this.param.isTablet) {
            this.param.isTablet = snm.util.navigator.smartphone
        }
    },
    initElement: function() {
        this.sliderInit();
        if (this.$el.find("[data-large-image]").length == 0) {
            delete this.events.mouseover;
            delete this.events.mouseout;
            delete this.events.mousemove
        }
        if (this.param.isTablet) {
            this.element.$selectImageZoomModal.find(this.param.selectImageViewerExpand).hide()
        }
    },
    initAddEvents: function() {
        var self = this;
        this.element.$selectImageZoomModal.on("click", this.param.selectImageViewerThumbnailZoom, function(e) {
            self.thumbnailZoomAction(e);
            return false
        });
        if (!this.param.isTablet) {
            this.element.$selectImageZoomModal.on("click", this.param.selectImageViewerSliderItem, function(e) {
                self.renderZoomOn(e);
                return false
            })
        }
        this.element.$selectImageZoomModal.on("mousemove", function(e) {
            self.renderZoomMove(e)
        });
        this.element.$selectImageZoomModal.on("mouseenter", this.param.selectImageViewerScaleArea, function() {
            self.param.flagMouseOnZoom = true
        });
        this.element.$selectImageZoomModal.on("mouseleave", this.param.selectImageViewerScaleArea, function() {
            self.param.flagMouseOnZoom = false
        });
        this.element.$selectImageZoomModal.on("click", this.param.selectImageViewerScaleArea, function() {
            snm.$(self.param.selectImageZoomModal).find(self.param.selectImageViewerScaleArea).hide();
            snm.$(self.param.selectImageZoomModal).find(self.param.selectImageViewerSliderItem).eq(self.param.zoomIndex).show();
            self.param.flagMouseOnZoom = false
        });
        if (this.param.isTablet) {
            this.param.startDistance = null;
            this.element.$selectImageZoomModal.on("touchstart", this.param.selectImageViewerSliderItem, function(e) {
                var touch = e.originalEvent.touches,
                    x, y;
                if (touch.length > 1) {
                    x = touch[0].pageX - touch[1].pageX;
                    y = touch[0].pageY - touch[1].pageY;
                    self.param.startDistance = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))
                }
            });
            this.element.$selectImageZoomModal.on("touchmove", this.param.selectImageViewerSliderItem, function(e) {
                var touch = e.originalEvent.touches,
                    x, y;
                if (!e.originalEvent.scale) {
                    x = touch[0].pageX - touch[1].pageX;
                    y = touch[0].pageY - touch[1].pageY;
                    self.param.scale = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) / self.param.startDistance
                } else {
                    self.param.scale = e.originalEvent.scale
                }
                if (self.param.endScaleRate > 0) self.param.scale += self.param.endScaleRate - 1;
                if (self.param.scale <= 1) return false;
                snm.$(this).css("-webkit-transform", "scale(" + self.param.scale + ")");
                return false
            });
            this.element.$selectImageZoomModal.on("touchend", this.param.selectImageViewerSliderItem, function() {
                self.param.endScaleRate = self.param.scale
            })
        }
    },
    scrollEventOn: function() {
        var self = this;
        snm.$(window).on("scroll.producet_info_scroll", function() {
            self.$el.trigger("mousemove")
        })
    },
    scrollEventOff: function() {
        snm.$(window).off("scroll.producet_info_scroll")
    },
    sliderInit: function() {
        if (this.param.itemNum === 1) {
            this.$el.find(this.param.selectImageViewerSliderNext).hide();
            this.$el.find(this.param.selectImageViewerSliderPrev).hide();
            this.element.$selectImageViewerSlider.css({
                width: "100%",
                marginLeft: 0
            })
        } else {
            this.$el.find(this.param.selectImageViewerSliderNext).show();
            this.$el.find(this.param.selectImageViewerSliderPrev).show()
        }
        this.element.$selectImageViewerSliderItem.slice(1).hide();
        this.isLargeImage(this.$el.find(this.param.selectImageViewerSliderItem).eq(0).attr("data-large-image"));
        if (this.param.itemNum !== 1) {
            this.element.$selectImageViewerSliderItem.show();
            this.slideSetting();
            this.slideCloneItem()
        }
    },
    objectCache: function() {
        this.element = {};
        this.element.$selectImageViewerSlider = this.$el.find(this.param.selectImageViewerSlider);
        this.element.$selectImageViewerSliderItem = this.$el.find(this.param.selectImageViewerSliderItem);
        this.element.$selectImageViewerScaleArea = this.$el.find(this.param.selectImageViewerScaleArea);
        this.element.$selectImageViewerScaleImg = this.$el.find(this.param.selectImageViewerScaleImg);
        this.element.$selectImageViewerLens = this.$el.find(this.param.selectImageViewerLens);
        this.element.$selectImageZoomModal = snm.$(this.param.selectImageZoomModal)
    },
    scaleHide: function() {
        this.element.$selectImageViewerLens.hide();
        this.element.$selectImageViewerScaleArea.hide()
    },
    slideSetting: function() {
        this.param.itemLen = this.element.$selectImageViewerSlider.eq(0).find(this.param.selectImageViewerSliderItem).length;
        this.param.baseWid = this.$el.find(this.param.selectImageViewerArea).width();
        this.param.sliderW = this.param.itemLen * this.param.baseWid + this.param.baseWid * 2;
        this.$el.find(this.param.selectImageViewerSliderItem).width(this.param.baseWid).show();
        if (this.param.isTablet) {
            this.$el.find(this.param.selectImageViewerSliderWrap).width(this.param.baseWid - 2).css({
                marginLeft: "-1px"
            })
        }
        this.element.$selectImageViewerSlider.width(this.param.sliderW).css("marginLeft", "-" + this.param.baseWid + "px")
    },
    slideCloneItem: function() {
        var cloneObjFirst = this.$el.find(this.param.selectImageViewerSliderItem).eq(0),
            cloneObjLast = this.$el.find(this.param.selectImageViewerSliderItem).eq(-1);
        cloneObjFirst.clone().appendTo(this.element.$selectImageViewerSlider);
        cloneObjLast.clone().prependTo(this.element.$selectImageViewerSlider)
    },
    nextAction: function() {
        if (this.model.get("status") == "stop") {
            this.model.set("status", "next")
        }
        return false
    },
    prevAction: function() {
        if (this.model.get("status") == "stop") {
            this.model.set("status", "prev")
        }
        return false
    },
    thumbnailAction: function(e) {
        this.param.thumbnailIndex = this.$el.find(this.param.selectImageViewerThumbnail).index(snm.$(e.target).parents(this.param.selectImageViewerThumbnail));
        this.model.set("thumbnail", true);
        this.$el.find(this.param.selectImageViewerSliderNext).show();
        this.$el.find(this.param.selectImageViewerSliderPrev).show();
        return false
    },
    thumbnailZoomAction: function(e) {
        if (snm._.isNumber(e)) {
            this.param.zoomIndex = e + 1
        } else {
            this.param.zoomIndex = snm.$(this.param.selectImageViewerThumbnailZoom).index(snm.$(e.target).parents(this.param.selectImageViewerThumbnailZoom));
            this.sliderAdjust()
        }
        var $thumbnai = snm.$(this.param.selectImageViewerThumbnailZoom).eq(this.param.zoomIndex),
            largeImage = this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem).eq(this.param.zoomIndex).attr("data-large-image");
        this.isLargeImage(largeImage, this.element.$selectImageZoomModal);
        snm.$(this.param.selectImageViewerThumbnailZoom).removeClass(this.param.isActive);
        $thumbnai.addClass(this.param.isActive);
        this.element.$selectImageZoomModal.find(this.param.selectImageViewerScaleArea).hide();
        this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem).removeClass(this.param.isActive).hide();
        this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem).eq(this.param.zoomIndex).show();
        if (largeImage) this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem).eq(this.param.zoomIndex).addClass(this.param.isActive);
        if (this.param.isTablet) {
            this.param.endScaleRate = 0;
            this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem).eq(this.param.zoomIndex).css("-webkit-transform", "scale(1)")
        }
        this.$el.find(this.param.selectImageViewerThumbnailDefault).removeClass(this.param.isActive);
        if (this.param.zoomIndex === 0) this.$el.find(this.param.selectImageViewerThumbnailDefault).addClass(this.param.isActive)
    },
    sliderAdjust: function() {
        var $thumbnail = this.$el.find(this.param.selectImageViewerThumbnail),
            marginVal = this.param.baseWid * (this.param.zoomIndex + 1);
        this.element.$selectImageViewerSlider.css("marginLeft", "-" + marginVal + "px");
        $thumbnail.removeClass(this.param.isActive);
        if (this.param.zoomIndex > 0) $thumbnail.eq(this.param.zoomIndex - 1).addClass(this.param.isActive);
        this.param.count = this.param.zoomIndex
    },
    switchSelect: function() {
        var count = this.param.count == this.param.itemNum ? -1 : this.param.count - 1;
        this.$el.find(this.param.selectImageViewerThumbnail).removeClass(this.param.isActive);
        this.$el.find(this.param.selectImageViewerThumbnailDefault).removeClass(this.param.isActive);
        if (count < -1) count = this.param.itemNum - 2;
        if (count >= 0) {
            this.$el.find(this.param.selectImageViewerThumbnail).eq(count).addClass(this.param.isActive)
        } else {
            this.$el.find(this.param.selectImageViewerThumbnailDefault).addClass(this.param.isActive)
        }
        this.thumbnailZoomAction(count)
    },
    isLargeImage: function(src) {
        if (this.param.isTablet) return false;
        if (src) {
            snm.$(this.param.selectImageViewerExpand).show()
        } else {
            snm.$(this.param.selectImageViewerExpand).hide()
        }
    },
    render: function() {
        var self = this,
            moveVal = this.param.baseWid,
            calc;
        if (this.model.get("status") == "next") {
            calc = "-=";
            this.param.count++;
            if (this.touchM) {
                moveVal = this.param.baseWid + this.touchM;
                this.param.marginLeft = Number(this.element.$selectImageViewerSlider.css("marginLeft").replace("px", "")) - this.param.baseWid
            }
        } else {
            calc = "+=";
            this.param.count--;
            if (this.touchM) {
                moveVal = this.param.baseWid - this.touchM;
                this.param.marginLeft = Number(this.element.$selectImageViewerSlider.css("marginLeft").replace("px", "")) + this.param.baseWid
            }
        }
        this.switchSelect();
        this.element.$selectImageViewerSlider.animate({
            marginLeft: calc + moveVal + "px"
        }, this.param.speed, this.param.easing, function() {
            if (self.touchM && self.touchM != 0) {
                self.touchM = 0;
                self.$el.find(self.param.selectImageViewerSlider).css("transform", "translate3d(0,0,0)");
                self.$el.find(self.param.selectImageViewerSlider).css("marginLeft", self.param.marginLeft)
            }
            if (self.model.get("status") == "next" && self.param.count == self.param.itemNum) {
                self.$el.find(self.param.selectImageViewerSlider).css("marginLeft", "-" + self.param.baseWid + "px");
                self.param.count = 0
            } else if (self.param.count < 0) {
                self.$el.find(self.param.selectImageViewerSlider).css("marginLeft", "-" + (self.param.sliderW - self.param.baseWid * 2) + "px");
                self.param.count = self.param.itemNum - 1
            }
            self.model.set("status", "stop", {
                silent: true
            });
            self.isLargeImage(self.$el.find(self.param.selectImageViewerSliderItem).eq(self.param.count + 1).attr("data-large-image"))
        })
    },
    renderThumbnail: function() {
        var self = this;
        this.param.count = this.param.thumbnailIndex + 1;
        this.switchSelect();
        this.element.$selectImageViewerSlider.animate({
            marginLeft: "-" + this.param.baseWid * (this.param.count + 1) + "px"
        }, this.param.speed, this.param.easing, function() {
            self.model.set("thumbnail", false, {
                silent: true
            });
            self.isLargeImage(self.$el.find(self.param.selectImageViewerSliderItem).eq(self.param.count + 1).attr("data-large-image"))
        })
    },
    renderMouseOver: function(e) {
        var self = this,
            $item = snm.$(e.target),
            $scaleImg = this.element.$selectImageViewerScaleImg,
            $scaleArea = this.element.$selectImageViewerScaleArea,
            largeImg = $item.parents(this.param.selectImageViewerSliderItem).attr("data-large-image") || $item.attr("data-large-image"),
            startLeft, startTop, lensLeft, lensTop, maxLeft, maxTop;
        if (this.param.isTablet) return false;
        if ($item.is(this.param.selectImageViewerSliderNext + "," + this.param.selectImageViewerSliderPrev)) {
            return
        }
        if (largeImg) {
            this.param.flagMouseOn = true
        } else {
            return
        }
        if (this.model.get("thumbnail") || this.model.get("status") !== "stop") {
            return
        }
        this.scrollEventOn();
        this.param.currentImgWid = $item.width();
        this.param.currentImgHei = $item.height();
        this.param.sliderItemOffsetX = e.offsetX;
        this.param.sliderItemOffsetY = e.offsetY;
        $scaleImg.attr("src", largeImg);
        $scaleArea.css({
            width: this.$el.find(this.param.selectImageViewerScaleBase).width(),
            height: this.getScaleAreaHeight() + "px",
            left: this.$el.find(this.param.selectImageViewerArea).outerWidth(),
            visibility: "hidden"
        }).show();
        this.element.$selectImageViewerLens.show().css("visibility", "hidden");
        snm.util.preload.init([largeImg], function() {
            $scaleArea.css("visibility", "visible");
            self.element.$selectImageViewerLens.css("visibility", "visible");
            self.param.ratioX = $scaleImg.width() / $item.width();
            self.param.ratioY = $scaleImg.height() / $item.height();
            self.param.lensWid = $scaleArea.width() / $scaleImg.width() * $item.width();
            self.param.lensHei = self.getScaleLensHeight();
            lensLeft = self.param.sliderItemOffsetX - self.param.lensWid / 2;
            lensTop = self.param.sliderItemOffsetY - self.param.lensHei / 2;
            if (lensLeft <= 0) {
                lensLeft = 0
            }
            if (lensLeft + self.param.lensWid >= $item.width()) {
                lensLeft = $item.width() - self.param.lensWid
            }
            if (lensTop <= 0) {
                lensTop = 0
            }
            if (lensTop + self.param.lensHei >= $item.width()) {
                lensTop = $item.height() - self.param.lensHei
            }
            self.element.$selectImageViewerLens.css({
                width: self.param.lensWid + "px",
                height: self.param.lensHei + "px",
                left: lensLeft + "px",
                top: lensTop + "px"
            });
            startLeft = lensLeft * self.param.ratioX;
            startTop = lensTop * self.param.ratioY;
            maxLeft = $scaleImg.width() - $item.width();
            maxTop = $scaleImg.height() - $item.height();
            self.param.startX = startLeft;
            self.param.startY = startTop;
            if (startLeft > maxLeft) {
                startLeft = $scaleImg.width() - $scaleArea.width()
            }
            if (startTop > maxTop) {
                startTop = maxTop
            }
            if ($scaleImg.width() <= $scaleArea.width() || lensLeft <= 0) startLeft = 0;
            if ($scaleImg.height() <= $scaleArea.height() || lensTop <= 0) startTop = 0;
            $scaleImg.css({
                position: "relative",
                left: "-" + startLeft + "px",
                top: "-" + startTop + "px"
            })
        })
    },
    renderMouseOut: function() {
        this.param.flagMouseOn = false;
        this.element.$selectImageViewerScaleArea.hide();
        this.element.$selectImageViewerScaleImg.css({
            top: 0,
            left: 0
        });
        this.element.$selectImageViewerLens.hide();
        this.scrollEventOff()
    },
    renderMouseMove: function(e) {
        var moveX = Math.abs(e.clientX),
            moveY = e.pageY,
            offset = this.$el.find(this.param.selectImageViewerSliderWrap).offset(),
            maxX = offset.left + this.param.currentImgWid - this.param.lensWid / 2,
            maxY = offset.top + this.param.currentImgHei - this.param.lensHei / 2,
            isAreaVisible = this.element.$selectImageViewerScaleArea.is(":visible"),
            left, top, scaleImgTop;
        this.param.sliderItemOffsetX = e.offsetX;
        this.param.sliderItemOffsetY = e.offsetY;
        if (this.param.flagMouseOn) {
            if (!isAreaVisible) this.renderMouseOver(e);
            left = moveX - (offset.left + this.param.lensWid / 2);
            if (moveX - offset.left < this.param.lensWid / 2) {
                left = 0
            }
            if (moveX > maxX) {
                left = this.param.currentImgWid - this.param.lensWid
            }
            top = moveY - (offset.top + this.param.lensHei / 2);
            if (moveY - offset.top < this.param.lensHei / 2) {
                top = 0
            }
            if (moveY > maxY) {
                top = this.param.currentImgHei - this.param.lensHei
            }
            this.param.lensHei = this.getScaleLensHeight();
            this.element.$selectImageViewerLens.css({
                left: left + "px",
                top: top + "px",
                height: this.param.lensHei + "px"
            });
            if (moveX < maxX) {
                this.element.$selectImageViewerScaleImg.css({
                    left: "-" + (moveX - (offset.left + this.param.lensWid / 2)) * this.param.ratioX + "px"
                })
            }
            if (moveY < maxY) {
                this.element.$selectImageViewerScaleImg.css({
                    top: "-" + (moveY - (offset.top + this.param.lensHei / 2)) * this.param.ratioY + "px"
                })
            }
            if (moveY > maxY) {
                scaleImgTop = (this.$el.find(this.param.selectImageViewerSliderItem + ":visible").height() - this.param.lensHei) * this.param.ratioY;
                if (scaleImgTop <= 0) scaleImgTop = 0;
                this.element.$selectImageViewerScaleImg.css({
                    top: "-" + scaleImgTop + "px"
                })
            }
            this.element.$selectImageViewerScaleArea.css("height", this.getScaleAreaHeight() + "px")
        }
    },
    getScaleAreaHeight: function() {
        var bottomSpace = 20,
            scrollBottom = snm.$(window).height() + snm.$(document).scrollTop() - bottomSpace,
            height = scrollBottom - this.$el.find(this.param.selectImageViewerArea).offset().top;
        return height
    },
    getScaleLensHeight: function() {
        var scaleAreaHei = this.element.$selectImageViewerScaleArea.height(),
            scaleImgHei = this.element.$selectImageViewerScaleImg.height(),
            sliderItemHei = this.$el.find(this.param.selectImageViewerSliderItem).height(),
            height = scaleAreaHei / scaleImgHei * sliderItemHei;
        return height
    },
    renderModalZoom: function() {
        if (!this.param.modalFlag) {
            return false
        }
        var $item = this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderItem),
            width = this.element.$selectImageZoomModal.find(this.param.selectImageViewerArea).width();
        $item.width(width).eq(this.param.zoomIndex).show();
        this.element.$selectImageZoomModal.find(this.param.selectImageViewerScaleArea).hide();
        this.param.modalZoom.render();
        if (this.param.isTablet) {
            $item.eq(this.param.zoomIndex).css("-webkit-transform", "scale(1)")
        }
    },
    renderZoomOn: function(e) {
        var self = this,
            $item = snm.$(e.target),
            $scaleArea = this.element.$selectImageZoomModal.find(this.param.selectImageViewerScaleArea),
            $scaleImg = this.element.$selectImageZoomModal.find(this.param.selectImageViewerScaleImg),
            largeImg = $item.parents(this.param.selectImageViewerSliderItem).attr("data-large-image") || $item.attr("data-large-image");
        if (!largeImg) {
            return
        }
        $scaleImg.attr("src", largeImg);
        snm.util.preload.init([largeImg], function() {
            $scaleArea.toggle().css({
                width: $item.width(),
                height: $item.height()
            });
            self.param.zoomRatioX = $scaleImg.width() / $item.width();
            self.param.zoomRatioY = $scaleImg.height() / $item.height();
            $scaleImg.css({
                position: "relative",
                left: "-" + (e.offsetX * self.param.zoomRatioX - e.offsetX) + "px",
                top: "-" + (e.offsetY * self.param.zoomRatioY - e.offsetY) + "px"
            });
            self.element.$selectImageZoomModal.find(self.param.selectImageViewerSliderItem).hide()
        })
    },
    renderZoomMove: function(e) {
        if (this.param.flagMouseOnZoom) {
            var offset = this.element.$selectImageZoomModal.find(this.param.selectImageViewerSliderWrap).offset(),
                x = e.pageX - offset.left,
                y = e.pageY - offset.top,
                moveX = x * this.param.zoomRatioX - x,
                moveY = y * this.param.zoomRatioY - y,
                $parent = snm.$(e.target).parents(this.param.selectImageViewerArea);
            $parent.find(this.param.selectImageViewerScaleImg).css({
                left: "-" + moveX + "px",
                top: "-" + moveY + "px"
            })
        }
    },
    renderTouchStart: function(e) {
        if (this.model.get("status") == "stop") {
            this.touchM = 0;
            this.touchS = e.originalEvent.touches[0].pageX
        }
    },
    renderTouchMove: function(e) {
        e.preventDefault();
        if (this.model.get("status") == "stop") {
            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            this.touchM = touch.pageX - this.touchS;
            this.element.$selectImageViewerSlider.css("transform", "translate3d(" + this.touchM + "px,0,0)")
        }
    },
    renderTouchEnd: function() {
        if (this.model.get("status") == "stop") {
            if (this.touchM > this.param.swipeTriggerNum) {
                this.prevAction()
            } else if (this.touchM < "-" + this.param.swipeTriggerNum) {
                this.nextAction()
            } else {
                this.element.$selectImageViewerSlider.css("transform", "translate3d(0,0,0)")
            }
        }
    },
    sliderReset: function() {
        var self = this;
        this.model.set("thumbnail", true, {
            silent: true
        });
        this.$el.find(this.param.selectImageViewerThumbnail).removeClass(this.param.isActive);
        this.$el.find(this.param.selectImageViewerThumbnailDefault).addClass(this.param.isActive);
        this.element.$selectImageViewerSlider.animate({
            marginLeft: "-" + this.param.baseWid + "px"
        }, this.param.speed, this.param.easing, function() {
            self.model.set("thumbnail", false, {
                silent: true
            })
        });
        this.param.count = 0;
        this.isLargeImage(this.$el.find(this.param.selectImageViewerThumbnailDefault).attr("data-large-image"));
        this.thumbnailZoomAction(-1);
        return false
    }
});
snm.module.model.selectSwitchPanel = snm.Backbone.Model.extend({});
snm.module.view.selectSwitchPanel = snm.Backbone.View.extend({
    param: {
        selectSwitchPanelPanel: ".js-selectSwitchPanelPanel",
        selectSwitchPanelActiveClass: "is-active"
    },
    events: {
        "change .js-selectSwitchPanelSelect": "switchSelect"
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        this.changeActive(this.$el.find(".js-selectSwitchPanelSelect option:selected").val())
    },
    render: function() {
        this.$el.find(this.param.selectSwitchPanelPanel).removeClass(this.param.selectSwitchPanelActiveClass);
        this.$el.find("[id='" + this.model.get("active") + "']").addClass(this.param.selectSwitchPanelActiveClass)
    },
    switchSelect: function(e) {
        this.changeActive(this.$el.find(e.currentTarget).val());
        return false
    },
    changeActive: function(active) {
        this.model.set("active", active)
    }
});
snm.module.view.SelectSynchronization = snm.Backbone.View.extend({
    param: {
        selectSynchronizationTarget: ".js-selectSynchronizationTarget"
    },
    initialize: function(options) {
        this.options = options || {};
        this.param = snm._.defaults(this.options, this.param);
        var self = this;
        this.$el.find(this.param.selectSynchronizationTarget).val(this.$el.find(this.param.selectSynchronizationTarget).eq(0).val());
        this.$el.find(this.param.selectSynchronizationTarget).on("change", function(e) {
            self.render(e)
        })
    },
    render: function(e) {
        this.$el.find(this.param.selectSynchronizationTarget).val(this.$el.find(e.currentTarget).val())
    }
});
snm.module.model.SetDate = snm.Backbone.Model.extend({});
snm.module.view.SetDate = snm.Backbone.View.extend({
    param: {
        setDateYear: ".js-setDateYear",
        setDateMonth: ".js-setDateMonth",
        setDateDay: ".js-setDateDay",
        setDateNameJP: ".js-setDateNameJP",
        setDateNameJPNum: ".js-setDateNameJPNum",
        dataSetDateYear: "data-setDate-year",
        dataSetDateNameJP: "data-setDate-nameJp",
        isHide: "is-hide"
    },
    events: {
        "change .js-setDateYear": "lastDay",
        "change .js-setDateMonth": "lastDay",
        "change .js-setDateNameJPNum": "lastDay",
        "change .js-setDateNameJP": "setJYearNumSelect"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        var year = this.$el.find(this.param.setDateYear),
            jyear = this.$el.find(this.param.setDateNameJP),
            jyearNum = this.$el.find(this.param.setDateNameJPNum),
            dayVal = this.$el.find(this.param.setDateDay).val();
        this.param.type = "md";
        this.param.defDays = [];
        this.param.defDaysArr = {};
        this.param.nonSelectDayFlag = false;
        this.param.nonSelectDayTarget = " option";
        if (year[0]) {
            this.param.type = "ymd"
        } else if (jyear[0] && jyearNum[0]) {
            this.param.type = "jymd"
        }
        if (!this.checkElement() || !this.setDefault()) {
            this.events = {};
            return
        }
        this.lastDay();
        this.switchSelect();
        this.$el.find(this.param.setDateDay).val(dayVal);
        this.model.on("change:month", this.switchSelect, this);
        this.model.on("change:year", this.switchSelect, this)
    },
    checkElement: function() {
        if (!this.$el.find(this.param.setDateMonth)[0] || !this.$el.find(this.param.setDateDay)[0]) {
            return false
        }
        if (this.param.type === "ymd" && !this.$el.find(this.param.setDateYear)[0]) {
            return false
        }
        if (this.param.type === "jymd" && (!this.$el.find(this.param.setDateNameJP)[0] || !this.$el.find(this.param.setDateNameJPNum)[0])) {
            return false
        }
        var firstDay = this.$el.find(this.param.setDateDay + " option").eq(0);
        if (firstDay.val() === "") {
            this.param.nonSelectDayFlag = true;
            this.param.nonSelectDayTarget += ":gt(0)"
        }
        return true
    },
    setDefault: function() {
        var self = this;
        this.$el.find(this.param.setDateDay + this.param.nonSelectDayTarget).each(function() {
            if (snm.$(this).val().match(/[0-9]/)) {
                self.param.defDays.push(parseInt(snm.$(this).val(), 10));
                self.param.defDaysArr[parseInt(snm.$(this).val(), 10)] = snm.$(this).html()
            }
        });
        if (this.param.defDays.length < 1) {
            return false
        }
        return true
    },
    setJYearNumSelect: function() {
        var self = this,
            targetJyearVal = this.$el.find(this.param.setDateNameJP).val(),
            targetJyear = this.$el.find(this.param.setDateNameJPNum + "[" + this.param.dataSetDateNameJP + " = '" + targetJyearVal + "']"),
            year = "";
        this.$el.find(this.param.setDateNameJPNum).prop("disabled", false);
        this.$el.find(this.param.setDateNameJPNum).each(function() {
            if (!snm.$(this).hasClass(self.param.isHide)) {
                snm.$(this).addClass(self.param.isHide)
            }
        });
        if (!targetJyear.length) {
            if (this.$el.find(this.param.setDateNameJPNum).eq(0).hasClass(this.param.isHide)) {
                this.$el.find(this.param.setDateNameJPNum).eq(0).removeClass(this.param.isHide)
            }
        } else {
            if (targetJyear.hasClass(this.param.isHide)) {
                targetJyear.removeClass(this.param.isHide);
            }
        }
        this.$el.find(this.param.setDateNameJPNum + "." + this.param.isHide).prop("disabled", true);
        targetJyear.find("option").eq(0).prop("selected", true);
        this.$el.find(this.param.setDateDay + this.param.nonSelectDayTarget).remove();
        if (targetJyear.find("option").eq(0).attr(this.param.dataSetDateYear)) {
            year = targetJyear.find("option").eq(0).attr(this.param.dataSetDateYear)
        }
        this.model.set("year", year, {
            silent: true
        });
        this.switchSelect()
    },
    lastDay: function() {
        var year, month;
        if (this.param.type === "jymd") {
            if (this.$el.find(this.param.setDateNameJPNum + ":visible option:selected").attr(this.param.dataSetDateYear)) {
                year = this.$el.find(this.param.setDateNameJPNum + ":visible option:selected").attr(this.param.dataSetDateYear)
            } else {
                year = this.$el.find(this.param.setDateNameJPNum + ":visible").val()
            }
        } else if (this.param.type === "ymd") {
            year = this.$el.find(this.param.setDateYear).val()
        } else {
            year = "2004"
        }
        month = this.$el.find(this.param.setDateMonth).val();
        if (year === "" || month === "") {
            this.$el.find(this.param.setDateDay + this.param.nonSelectDayTarget).remove();
            this.model.set("year", year, {
                silent: true
            });
            this.model.set("month", month, {
                silent: true
            });
            return false
        }
        this.model.set("year", year);
        this.model.set("month", month)
    },
    switchSelect: function() {
        if (this.model.get("year") === "" || this.model.get("month") === "") {
            return
        }
        var date = new Date(this.model.get("year"), this.model.get("month"), 0);
        this.param.lastDay = date.getDate();
        this.render()
    },
    render: function() {
        var defDays = this.param.defDays,
            arrDaysTmp = [],
            arrDays = [],
            i, obj = "";
        for (i = 1; i <= this.param.lastDay; i++) {
            arrDaysTmp.push(i)
        }
        arrDays = snm.$.merge(snm.$.merge([], defDays), arrDaysTmp).filter(function(x, i, self) {
            return self.indexOf(x) === i && i !== self.lastIndexOf(x)
        });
        for (i = 0; i < arrDays.length; i++) {
            obj += "<option value='" + arrDays[i] + "'>" + this.param.defDaysArr[arrDays[i]] + "</option>"
        }
        this.$el.find(this.param.setDateDay + this.param.nonSelectDayTarget).remove();
        this.$el.find(this.param.setDateDay).append(obj);
        this.$el.find(this.param.setDateDay + " option").eq(0).prop("selected", true)
    }
});
snm.module.view.SetPosition = snm.Backbone.View.extend({
    initialize: function() {
        var targetId = this.$el.val();
        if (targetId === "" || !snm.$("#" + targetId)[0]) {
            return false
        }
        snm.$("body,html").scrollTop(snm.$("#" + targetId).offset().top)
    }
});
snm.module.model.SetPurchase = snm.Backbone.Model.extend({});
snm.module.view.SetPurchase = snm.Backbone.View.extend({
    param: {
        setPurchaseBtn: ".js-setPurchaseBtn",
        setPurchaseItem: ".js-setPurchaseItem",
        setPurchasePrice: ".js-setPurchasePrice",
        setPurchaseTotalNotax: ".js-setPurchaseTotalNotax",
        setPurchaseTotalTax: ".js-setPurchaseTotalTax",
        setPurchaseTotalNum: ".js-setPurchaseTotalNum",
        dataPriceNotax: "data-price-notax",
        dataPriceTax: "data-price-tax"
    },
    events: {
        "change .js-setPurchaseItem": "changeItem"
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        this.selectCheck();
        var self = this,
            events = snm.$.Event("change");
        this.$el.find(this.param.setPurchaseItem + ":checked").each(function() {
            events.target = snm.$(this);
            self.changeItem(events)
        })
    },
    selectCheck: function() {
        var num = this.$el.find(this.param.setPurchaseItem + ":checked").length;
        if (num > 0) {
            this.$el.find(this.param.setPurchaseBtn).prop("disabled", false);
            this.$el.find(this.param.setPurchasePrice).show()
        } else {
            this.$el.find(this.param.setPurchaseBtn).prop("disabled", true);
            this.$el.find(this.param.setPurchasePrice).hide()
        }
        this.$el.find(this.param.setPurchaseTotalNum).text(num)
    },
    changeItem: function(e) {
        var $target = snm.$(e.target);
        this.param.isCheck = $target.prop("checked");
        this.param.priceNotax = $target.attr(this.param.dataPriceNotax);
        this.param.priceTax = $target.attr(this.param.dataPriceTax);
        this.param.totalNotax = this.$el.find(this.param.setPurchaseTotalNotax).text().match(/\d/g).join("");
        this.param.totalTax = this.$el.find(this.param.setPurchaseTotalTax).text().match(/\d/g).join("");
        this.model.set("change", true);
        this.selectCheck()
    },
    render: function() {
        var notax, tax;
        if (this.param.isCheck) {
            notax = Number(this.param.totalNotax) + Number(this.param.priceNotax);
            tax = Number(this.param.totalTax) + Number(this.param.priceTax)
        } else {
            notax = Number(this.param.totalNotax) - Number(this.param.priceNotax);
            tax = Number(this.param.totalTax) - Number(this.param.priceTax)
        }
        notax = this.textSepatate(notax);
        tax = this.textSepatate(tax);
        this.$el.find(this.param.setPurchaseTotalNotax).text(notax);
        this.$el.find(this.param.setPurchaseTotalTax).text(tax);
        this.model.set("change", null, {
            silent: true
        })
    },
    textSepatate: function(num) {
        var text = num + "",
            textNum = text.length,
            commaText = "",
            i;
        for (i = textNum - 1; i >= 0; i--) {
            commaText += text.charAt(textNum - 1 - i);
            if (i % 3 == 0 && i != 0) {
                commaText += ","
            }
        }
        return commaText
    }
});
snm.module.model.ShopingList = snm.Backbone.Model.extend({});
snm.module.view.ShopingList = snm.Backbone.View.extend({
    param: {
        templateAfterId: "#tmpShopingListAfter",
        templateContainer: "#tmpShopingListContainer",
        shopingListChangeBtn: ".js-shopingListChangeBtn",
        shopingListResetBtn: ".js-shopingListResetBtn",
        shopingListCol: ".js-shopingListCol",
        shopingListTitle: ".js-shopingListTitle",
        shopingListUsed: ".js-shopingListUsed",
        shopingListDelete: ".js-shopingListDelete",
        shopingListConfirm: "js-shopingListConfirm",
        shopingListEdit: ".js-shopingListEdit",
        shopingListBtn: ".js-shopingListBtn",
        modalClose: "js-modalClose"
    },
    events: {
        "click .js-shopingListChangeBtn": "confirmScreen",
        "click .js-shopingListResetBtn": "editScreen",
        "click .js-modalClose": "returnScreen",
        "change .js-shopingListDelete": "DeleteDisabledControl",
        "change .js-shopingListUsed": "usedDisabledControl"
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        this.paramSetting()
    },
    paramSetting: function() {
        this.param.resetText = this.$el.find(this.param.shopingListResetBtn).attr("data-reset-text");
        this.param.resetTextDef = this.$el.find(this.param.shopingListResetBtn).text();
        this.param.editText = this.$el.find(this.param.shopingListChangeBtn).attr("data-edit-text");
        this.param.editTextDef = this.$el.find(this.param.shopingListChangeBtn).text();
        this.param.defListData = this.$el.find(this.param.templateContainer).html();
        this.param.templateAfter = snm._.template(snm.$(this.param.templateAfterId).html())
    },
    confirmScreen: function() {
        this.model.set("status", "confirm");
        return false
    },
    editScreen: function(e) {
        if (snm.$(e.target).hasClass(this.param.modalClose)) return false;
        this.model.set("status", "edit");
        return false
    },
    usedDisabledControl: function(e) {
        this.$el.find(this.param.shopingListDelete).prop("disabled", false);
        snm.$(e.target).parents(this.param.shopingListCol).find(this.param.shopingListDelete).prop("disabled", true)
    },
    DeleteDisabledControl: function(e) {
        var bool = snm.$(e.target).prop("checked");
        snm.$(e.target).parents(this.param.shopingListCol).find(this.param.shopingListTitle).prop("disabled", bool);
        snm.$(e.target).parents(this.param.shopingListCol).find(this.param.shopingListUsed).prop("disabled", bool)
    },
    render: function() {
        if (this.model.get("status") == "confirm") {
            this.renderConfirm()
        } else {
            this.renderEdit()
        }
    },
    renderConfirm: function() {
        var self = this;
        this.param.valObj = {
            list: [{}]
        };
        this.param.publicViewSelect = [];
        this.$el.find(this.param.shopingListTitle).each(function(i) {
            self.param.valObj["list"][i] = {
                title: snm._.escape(self.$el.find(self.param.shopingListTitle).eq(i).val()),
                used: self.$el.find(self.param.shopingListUsed).eq(i).prop("checked"),
                del: self.$el.find(self.param.shopingListDelete).eq(i).prop("checked")
            }
        });
        this.$el.find(this.param.shopingListEdit).hide();
        this.$el.find(this.param.templateContainer).append('<div class="' + this.param.shopingListConfirm + '">' + this.param.templateAfter(this.param.valObj) + "</div>");
        this.$el.find(this.param.shopingListResetBtn).text(this.param.resetText);
        this.$el.find(this.param.shopingListBtn).eq(0).hide();
        this.$el.find(this.param.shopingListBtn).eq(1).show();
        this.$el.find(this.param.shopingListResetBtn).removeClass(this.param.modalClose)
    },
    renderEdit: function() {
        var self = this,
            listObj = this.param.valObj.list,
            usedCheck, delCheck;
        this.$el.find(this.param.shopingListEdit).show();
        this.$el.find("." + this.param.shopingListConfirm).remove();
        this.$el.find(this.param.shopingListResetBtn).text(this.param.resetTextDef);
        this.$el.find(this.param.shopingListBtn).eq(0).show();
        this.$el.find(this.param.shopingListBtn).eq(1).hide();
        this.$el.find(this.param.shopingListResetBtn).addClass(this.param.modalClose)
    }
});
snm.module.model.ShowAll = snm.Backbone.Model.extend({});
snm.module.view.ShowAll = snm.Backbone.View.extend({
    param: {
        showAllView: ".js-showAllView",
        showAllClose: ".js-showAllClose",
        showAllItem: ".js-showAllItem",
        itemNum: 0,
        triggerNum: 9,
        viewFlag: true
    },
    events: {
        "click .js-showAllView": "switchAll",
        "click .js-showAllClose": "switchClose"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.param.itemNum = this.$el.find(this.param.showAllItem).length;
        this.param.viewFlag = this.param.itemNum > this.param.triggerNum ? true : false;
        this.model.on("change", this.render, this);
        if (this.param.viewFlag) this.$el.find(this.param.showAllItem + ":gt(" + (this.param.triggerNum - 1) + ")").hide();
        if (!this.param.viewFlag) this.$el.find(this.param.showAllView).hide()
    },
    switchAll: function() {
        if (this.param.viewFlag) this.model.set("status", "all");
        return false
    },
    switchClose: function() {
        if (this.param.viewFlag) this.model.set("status", "close");
        return false
    },
    render: function() {
        var status = this.model.get("status");
        if (status === "all") {
            this.$el.find(this.param.showAllItem).show();
            this.$el.find(this.param.showAllView).hide();
            this.$el.find(this.param.showAllClose).show()
        } else if (status === "close") {
            this.$el.find(this.param.showAllItem + ":gt(" + (this.param.triggerNum - 1) + ")").hide();
            this.$el.find(this.param.showAllView).show();
            this.$el.find(this.param.showAllClose).hide()
        }
    }
});
snm.module.model.CarouselSpecial = snm.Backbone.Model.extend({});
snm.module.view.CarouselSpecial = snm.Backbone.View.extend({
    param: {
        carouselSpecialWrap: ".js-carouselSpecialWrap",
        carouselSpecialItem: ".js-carouselSpecialItem",
        carouselSpecialNav: ".js-carouselSpecialNav",
        carouselSpecialNavNext: ".js-carouselSpecialNavNext",
        carouselSpecialNavPrev: ".js-carouselSpecialNavPrev",
        carouselSpecialTmp: "#tmpCarouselWrappingPagers",
        isActive: "is-active",
        baseNum: 2,
        autoSlide: false,
        speed: 800,
        intervel: 5e3,
        easing: "linear",
        swipeSpeed: 200,
        swipeEasing: "linear",
        swipeTriggerNum: 50
    },
    events: {
        "click .js-carouselSpecialNavNext": "renderNext",
        "click .js-carouselSpecialNavPrev": "renderPrev",
        "touchstart .js-carouselSpecialWrap .js-carouselSpecialItem": "renderTouchStart",
        "touchmove .js-carouselSpecialWrap .js-carouselSpecialItem": "renderTouchMove",
        "touchend .js-carouselSpecialWrap .js-carouselSpecialItem": "renderTouchEnd"
    },
    initialize: function(options) {
        this.options = options || {};
        this.param = snm._.defaults(this.options, this.param);
        this.param.itemNum = this.$el.find(this.param.carouselSpecialItem).length;
        this.model.on("change", this.modelChange, this);
        this.clickFlag = true;
        if (this.param.itemNum <= this.param.baseNum) {
            this.$el.find(this.param.carouselSpecialNav).hide();
            return false
        }
        var imgArr = [],
            self = this,
            imgNum = this.$el.find(this.param.carouselSpecialWrap + " img").length;
        for (var i = 0; i < imgNum; i++) {
            imgArr.push(this.$el.find(this.param.carouselSpecialWrap + " img").eq(i).attr("src"))
        }
        snm.util.preload.init(imgArr, function() {
            self.settingSlideItem();
            self.slideInterval()
        })
    },
    settingSlideItem: function() {
        var self = this,
            cloneObj, i;
        this.param.baseWid = this.$el.find(this.param.carouselSpecialItem).outerWidth(true);
        this.$el.find(this.param.carouselSpecialWrap).css({
            width: this.param.baseWid * this.param.itemNum + this.param.baseWid + "px",
            position: "relative"
        })
    },
    slideInterval: function() {
        var self = this;
        if (this.param.autoSlide) {
            this.timeId = setInterval(function() {
                self.renderNext()
            }, this.param.intervel)
        }
    },
    render: function() {
        var self = this,
            calc, moveVal;
        this.clickFlag = false;
        moveVal = this.param.baseWid;
        if (this.model.get("status") == "next") {
            calc = "-=";
            if (this.touchM) {
                moveVal = this.param.baseWid + this.touchM;
                this.marginLeft = Number(this.$el.find(this.param.carouselSpecialWrap).css("marginLeft").replace("px", "")) - this.param.baseWid
            }
        } else {
            calc = "+=";
            if (this.touchM) {
                moveVal = this.param.baseWid - this.touchM;
                this.marginLeft = Number(this.$el.find(this.param.carouselSpecialWrap).css("marginLeft").replace("px", "")) + this.param.baseWid
            }
        }
        clearInterval(this.timeId);
        this.$el.find(this.param.carouselSpecialWrap).animate({
            marginLeft: calc + moveVal + "px"
        }, this.param.speed, this.param.easing, function() {
            if (self.touchM && self.touchM != 0) {
                self.touchM = 0;
                self.$el.find(self.param.carouselSpecialWrap).css("transform", "translate3d(0,0,0)");
                self.$el.find(self.param.carouselSpecialWrap).css("marginLeft", self.marginLeft)
            }
            if (self.model.get("status") == "next") {
                self.$el.find(self.param.carouselSpecialItem).eq(0).appendTo(self.$el.find(self.param.carouselSpecialWrap));
                self.$el.find(self.param.carouselSpecialWrap).css("marginLeft", 0)
            }
            self.clickFlag = true;
            self.model.set("slide", "stop", {
                silent: true
            });
            self.slideInterval()
        })
    },
    modelChange: function() {
        clearInterval(this.timeId);
        if (snm.util.navigator.tablet) {
            this.$el.find(this.param.carouselSpecialWrap).css("transition", "none")
        }
        this.render()
    },
    renderNext: function() {
        if (this.clickFlag == true) {
            this.model.set("status", "next", {
                silent: true
            })
        }
        this.model.set("slide", "move");
        return false
    },
    renderPrev: function() {
        if (this.clickFlag == true) {
            this.model.set("status", "prev", {
                silent: true
            });
            this.$el.find(this.param.carouselSpecialItem).eq(-1).prependTo(this.$el.find(this.param.carouselSpecialWrap));
            this.$el.find(this.param.carouselSpecialWrap).css("marginLeft", "-=" + this.param.baseWid + "px")
        }
        this.model.set("slide", "move");
        return false
    },
    renderTouchStart: function(e) {
        clearInterval(this.timeId);
        this.touchM = 0;
        this.touchS = e.originalEvent.touches[0].pageX;
        this.$el.find(this.param.carouselSpecialWrap).css("transition", "all " + this.param.swipeSpeed + "ms " + this.param.swipeEasing)
    },
    renderTouchMove: function(e) {
        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
        this.touchM = touch.pageX - this.touchS;
        this.$el.find(this.param.carouselSpecialWrap).css("transform", "translate3d(" + this.touchM + "px,0,0)")
    },
    renderTouchEnd: function() {
        if (this.touchM > this.param.swipeTriggerNum) {
            this.renderPrev()
        } else if (this.touchM < "-" + this.param.swipeTriggerNum) {
            this.renderNext()
        } else {
            this.slideInterval();
            this.$el.find(this.param.carouselSpecialWrap).css("transform", "translate3d(0,0,0)")
        }
    }
});
snm.module.model.CarouselTop = snm.Backbone.Model.extend({});
snm.module.view.CarouselTop = snm.Backbone.View.extend({
    param: {
        carouselTopWrap: ".js-carouselTopWrap",
        carouselTopNavNext: ".js-carouselTopNavNext",
        carouselTopNavPrev: ".js-carouselTopNavPrev",
        carouselTopPagers: ".js-carouselTopPagers",
        carouselTopPagersPoint: ".js-carouselTopPagersPoint",
        tmpCarouselTopPagers: "#tmpCarouselTopPagers",
        carouselTopCaption: ".js-carouselTopCaption",
        carouselTopCaptionWrap: ".js-carouselTopCaptionWrap",
        carouselTopCaptionItem: ".js-carouselTopCaptionItem",
        carouselTopControl: ".js-carouselTopControl",
        dataCaptionNum: "data-caption-num",
        isActive: "is-active",
        pagerCount: 0,
        totalMove: 0,
        autoSlide: true,
        autoSlideBtn: true,
        pager: true,
        speed: 800,
        intervel: 5e3,
        easing: "linear",
        maxImgWid: 750,
        swipeTriggerNum: 100,
        initFlag: true,
        slideFlag: true,
        touchStart: false,
        beforeMarginLeft: 0,
        returnSpeed: 180,
        captionCloneNum: 2,
        resizeFlag: false,
        carouselTopRtoaster: ".js-carouselTopRtoaster",
        carouselTopRtoasterImg: ".js-carouselTopRtoasterImg",
        carouselTopRtoasterLink: ".js-carouselTopRtoasterLink",
        carouselTopRtoasterAlt: ".js-carouselTopRtoasterAlt",
        carouselTopRtoasterTitle: ".js-carouselTopRtoasterTitle",
        tmpCarouselTopImg: "#tmpCarouselTopImg",
        tmpCarouselTopCaptionItem: "#tmpCarouselTopCaptionItem",
        carouselTopLoading: ".js-carouselTopLoading"
    },
    events: {
        "click .js-carouselTopNavNext": "renderNext",
        "click .js-carouselTopNavPrev": "renderPrev",
        "click .js-carouselTopPagersPoint": "renderPagerAnchor",
        "click .js-carouselTopControl": "carouselControl",
        "click .js-carouselTopCaptionItem": "renderCaptionAnchor",
        mouseenter: "itemMouseOn",
        mouseleave: "itemMouseOut",
        "touchstart .js-carouselTopWrap li": "renderTouchStart",
        "touchmove .js-carouselTopWrap li": "renderTouchMove",
        "touchend .js-carouselTopWrap li": "renderTouchEnd"
    },
    initialize: function(options) {
        this.options = options || {};
        if (this.checkRtoaster()) {
            var self = this,
                timer, count = 0,
                maxCount = 6,
                rtoasterFlag = false;
            snm.$(this.param.carouselTopLoading).show();
            this.setLoading();
            this.$el.hide();
            snm.$(window).on("resize.carouselTop_loading", function() {
                self.setLoading()
            });
            timer = setInterval(function() {
                count++;
                rtoasterFlag = self.checkRtoasterItem();
                if (rtoasterFlag || count >= maxCount) {
                    clearInterval(timer);
                    snm.$(window).off("resize.carouselTop_loading");
                    if (rtoasterFlag) {
                        self.setRtoasterItem()
                    }
                    snm.$(self.param.carouselTopLoading).hide();
                    self.$el.show();
                    self.initSet();
                    return
                }
            }, 500)
        } else {
            this.$el.show();
            this.initSet()
        }
    },
    initSet: function() {
        this.model.on("change:slide", this.modelChange, this);
        this.clickFlag = true;
        this.param = snm._.defaults(this.options, this.param);
        this.param.itemNum = this.$el.find(this.param.carouselTopWrap).children().length;
        this.param.mouseFlag = true;
        this.param.prevDefLeft = this.$el.find(this.param.carouselTopNavPrev).eq(0).width();
        this.param.prevWid = this.$el.find(this.param.carouselTopNavPrev).eq(0).width();
        this.param.nextDefRight = this.$el.find(this.param.carouselTopNavNext).eq(0).width();
        this.param.pagerRight = Number(this.$el.find(this.param.carouselTopPagers).css("right").replace("px", ""));
        this.param.controlRight = Number(this.$el.find(this.param.carouselTopControl).css("right").replace("px", ""));
        this.settingOption();
        if (this.param.itemNum === 1) {
            this.$el.find(this.param.carouselTopCaptionWrap).hide();
            this.$el.find(this.param.carouselTopControl).hide();
            this.$el.find(this.param.carouselTopNavNext).hide();
            this.$el.find(this.param.carouselTopNavPrev).hide();
            this.$el.find(this.param.carouselTopPagers).hide();
            this.param.autoSlide = false
        } else if (this.param.itemNum === 0) {
            this.$el.hide();
            return false
        }
        var imgArr = [],
            imgNum = this.$el.find("img").length,
            self = this,
            i;
        for (i = 0; i < imgNum; i++) {
            imgArr.push(this.$el.find("img").eq(i).attr("src"))
        }
        snm.util.preload.init(imgArr, function() {
            self.settingSlideItem();
            if (self.param.itemNum > 1) {
                self.settingCaptionItem();
                self.slideInterval();
                if (self.param.pager) {
                    self.settingPager()
                }
            } else {
                self.param.initFlag = false
            }
        });
        this.param.isTabletView = snm.util.navigator.tablet || snm.util.navigator.smartphone;
        if (this.param.isTabletView) this.param.windowSize = snm.$(window).width();
        snm.$(window).resize(function() {
            self.param.resizeFlag = true;
            if (self.param.isTabletView) {
                var resizeWidth = snm.$(window).width();
                if (resizeWidth === self.param.windowSize) return false;
                self.param.windowSize = resizeWidth
            }
            self.settingSlideItem();
            self.settingCaptionItem()
        })
    },
    settingOption: function() {
        if (this.param.autoSlide === false) {
            this.$el.find(this.param.carouselTopControl).addClass(this.param.isActive);
            this.param.carouselStatus = "stop"
        }
        if (this.param.autoSlideBtn === false) {
            this.$el.find(this.param.carouselTopControl).hide()
        }
    },
    settingSlideItem: function() {
        if (this.param.initFlag) {
            this.param.rate = this.$el.find(this.param.carouselTopNavNext).width() * 2;
            this.param.imgRate = this.$el.find(this.param.carouselTopWrap + " img").width() / this.$el.width()
        }
        this.$el.width("100%");
        var imgWid = this.$el.width() - this.param.rate;
        if (imgWid > this.param.maxImgWid) {
            imgWid = this.param.maxImgWid
        }
        this.$el.find(this.param.carouselTopWrap + " li").css({
            width: imgWid + "px",
            height: Math.ceil(imgWid / 3) + "px",
            display: "table",
            "table-layout": "fixed"
        });
        this.$el.find(this.param.carouselTopWrap + " a").css({
            width: imgWid + "px",
            height: Math.ceil(imgWid / 3) + "px"
        });
        if (imgWid == this.param.maxImgWid) {
            var pagerArea = (this.$el.width() - this.param.maxImgWid) / 2,
                pargerRight;
            this.$el.find(this.param.carouselTopNavPrev).eq(0).width(pagerArea);
            this.$el.find(this.param.carouselTopNavNext).eq(0).width(pagerArea);
            pargerRight = this.$el.find(this.param.carouselTopNavPrev).eq(0).width() - this.param.prevWid;
            this.$el.find(this.param.carouselTopPagers).css("right", this.param.pagerRight + pargerRight + "px");
            this.$el.find(this.param.carouselTopControl).css("right", this.param.controlRight + pargerRight + "px")
        } else {
            this.$el.find(this.param.carouselTopNavPrev).eq(0).width(this.param.prevDefLeft);
            this.$el.find(this.param.carouselTopNavNext).eq(0).width(this.param.nextDefRight);
            this.$el.find(this.param.carouselTopPagers).css("right", this.param.pagerRight + "px");
            this.$el.find(this.param.carouselTopControl).css("right", this.param.controlRight + "px")
        }
        this.param.itemWid = this.$el.find(this.param.carouselTopWrap).children().outerWidth(true);
        var itemWrapWid = this.param.itemWid * this.param.itemNum,
            tooWid = (this.$el.width() - this.$el.find(this.param.carouselTopWrap).children().width()) / 2,
            oneLeft = (this.$el.width() - this.param.itemWid) / 2,
            cloneObj = this.$el.find(this.param.carouselTopWrap).children().eq(-1);
        this.param.baseLeft = this.param.itemWid - tooWid;
        if (this.param.itemNum === 1) {
            this.$el.find(this.param.carouselTopWrap).css({
                marginLeft: oneLeft + "px"
            });
            return false
        } else {
            this.$el.find(this.param.carouselTopWrap).css({
                width: itemWrapWid * 3 + "px",
                marginLeft: "-" + this.param.baseLeft + "px",
                position: "relative"
            })
        }
        if (this.param.initFlag) {
            cloneObj.clone().prependTo(this.$el.find(this.param.carouselTopWrap))
        }
    },
    settingCaptionItem: function() {
        var marginLeft = "",
            itemWrapWid, cloneObj, cloneItemNum, i, k, l, speed = 0,
            self = this,
            diffCloneItemNum = 0,
            beforeCloneNum = this.param.captionCloneNum;
        if (this.param.itemNum < 2) {
            this.param.initFlag = false;
            this.param.resizeFlag = false;
            return false
        }
        if (this.model.get("slide") === "move") {
            speed = this.param.speed
        }
        setTimeout(function() {
            if (self.param.resizeFlag || self.param.initFlag) {
                self.param.CapImgRate = self.$el.width() / (self.$el.find(self.param.carouselTopCaption + " img").width() * self.param.itemNum);
                if (self.param.CapImgRate > 5) {
                    self.param.captionCloneNum = Math.ceil((self.param.CapImgRate - 1) / 2)
                } else {
                    self.param.captionCloneNum = 2
                }
            }
            if (self.$el.find(self.param.carouselTopCaption).children().eq(1).css("marginLeft")) {
                marginLeft = self.$el.find(self.param.carouselTopCaption).children().eq(1).css("marginLeft").replace("px", "")
            }
            self.param.capItemWid = self.$el.find(self.param.carouselTopCaption).children().outerWidth(true);
            self.param.baseCaptionLeft = self.$el.find(self.param.carouselTopCaption).parent().width() / 2 - self.param.capItemWid / 2 - self.param.capItemWid * self.param.itemNum * self.param.captionCloneNum - Number(marginLeft * self.param.itemNum * self.param.captionCloneNum);
            itemWrapWid = self.param.capItemWid * self.param.itemNum;
            cloneObj = self.$el.find(self.param.carouselTopCaption).children();
            diffCloneItemNum = Math.abs(self.param.captionCloneNum - beforeCloneNum) * self.param.itemNum;
            if (self.param.initFlag) {
                for (i = 0; i < self.param.captionCloneNum; i++) {
                    cloneObj.clone().prependTo(self.$el.find(self.param.carouselTopCaption));
                    cloneObj.clone().appendTo(self.$el.find(self.param.carouselTopCaption))
                }
            } else if (self.param.resizeFlag && beforeCloneNum < self.param.captionCloneNum) {
                for (k = 0; k < diffCloneItemNum; k++) {
                    cloneObj.eq(-(k + 1)).clone().prependTo(self.$el.find(self.param.carouselTopCaption));
                    cloneObj.eq(k).clone().appendTo(self.$el.find(self.param.carouselTopCaption))
                }
            } else if (self.param.resizeFlag && beforeCloneNum > self.param.captionCloneNum) {
                for (l = 0; l < diffCloneItemNum; l++) {
                    self.$el.find(self.param.carouselTopCaption).children().eq(0).remove();
                    self.$el.find(self.param.carouselTopCaption).children().eq(-1).remove()
                }
            }
            cloneItemNum = self.$el.find(self.param.carouselTopCaption).children().length;
            self.$el.find(self.param.carouselTopCaption).css({
                width: self.param.capItemWid * (cloneItemNum * 2) + marginLeft * cloneItemNum + "px",
                marginLeft: self.param.baseCaptionLeft + "px"
            });
            self.$el.find(self.param.carouselTopWrap).css({
                width: self.param.itemWid * self.param.itemNum * (1 + self.param.captionCloneNum * 2) + "px"
            });
            self.$el.find(self.param.carouselTopCaption).children().removeClass(self.param.isActive);
            self.$el.find(self.param.carouselTopCaption).children().eq(self.param.itemNum * 2).addClass(self.param.isActive);
            self.param.initFlag = false;
            self.param.resizeFlag = false
        }, speed)
    },
    settingPager: function() {
        var arr = {
            items: []
        };
        this.pagerTmp = snm._.template(this.$el.find(this.param.tmpCarouselTopPagers).html());
        for (var i = 0; i < this.param.itemNum; i++) {
            arr.items[i] = i
        }
        this.$el.find(this.param.carouselTopPagers).html(this.pagerTmp(arr))
    },
    slideInterval: function() {
        var self = this;
        if (this.param.autoSlide && this.clickFlag && this.param.mouseFlag) {
            this.timeId = setInterval(function() {
                self.renderNext()
            }, this.param.intervel)
        }
    },
    stopInterval: function() {
        clearInterval(this.timeId)
    },
    itemMouseOn: function() {
        if (this.param.isTabletView) {
            return false
        }
        this.param.mouseFlag = false;
        this.stopInterval()
    },
    itemMouseOut: function() {
        if (this.param.isTabletView) {
            return false
        }
        this.param.mouseFlag = true;
        this.slideInterval()
    },
    render: function() {
        var self = this,
            moveCaptionVal = this.param.capItemWid,
            num = this.param.totalMove == 0 ? 1 : this.param.totalMove,
            calc, moveVal, i;
        this.clickFlag = false;
        moveVal = this.param.itemWid;
        if (this.model.get("status") == "next") {
            calc = "-=";
            if (this.touchM) {
                moveVal = this.param.itemWid + this.touchM
            }
        } else {
            calc = "+=";
            if (this.touchM) {
                moveVal = this.param.itemWid - this.touchM
            }
        }
        if (this.param.totalMove != 0) {
            moveVal = moveVal * this.param.totalMove;
            moveCaptionVal = this.param.capItemWid * this.param.totalMove
        }
        this.stopInterval();
        this.$el.find(this.param.carouselTopCaption).animate({
            marginLeft: calc + moveCaptionVal + "px"
        }, this.param.speed);
        this.$el.find(this.param.carouselTopWrap).animate({
            marginLeft: calc + moveVal + "px"
        }, this.param.speed, this.param.easing, function() {
            if (self.touchM && self.touchM != 0) {
                self.touchM = 0;
                self.param.touchStart = false
            }
            if (self.model.get("status") == "next") {
                for (i = 0; i < num; i++) {
                    self.$el.find(self.param.carouselTopWrap).children().eq(0).remove();
                    self.$el.find(self.param.carouselTopCaption).children().eq(0).remove()
                }
            } else {
                for (i = 0; i < num; i++) {
                    self.$el.find(self.param.carouselTopWrap).children().eq(-1).remove();
                    self.$el.find(self.param.carouselTopCaption).children().eq(-1).remove()
                }
            }
            self.$el.find(self.param.carouselTopWrap).css("marginLeft", "-" + self.param.baseLeft + "px");
            self.$el.find(self.param.carouselTopCaption).css("marginLeft", self.param.baseCaptionLeft + "px");
            self.param.totalMove = 0;
            self.clickFlag = true;
            self.param.slideFlag = true;
            self.model.set("slide", "stop", {
                silent: true
            });
            self.slideInterval()
        })
    },
    modelChange: function() {
        this.stopInterval();
        if (this.param.isTabletView) {
            this.$el.find(this.param.carouselTopWrap).css("transition", "none")
        }
        this.render();
        if (this.param.pager) {
            this.renderPager()
        }
    },
    renderNext: function() {
        this.param.slideFlag = false;
        var cloneObj, cloneCaptionObj, i, num;
        if (this.clickFlag == true) {
            this.model.set("status", "next");
            num = this.param.totalMove == 0 ? 1 : this.param.totalMove;
            for (i = 0; i < num; i++) {
                cloneObj = this.$el.find(this.param.carouselTopWrap).children().eq(i + 1);
                cloneCaptionObj = this.$el.find(this.param.carouselTopCaption).children().eq(i);
                cloneObj.clone().appendTo(this.$el.find(this.param.carouselTopWrap));
                cloneCaptionObj.clone().appendTo(this.$el.find(this.param.carouselTopCaption))
            }
            this.captionChangeClass(num)
        }
        this.model.set("slide", "move");
        return false
    },
    renderPrev: function() {
        this.param.slideFlag = false;
        var cloneObj, cloneCaptionObj, num, i, mainLeftMargin = this.param.itemWid,
            captionLeftMargin = this.param.capItemWid;
        if (this.clickFlag == true) {
            this.model.set("status", "prev");
            if (this.param.totalMove != 0) {
                mainLeftMargin = mainLeftMargin * this.param.totalMove;
                captionLeftMargin = captionLeftMargin * this.param.totalMove
            }
            this.$el.find(this.param.carouselTopWrap).css("marginLeft", "-=" + mainLeftMargin + "px");
            this.$el.find(this.param.carouselTopCaption).css("marginLeft", "-=" + captionLeftMargin + "px");
            num = this.param.totalMove == 0 ? 1 : this.param.totalMove;
            for (i = 0; i < num; i++) {
                cloneObj = this.$el.find(this.param.carouselTopWrap).children().eq(-(i + 2));
                cloneCaptionObj = this.$el.find(this.param.carouselTopCaption).children().eq(-(i + 1));
                cloneObj.clone().prependTo(this.$el.find(this.param.carouselTopWrap));
                cloneCaptionObj.clone().prependTo(this.$el.find(this.param.carouselTopCaption))
            }
            this.captionChangeClass(0)
        }
        this.model.set("slide", "move");
        return false
    },
    renderPager: function() {
        if (this.model.get("status") == "next") {
            this.param.pagerCount++
        } else {
            this.param.pagerCount--
        }
        if (this.param.pagerCount < 0) {
            this.param.pagerCount = this.param.itemNum - 1
        }
        if (this.param.pagerCount == this.param.itemNum) {
            this.param.pagerCount = 0
        }
        this.pagerChangeClass(this.param.pagerCount)
    },
    renderPagerAnchor: function(e) {
        var beforeIndex = this.$el.find(this.param.carouselTopPagersPoint).index(this.$el.find(this.param.carouselTopPagers + " .is-active")),
            afterIndex = this.$el.find(this.param.carouselTopPagersPoint).index(e.target);
        this.stopInterval();
        this.param.totalMove = Math.abs(beforeIndex - afterIndex);
        if (this.clickFlag == true) {
            if (beforeIndex < afterIndex) {
                this.renderNext()
            } else if (beforeIndex > afterIndex) {
                this.renderPrev()
            }
            this.param.pagerCount = afterIndex;
            this.pagerChangeClass(afterIndex)
        }
        return false
    },
    renderCaptionAnchor: function(e) {
        var index = snm.$(e.target).parents(this.param.carouselTopCaptionItem).index() - this.param.itemNum * (this.param.captionCloneNum - 1),
            num = Number(snm.$(e.target).parents(this.param.carouselTopCaptionItem).attr(this.param.dataCaptionNum)),
            activeFlag = snm.$(e.target).parents(this.param.carouselTopCaptionItem).hasClass(this.param.isActive);
        this.param.totalMove = Math.abs(index - this.param.itemNum);
        if (this.clickFlag == true) {
            if (index > this.param.itemNum) {
                this.renderNext()
            } else if (index < this.param.itemNum) {
                this.renderPrev()
            }
            this.param.pagerCount = num;
            this.pagerChangeClass(num)
        }
        if (!activeFlag) {
            return false
        }
    },
    renderTouchStart: function(e) {
        if (this.param.slideFlag) {
            this.param.touchStart = true;
            this.param.beforeMarginLeft = Number(this.$el.find(this.param.carouselTopWrap).css("marginLeft").replace(/px/, ""));
            this.stopInterval();
            this.touchM = 0;
            this.touchS = e.originalEvent.touches[0].pageX
        }
    },
    renderTouchMove: function(e) {
        if (this.param.slideFlag && this.param.touchStart) {
            e.preventDefault();
            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            this.touchM = touch.pageX - this.touchS;
            this.$el.find(this.param.carouselTopWrap).css("marginLeft", Number(this.param.beforeMarginLeft) + this.touchM + "px")
        }
    },
    renderTouchEnd: function() {
        if (this.param.slideFlag && this.param.touchStart) {
            if (this.touchM > this.param.swipeTriggerNum) {
                this.renderPrev()
            } else if (this.touchM < "-" + this.param.swipeTriggerNum) {
                this.renderNext()
            } else {
                this.param.slideFlag = false;
                var calc;
                if (this.touchM > 0) {
                    calc = "-="
                } else {
                    calc = "+="
                }
                var self = this;
                this.$el.find(this.param.carouselTopWrap).animate({
                    marginLeft: calc + Math.abs(this.touchM) + "px"
                }, this.param.returnSpeed, this.param.easing, function() {
                    self.touchM = 0;
                    self.param.touchStart = false;
                    self.param.slideFlag = true
                });
                this.slideInterval()
            }
        }
    },
    pagerChangeClass: function(num) {
        this.$el.find(this.param.carouselTopPagersPoint).removeClass(this.param.isActive);
        this.$el.find(this.param.carouselTopPagersPoint).eq(num).addClass(this.param.isActive)
    },
    captionChangeClass: function(num) {
        this.$el.find(this.param.carouselTopCaption).children().removeClass(this.param.isActive);
        this.$el.find(this.param.carouselTopCaption).children().eq(this.param.itemNum * 2 + num).addClass(this.param.isActive)
    },
    carouselControl: function() {
        if (this.param.carouselStatus == "stop") {
            this.param.autoSlide = true;
            this.slideInterval();
            this.param.carouselStatus = "play"
        } else {
            this.param.autoSlide = false;
            this.stopInterval();
            this.param.carouselStatus = "stop"
        }
        this.$el.find(this.param.carouselTopControl).toggleClass(this.param.isActive);
        return false
    },
    checkRtoaster: function() {
        if (snm.$(this.param.carouselTopRtoaster).length && this.$el.find(this.param.tmpCarouselTopImg).length && this.$el.find(this.param.tmpCarouselTopCaptionItem).length && snm.$(this.param.carouselTopLoading).length) {
            return true
        }
        return false
    },
    setLoading: function() {
        var rate = this.$el.find(this.param.carouselTopNavNext).width() * 2;
        var imgWid = snm.$(this.param.carouselTopLoading).width() - rate,
            imgHei = 0;
        if (imgWid > this.param.maxImgWid) {
            imgWid = this.param.maxImgWid
        }
        imgHei = Math.ceil(imgWid / 3);
        if (this.$el.find(this.param.carouselTopWrap).children().length > 1) {
            imgHei = imgHei + 70
        }
        snm.$(this.param.carouselTopLoading).height(imgHei + "px")
    },
    checkRtoasterItem: function() {
        var rtoasterWrap = snm.$(this.param.carouselTopRtoaster);
        if (rtoasterWrap.find(this.param.carouselTopRtoasterImg).length && rtoasterWrap.find(this.param.carouselTopRtoasterImg).val() !== "" && rtoasterWrap.find(this.param.carouselTopRtoasterLink).length && rtoasterWrap.find(this.param.carouselTopRtoasterLink).val() !== "") {
            return true
        }
        return false
    },
    setRtoasterItem: function() {
        var self = this,
            imgTmp = snm._.template(this.$el.find(this.param.tmpCarouselTopImg).html()),
            captionTmp = snm._.template(this.$el.find(this.param.tmpCarouselTopCaptionItem).html()),
            arr = {},
            imgURL = snm.$(this.param.carouselTopRtoasterImg).val(),
            linkURL = snm.$(this.param.carouselTopRtoasterLink).val(),
            imgAlt = "",
            imgTitle = "";
        if (snm.$(this.param.carouselTopRtoasterAlt).length && snm.$(this.param.carouselTopRtoasterAlt).val() !== "") {
            imgAlt = snm.$(this.param.carouselTopRtoasterAlt).val()
        }
        if (snm.$(this.param.carouselTopRtoasterTitle).length && snm.$(this.param.carouselTopRtoasterTitle).val() !== "") {
            imgTitle = snm.$(this.param.carouselTopRtoasterTitle).val()
        }
        arr = {
            imgURL: imgURL,
            linkURL: linkURL,
            imgAlt: imgAlt,
            imgTitle: imgTitle
        };
        self.$el.find(self.param.carouselTopWrap).prepend(imgTmp(arr));
        self.$el.find(self.param.carouselTopCaption).prepend(captionTmp(arr));
        self.$el.find(self.param.carouselTopCaptionItem).each(function() {
            snm.$(this).attr(self.param.dataCaptionNum, self.$el.find(self.param.carouselTopCaptionItem).index(this))
        });
        self.$el.find(self.param.carouselTopCaptionItem).removeClass(self.param.isActive);
        self.$el.find(self.param.carouselTopCaptionItem).eq(0).addClass(self.param.isActive)
    }
});
snm.module.model.CarouselWrapping = snm.Backbone.Model.extend({});
snm.module.view.CarouselWrapping = snm.Backbone.View.extend({
    param: {
        carouselWrappingWrap: ".js-carouselWrappingWrap",
        carouselWrappingInner: "js-carouselWrappingInner",
        carouselWrappingItem: ".js-carouselWrappingItem",
        carouselWrappingHidden: ".js-carouselWrappingHidden",
        carouselWrappingNav: ".js-carouselWrappingNav",
        carouselWrappingNavNext: ".js-carouselWrappingNavNext",
        carouselWrappingNavPrev: ".js-carouselWrappingNavPrev",
        carouselWrappingPagers: ".js-carouselWrappingPagers",
        carouselWrappingPagersPoint: ".js-carouselWrappingPagersPoint",
        carouselWrappingTmp: "#tmpCarouselWrappingPagers",
        isActive: "is-active",
        isSelect: "is-selected",
        dataItemValue: "data-item-value",
        baseNum: 6,
        pagerCount: 0,
        autoSlide: false,
        pager: true,
        speed: 800,
        intervel: 5e3,
        easing: "linear",
        swipeSpeed: 300,
        swipeEasing: "ease-out",
        swipeTriggerNum: 250
    },
    events: {
        "click .js-carouselWrappingNavNext": "renderNext",
        "click .js-carouselWrappingNavPrev": "renderPrev",
        "click .js-carouselWrappingItem": "renderSelect",
        "click .js-carouselWrappingPagersPoint": "renderPagerAnchor",
        "touchstart .js-carouselWrappingWrap .js-carouselWrappingInner": "renderTouchStart",
        "touchmove .js-carouselWrappingWrap .js-carouselWrappingInner": "renderTouchMove",
        "touchend .js-carouselWrappingWrap .js-carouselWrappingInner": "renderTouchEnd"
    },
    initialize: function(options) {
        this.options = options || {};
        this.param = snm._.defaults(this.options, this.param);
        this.model.on("change", this.modelChange, this);
        this.param.$carouselWrap = this.$el.find(this.param.carouselWrappingWrap);
        this.param.itemNum = this.param.$carouselWrap.children().length;
        this.param.pageNum = Math.ceil(this.param.itemNum / this.param.baseNum);
        this.clickFlag = true;
        if (this.param.itemNum <= this.param.baseNum) {
            this.$el.find(this.param.carouselWrappingNav).hide();
            this.$el.find(this.param.carouselWrappingPagers).hide();
            return false
        }
        var imgArr = [],
            self = this,
            imgNum = this.$el.find(this.param.carouselWrappingWrap + " img").length;
        for (var i = 0; i < imgNum; i++) {
            imgArr.push(this.$el.find(this.param.carouselWrappingWrap + " img").eq(i).attr("src"))
        }
        snm.util.preload.init(imgArr, function() {
            if (self.param.pager) {
                self.settingPager()
            }
            self.settingSlideItem();
            self.slideInterval()
        })
    },
    settingSlideItem: function() {
        var cloneObj, i;
        this.param.itemWid = this.param.$carouselWrap.children().outerWidth(true);
        this.param.baseWid = this.param.itemWid * this.param.baseNum;
        this.param.$carouselWrap.css({
            width: this.param.baseWid * this.param.pageNum * 3 + "px",
            marginLeft: "-" + this.param.baseWid * this.param.pageNum + "px",
            position: "relative"
        });
        for (i = 0; i < this.param.pageNum; i++) {
            this.param.$carouselWrap.children("div:not('." + this.param.carouselWrappingInner + "'):lt(" + this.param.baseNum + ")").wrapAll("<div class='" + this.param.carouselWrappingInner + "'></div>")
        }
        this.$el.find("." + this.param.carouselWrappingInner).css({
            width: this.param.itemWid * this.param.baseNum + "px",
            "float": "left"
        });
        var hiddenNum = this.$el.find(this.param.carouselWrappingHidden).val(),
            selectPageNum = this.$el.find(this.param.carouselWrappingItem + "[" + this.param.dataItemValue + "='" + hiddenNum + "']").parents("." + this.param.carouselWrappingInner).index("." + this.param.carouselWrappingInner);
        if (hiddenNum !== "") {
            this.param.$carouselWrap.css("marginLeft", "-=" + this.param.baseWid * selectPageNum + "px");
            this.pagerChangeClass(selectPageNum);
            this.param.pagerCount = selectPageNum
        }
        cloneObj = this.param.$carouselWrap.children();
        cloneObj.clone().prependTo(this.param.$carouselWrap);
        cloneObj.clone().appendTo(this.param.$carouselWrap)
    },
    settingPager: function() {
        var arr = {
            items: []
        };
        this.pagerTmp = snm._.template(this.$el.find(this.param.carouselWrappingTmp).html());
        for (var i = 0; i < this.param.pageNum; i++) {
            arr.items[i] = i
        }
        this.$el.find(this.param.carouselWrappingPagers).html(this.pagerTmp(arr))
    },
    slideInterval: function() {
        var self = this;
        if (this.param.autoSlide) {
            this.timeId = setInterval(function() {
                self.renderNext()
            }, this.param.intervel)
        }
    },
    render: function(diffNum) {
        var self = this,
            calc = this.model.get("status") === "next" ? "-=" : "+=",
            slidNum = !diffNum ? 1 : diffNum,
            moveVal = this.param.baseWid * slidNum;
        this.clickFlag = false;
        clearInterval(this.timeId);
        if (snm.util.navigator.tablet || snm.util.navigator.smartphone) {
            this.renderSwipe()
        } else {
            this.param.$carouselWrap.stop().animate({
                marginLeft: calc + moveVal + "px"
            }, this.param.speed, this.param.easing, function() {
                if (self.param.pagerCount == 0) {
                    self.param.$carouselWrap.css("marginLeft", "-" + self.param.baseWid * self.param.pageNum + "px")
                }
                self.clickFlag = true;
                self.model.set("status", "", {
                    silent: true
                });
                self.slideInterval()
            })
        }
    },
    renderSwipe: function() {
        var self = this,
            isFirst = this.param.pagerCount === 0 ? true : false,
            isLast = this.param.pagerCount + 1 === this.param.pageNum ? true : false,
            x = this.param.baseWid * this.param.pagerCount,
            transitionEnd = "webkitTransitionEnd.carousel_wrapping transitionend.carousel_wrapping";
        if (this.model.get("status") == "next" && isFirst) {
            x = this.param.baseWid * this.param.pageNum
        }
        x = "-" + x;
        if (this.model.get("status") == "prev" && isLast) {
            x = this.param.baseWid
        }
        this.param.swipeX = x;
        this.param.$carouselWrap.css({
            transition: "all 700ms ease-out",
            transform: "translate3d(" + x + "px,0,0)"
        }).off(transitionEnd).on(transitionEnd, function() {
            snm.$(this).css("transition", "");
            if (isFirst) {
                snm.$(this).css("transform", "translate3d(0,0,0)");
                self.param.swipeX = 0
            }
            if (isLast) {
                snm.$(this).css("transform", "translate3d(-" + self.param.baseWid * self.param.pagerCount + "px,0,0)");
                self.param.swipeX = "-" + self.param.baseWid * self.param.pagerCount
            }
            self.clickFlag = true;
            self.model.set("status", "", {
                silent: true
            });
            self.slideInterval()
        })
    },
    modelChange: function() {
        clearInterval(this.timeId);
        this.renderPager();
        this.render()
    },
    renderNext: function() {
        if (this.clickFlag == true) {
            this.model.set("status", "next")
        }
        return false
    },
    renderPrev: function() {
        if (this.clickFlag == true) {
            this.model.set("status", "prev")
        }
        return false
    },
    renderSelect: function(e) {
        var $parent = snm.$(e.target).parents(this.param.carouselWrappingItem);
        this.$el.find(this.param.carouselWrappingItem).removeClass(this.param.isSelect);
        $parent.addClass(this.param.isSelect);
        this.$el.find(this.param.carouselWrappingHidden).val($parent.attr("data-item-value"));
        return false
    },
    renderPager: function() {
        if (this.model.get("status") == "next") {
            this.param.pagerCount++
        } else {
            this.param.pagerCount--
        }
        if (this.param.pagerCount < 0) {
            this.param.pagerCount = this.param.pageNum - 1
        }
        if (this.param.pagerCount == this.param.pageNum) {
            this.param.pagerCount = 0
        }
        if (this.param.pager) {
            this.pagerChangeClass(this.param.pagerCount)
        }
    },
    renderPagerAnchor: function(e) {
        var index = this.$el.find(this.param.carouselWrappingPagersPoint).index(e.target),
            hereActive = this.$el.find(this.param.carouselWrappingPagersPoint).index(this.$el.find(this.param.carouselWrappingPagersPoint + "." + this.param.isActive)),
            diffNum = Math.abs(index - hereActive);
        if (index === hereActive) return false;
        this.param.pagerCount = index;
        if (this.clickFlag == true) {
            this.clickFlag = false;
            if (index > hereActive) {
                this.model.set("status", "next", {
                    silent: true
                })
            } else if (index < hereActive) {
                this.model.set("status", "prev", {
                    silent: true
                })
            }
            this.render(diffNum);
            if (this.param.pager) {
                this.pagerChangeClass(index)
            }
        }
        return false
    },
    renderTouchStart: function(e) {
        if (!this.clickFlag) return;
        this.param.touchFlag = true;
        clearInterval(this.timeId);
        this.touchM = 0;
        this.touchS = e.originalEvent.touches[0].pageX;
        this.param.$carouselWrap.css("transition", "")
    },
    renderTouchMove: function(e) {
        if (!this.param.touchFlag) return;
        e.preventDefault();
        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
            move = touch.pageX - this.touchS;
        this.touchM = move;
        if (Math.abs(this.param.swipeX) > 0) {
            move = this.touchM + Number(this.param.swipeX)
        }
        this.param.$carouselWrap.css("transform", "translate3d(" + move + "px,0,0)")
    },
    renderTouchEnd: function() {
        if (!this.param.touchFlag) return;
        if (this.touchM > this.param.swipeTriggerNum) {
            this.renderPrev();
            this.param.touchFlag = false
        } else if (this.touchM < "-" + this.param.swipeTriggerNum) {
            this.renderNext();
            this.param.touchFlag = false
        } else {
            var returnX = this.param.swipeX ? this.param.swipeX : 0;
            this.slideInterval();
            this.param.$carouselWrap.css("transition", "all " + this.param.swipeSpeed + "ms " + this.param.swipeEasing);
            this.param.$carouselWrap.css("transform", "translate3d(" + returnX + "px,0,0)")
        }
    },
    pagerChangeClass: function(num) {
        this.param.$carouselWrap.children().removeClass(this.param.isActive);
        this.param.$carouselWrap.children().eq(num + this.param.itemNum).addClass(this.param.isActive);
        this.$el.find(this.param.carouselWrappingPagersPoint).removeClass(this.param.isActive);
        this.$el.find(this.param.carouselWrappingPagersPoint).eq(num).addClass(this.param.isActive)
    }
});
snm.module.model.CarouselL = snm.Backbone.Model.extend({});
snm.module.view.CarouselL = snm.Backbone.View.extend({
    param: {
        carouselLWrap: ".js-carouselLWrap",
        carouselLNav: ".js-carouselLNav",
        carouselLNavNext: ".js-carouselLNavNext",
        carouselLNavPrev: ".js-carouselLNavPrev",
        carouselLPagers: ".js-carouselLPagers",
        carouselLPagersPoint: ".js-carouselLPagersPoint",
        carouselLTmpPagers: "#tmpCarouselLPagers",
        isActive: "is-active",
        pagerCount: 0,
        countNum: 0,
        autoSlide: true,
        pager: true,
        speed: 800,
        intervel: 5e3,
        easing: "linear",
        swipeSpeed: 200,
        swipeEasing: "linear",
        swipeTriggerNum: 100
    },
    events: {
        "click .js-carouselLNavNext": "renderNext",
        "click .js-carouselLNavPrev": "renderPrev",
        "click .js-carouselLPagersPoint": "renderPagerAnchor",
        "touchstart .js-carouselLWrap li": "renderTouchStart",
        "touchmove .js-carouselLWrap li": "renderTouchMove",
        "touchend .js-carouselLWrap li": "renderTouchEnd"
    },
    initialize: function(options) {
        this.options = options || {};
        this.param = snm._.defaults(this.options, this.param);
        this.model.on("change", this.modelChange, this);
        this.param.itemNum = this.$el.find(this.param.carouselLWrap).children().length;
        this.clickFlag = true;
        if (this.param.itemNum <= 1) {
            this.$el.find(this.param.carouselLNav).hide();
            this.$el.find(this.param.carouselLPagers).hide();
            return false
        }
        var imgArr = [],
            self = this,
            imgNum = this.$el.find(this.param.carouselLWrap + " img").length;
        for (var i = 0; i < imgNum; i++) {
            imgArr.push(this.$el.find(this.param.carouselLWrap + " img").eq(i).attr("src"))
        }
        snm.util.preload.init(imgArr, function() {
            self.settingSlideItem();
            if (self.param.pager) {
                self.settingPager()
            }
            self.slideInterval()
        })
    },
    settingSlideItem: function() {
        this.param.itemWid = this.$el.find(this.param.carouselLWrap).children().outerWidth(true);
        var self = this,
            itemWrapWid = this.param.itemWid * this.param.itemNum,
            tooWid = (this.$el.width() - this.$el.find(this.param.carouselLWrap).children().width()) / 2,
            cloneObj = this.$el.find(this.param.carouselLWrap).children();
        this.param.baseWid = itemWrapWid - tooWid;
        this.$el.find(this.param.carouselLWrap).css({
            width: itemWrapWid * 3 + "px",
            marginLeft: "-" + this.param.baseWid + "px",
            position: "relative"
        });
        cloneObj.clone().prependTo(this.$el.find(this.param.carouselLWrap));
        cloneObj.clone().clone().appendTo(this.$el.find(this.param.carouselLWrap))
    },
    settingPager: function() {
        var arr = {
            items: []
        };
        this.pagerTmp = snm._.template(this.$el.find(this.param.carouselLTmpPagers).html());
        for (var i = 0; i < this.param.itemNum; i++) {
            arr.items[i] = i
        }
        this.$el.find(this.param.carouselLPagers).html(this.pagerTmp(arr))
    },
    slideInterval: function() {
        var self = this;
        if (this.param.autoSlide) {
            this.timeId = setInterval(function() {
                self.renderNext()
            }, this.param.intervel)
        }
    },
    render: function() {
        var self = this,
            calc, cloneItem, moveVal;
        this.clickFlag = false;
        moveVal = this.param.itemWid;
        if (this.model.get("status") == "next") {
            calc = "-=";
            if (this.touchM) {
                moveVal = this.param.itemWid + this.touchM;
                this.marginLeft = Number(this.$el.find(this.param.carouselLWrap).css("marginLeft").replace("px", "")) - this.param.itemWid
            }
        } else {
            calc = "+=";
            if (this.touchM) {
                moveVal = this.param.itemWid - this.touchM;
                this.marginLeft = Number(this.$el.find(this.param.carouselLWrap).css("marginLeft").replace("px", "")) + this.param.itemWid
            }
        }
        clearInterval(this.timeId);
        this.$el.find(this.param.carouselLWrap).animate({
            marginLeft: calc + moveVal + "px"
        }, this.param.speed, this.param.easing, function() {
            if (self.touchM && self.touchM != 0) {
                self.touchM = 0;
                self.$el.find(self.param.carouselLWrap).css("transform", "translate3d(0,0,0)");
                self.$el.find(self.param.carouselLWrap).css("marginLeft", self.marginLeft)
            }
            if (self.model.get("status") == "next") {
                self.param.countNum++;
                if (self.param.countNum == self.param.itemNum) {
                    self.$el.find(self.param.carouselLWrap).css("marginLeft", "-" + self.param.baseWid + "px");
                    self.param.countNum = 0
                }
            } else {
                self.param.countNum--;
                if (self.param.countNum < 0) {
                    self.$el.find(self.param.carouselLWrap).css("marginLeft", "-" + (self.param.baseWid + self.param.itemWid * (self.param.itemNum - 1)) + "px");
                    self.param.countNum = self.param.itemNum - 1
                }
            }
            self.clickFlag = true;
            self.model.set("slide", "stop", {
                silent: true
            });
            self.slideInterval()
        })
    },
    modelChange: function() {
        clearInterval(this.timeId);
        if (snm.util.navigator.tablet) {
            this.$el.find(this.param.carouselLWrap).css("transition", "none")
        }
        this.render();
        if (this.param.pager) {
            this.renderPager()
        }
    },
    renderNext: function() {
        if (this.clickFlag == true) {
            this.model.set("status", "next", {
                silent: true
            })
        }
        this.model.set("slide", "move");
        return false
    },
    renderPrev: function() {
        if (this.clickFlag == true) {
            this.model.set("status", "prev", {
                silent: true
            })
        }
        this.model.set("slide", "move");
        return false
    },
    renderPager: function() {
        if (this.model.get("status") == "next") {
            this.param.pagerCount++
        } else {
            this.param.pagerCount--
        }
        if (this.param.pagerCount < 0) {
            this.param.pagerCount = this.param.itemNum - 1
        }
        if (this.param.pagerCount == this.param.itemNum) {
            this.param.pagerCount = 0
        }
        this.pagerChangeClass(this.param.pagerCount)
    },
    renderPagerAnchor: function(e) {
        var self = this,
            index = this.$el.find(this.param.carouselLPagersPoint).index(e.target);
        clearInterval(this.timeId);
        if (this.clickFlag == true) {
            this.clickFlag = false;
            this.param.countNum = index;
            this.param.pagerCount = index;
            this.$el.find(this.param.carouselLWrap).animate({
                marginLeft: "-" + (self.param.baseWid + this.param.itemWid * index) + "px"
            }, this.param.speed, this.param.easing, function() {
                self.clickFlag = true;
                self.slideInterval()
            });
            this.pagerChangeClass(index)
        }
        return false
    },
    renderTouchStart: function(e) {
        clearInterval(this.timeId);
        this.touchM = 0;
        this.touchS = e.originalEvent.touches[0].pageX;
        this.$el.find(this.param.carouselLWrap).css("transition", "all " + this.param.swipeSpeed + "ms " + this.param.swipeEasing)
    },
    renderTouchMove: function(e) {
        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
        this.touchM = touch.pageX - this.touchS;
        this.$el.find(this.param.carouselLWrap).css("transform", "translate3d(" + this.touchM + "px,0,0)")
    },
    renderTouchEnd: function() {
        if (this.touchM > this.param.swipeTriggerNum) {
            this.renderPrev()
        } else if (this.touchM < "-" + this.param.swipeTriggerNum) {
            this.renderNext()
        } else {
            this.slideInterval();
            this.$el.find(this.param.carouselLWrap).css("transform", "translate3d(0,0,0)")
        }
    },
    pagerChangeClass: function(num) {
        this.$el.find(this.param.carouselLWrap).children().removeClass(this.param.isActive);
        this.$el.find(this.param.carouselLWrap).children().eq(num + this.param.itemNum).addClass(this.param.isActive);
        this.$el.find(this.param.carouselLPagersPoint).removeClass(this.param.isActive);
        this.$el.find(this.param.carouselLPagersPoint).eq(num).addClass(this.param.isActive)
    }
});
snm.module.smoothScroll = function(ele, e) {
    //alert("Called");
    e.preventDefault();
    var speed = 500,
        easing = "swing",
        getAttr = ele.attr("href");
    if (!ele.attr("data-smoothScrollTarget")) {
        var getTop = snm.$(getAttr).offset().top;
        snm.$("body,html").stop().animate({
            scrollTop: getTop + "px"
        }, speed, easing)
    } else {
        var box = snm.$(ele.attr("data-smoothScrollTarget"));
        var target = snm.$(ele.attr("href"));
        var scrollTop = box.scrollTop();
        var dist1 = box.prop("scrollHeight") - box.prop("clientHeight") - scrollTop;
        var dist2 = target.position().top - box.position().top;
        box.stop().animate({
            scrollTop: scrollTop + Math.min(dist1, dist2)
        }, speed, easing)
    }
};
snm.module.model.Tabpanel = snm.Backbone.Model.extend({});
snm.module.view.Tabpanel = snm.Backbone.View.extend({
    param: {
        tabPanelTab: ".js-tabPanel_tab",
        tabPanelPanel: ".js-tabPanel_panel",
        tabPanelTabIsActive: ".js-tabPanel-isActive",
        tabPanelActiveClass: "is-active"
    },
    events: {
        "click .js-tabPanel_tab": "switchTab"
    },
    initialize: function() {
        this.model.on("change", this.render, this);
        this.changeActive(this.$el.find(this.param.tabPanelTabIsActive).attr("href"))
    },
    render: function() {
        this.renderTab();
        this.renderPanel()
    },
    switchTab: function(e) {
        this.changeActive(this.$el.find(e.currentTarget).attr("href"));
        return false
    },
    changeActive: function(active) {
        this.model.set("active", active)
    },
    renderTab: function() {
        this.$el.find(this.param.tabPanelTab).parent().removeClass(this.param.tabPanelActiveClass);
        this.$el.find("[href='" + this.model.get("active") + "']").parent().addClass(this.param.tabPanelActiveClass)
    },
    renderPanel: function() {
        var self = this;
        this.$el.find(this.param.tabPanelPanel).hide().filter(this.model.get("active")).css("visibility", "hidden").show();
        setTimeout(function() {
            self.$el.find(self.param.tabPanelPanel).filter(self.model.get("active")).hide();
            self.$el.find(self.param.tabPanelPanel).filter(self.model.get("active")).css("visibility", "visible");
            self.$el.find(self.param.tabPanelPanel).filter(self.model.get("active")).fadeIn(300)
        }, 100)
    }
});
snm.module.model.TextEllipsis = snm.Backbone.Model.extend({});
snm.module.view.TextEllipsis = snm.Backbone.View.extend({
    param: {
        textEllipsisTarget: ".js-textEllipsisTarget",
        textEllipsisMore: ".js-textEllipsisMore"
    },
    events: {
        "click .js-textEllipsisMore": "modelChange"
    },
    initialize: function() {
        this.model.set("defText", this.$el.find(this.param.textEllipsisTarget).html());
        this.model.on("change", this.renderMoreText, this);
        this.param.textLimit = this.$el.attr("data-ellipsis-num");
        this.render()
    },
    render: function() {
        var len = this.model.get("defText").length;
        var rebuild = this.model.get("defText").substr(0, this.param.textLimit - 1);
        if (len > this.param.textLimit) {
            this.$el.find(this.param.textEllipsisTarget).html(rebuild + "…")
        } else {
            this.$el.find(this.param.textEllipsisMore).hide()
        }
    },
    modelChange: function() {
        this.model.set("more", true);
        return false
    },
    renderMoreText: function() {
        this.$el.find(this.param.textEllipsisMore).hide();
        this.$el.find(this.param.textEllipsisTarget).html(this.model.get("defText"));
        setTimeout(function() {
            snm.$(window).resize()
        }, 10);
        return false
    }
});
snm.module.model.WeightLimit = snm.Backbone.Model.extend({});
snm.module.view.WeightLimit = snm.Backbone.View.extend({
    param: {
        weightLimitBtn: ".js-weightLimitBtn",
        weightLimitStore: ".js-weightLimitStore",
        regulationFlag: ".regulationFlag",
        dataStore: "data-store",
        modal: "",
        weightLimitSubmit: ".js-weightLimitSubmit"
    },
    events: {
        "click .js-weightLimitBtn": "limitCheck",
        "change .js-weightLimitStore": "storeChange"
    },
    initialize: function() {
        this.param = snm._.defaults({}, this.param);
        this.model.on("change", this.render, this);
        if (snm.module.Modal === undefined) {
            this.param.modal = new snm.module.ModalSp({
                el: this.$el.find(this.param.weightLimitBtn),
                clickDel: true
            })
        } else {
            this.param.modal = new snm.module.Modal({
                el: this.$el.find(this.param.weightLimitBtn),
                clickDel: true
            })
        }
        this.$el.find(this.$el.find(this.param.weightLimitBtn).attr("href")).appendTo(snm.$("body"));
        var self = this;
        snm.$(this.param.weightLimitSubmit).on("click", function() {
            self.submitForm()
        })
    },
    limitCheck: function() {
        var regulationFlag = this.$el.find(this.param.regulationFlag).val(),
            $store = this.$el.find(this.param.weightLimitStore),
            storeFlag, status;
        if ($store.is("select")) {
            storeFlag = $store.find("option:selected").attr(this.param.dataStore)
        } else {
            storeFlag = $store.filter(":checked").attr(this.param.dataStore)
        }
        if (regulationFlag !== "0" && regulationFlag !== "1" && storeFlag && storeFlag !== "0") {
            status = "on"
        } else {
            status = "off"
        }
        this.model.set("modal", status);
        return false
    },
    render: function() {
        if (this.model.get("modal") === "on") {
            this.param.modal.render()
        } else {
            this.$el[0].submit()
        }
        this.model.set("modal", null, {
            silent: true
        })
    },
    submitForm: function() {
        this.$el.trigger("submit")
    }
});
snm.$(function() {
    snm.$("body").each(function() {
        new snm.module.IsTablet({
            el: snm.$(this)
        });
        new snm.module.Is_iOS({
            el: snm.$(this)
        });
        new snm.module.CookieCheck({
            el: snm.$(this)
        })
    });
    snm.$("#js-alertModal").each(function() {
        snm.alertModal = new snm.module.view.AlertModal({
            el: snm.$(this)
        })
    });
    snm.$(".js-accordion").each(function() {
        new snm.module.view.Accordion({
            el: snm.$(this),
            collection: new snm.module.collection.Accordion
        })
    });
    snm.$(".js-addActive").each(function() {
        new snm.module.view.AddActive({
            el: snm.$(this),
            model: new snm.module.model.AddActive({})
        })
    });
    snm.$(".js-allcheckClear").each(function() {
        new snm.module.view.AllcheckClear({
            el: snm.$(this),
            model: new snm.module.model.AllcheckClear({})
        })
    });
    snm.$(".js-heightline").each(function() {
        new snm.module.view.Heightline({
            el: snm.$(this)
        })
    });
    snm.$(".js-activityChange").each(function() {
        new snm.module.view.ActivityChange({
            el: snm.$(this)
        })
    });
    snm.$(".js-activityChangeSet").each(function() {
        new snm.module.view.ActivityChangeSet({
            el: snm.$(this)
        })
    });
    snm.$(".js-activityChangeCatalog").each(function() {
        new snm.module.view.ActivityChangeCatalog({
            el: snm.$(this),
            model: new snm.module.model.ActivityChangeCatalog({})
        })
    });
    snm.$(".js-ajaxAddressSearch").each(function() {
        new snm.module.view.AjaxAddressSearch({
            el: snm.$(this),
            model: new snm.module.model.AjaxAddressSearch({})
        })
    });
    snm.$(".js-ajaxCatalogNumber").each(function() {
        new snm.module.view.AjaxCatalogNumber({
            el: snm.$(this),
            model: new snm.module.model.AjaxCatalogNumber({})
        })
    });
    snm.$(".js-ajaxDuplicateCheck").each(function() {
        new snm.module.view.AjaxDuplicateCheck({
            el: snm.$(this),
            model: new snm.module.model.AjaxDuplicateCheck({})
        })
    });
    snm.$(".js-ajaxHeaderSearch").each(function() {
        new snm.module.view.AjaxHeaderSearch({
            el: snm.$(this),
            model: new snm.module.model.AjaxHeaderSearch({})
        })
    });
    snm.$(".js-ajaxKeywordSearch").each(function() {
        new snm.module.view.AjaxKeywordSearch({
            el: snm.$(this)
        })
    });
    snm.$(".js-ajaxMailSend").each(function() {
        new snm.module.view.AjaxMailSend({
            el: snm.$(this)
        })
    });
    snm.$(".js-ajaxMailPermission").each(function() {
        new snm.module.view.AjaxMailPermission({
            el: snm.$(this)
        })
    });
    snm.$(".js-ajaxPointUpdate").each(function() {
        new snm.module.view.AjaxPointUpdate({
            el: snm.$(this),
            model: new snm.module.model.AjaxPointUpdate({})
        })
    });
    snm.$(".js-ajaxShopingListProducts").each(function() {
        new snm.module.view.AjaxShopingListProducts({
            el: snm.$(this),
            model: new snm.module.model.AjaxShopingListProducts({})
        })
    });
    snm.$(".js-ajaxStockInfo").each(function() {
        new snm.module.view.AjaxStockInfo({
            el: snm.$(this)
        })
    });
    snm.$(".js-allcheck").each(function() {
        new snm.module.view.Allcheck({
            el: snm.$(this),
            model: new snm.module.model.Allcheck({})
        })
    });
    snm.$(".js-allcheckExDisabled").each(function() {
        new snm.module.view.AllcheckExDisabled({
            el: snm.$(this),
            model: new snm.module.model.AllcheckExDisabled({})
        })
    });
    snm.$(".js-blockTile").each(function() {
        new snm.module.view.BlockTile({
            el: snm.$(this)
        })
    });
    snm.$(".js-blockTrim").each(function() {
        new snm.module.view.BlockTrim({
            el: snm.$(this)
        })
    });
    snm.$(".js-brandSearch").each(function() {
        new snm.module.view.BrandSearch({
            el: snm.$(this),
            model: new snm.module.model.BrandSearch({})
        })
    });
    snm.$(".js-carouselSpecial").each(function() {
        new snm.module.view.CarouselSpecial({
            el: snm.$(this),
            model: new snm.module.model.CarouselSpecial({})
        })
    });
    snm.$(".js-carouselTop").each(function() {
        new snm.module.view.CarouselTop({
            el: snm.$(this),
            model: new snm.module.model.CarouselTop({})
        })
    });
    snm.$(".js-carouselWrapping").each(function() {
        new snm.module.view.CarouselWrapping({
            el: snm.$(this),
            model: new snm.module.model.CarouselWrapping({})
        })
    });
    snm.$(".js-carouselL").each(function() {
        new snm.module.view.CarouselL({
            el: snm.$(this),
            model: new snm.module.model.CarouselL({})
        })
    });
    snm.$(".js-carouselRtoaster").each(function() {
        new snm.module.view.CarouselRtoaster({
            el: snm.$(this)
        })
    });
    snm.$(".js-carouselSimple").each(function() {
        new snm.module.view.CarouselSimple({
            el: snm.$(this)
        })
    });
    snm.$(".js-clearForm").each(function() {
        new snm.module.view.ClearForm({
            el: snm.$(this)
        })
    });
    snm.$(".js-deliveryDate").each(function() {
        new snm.module.view.DeliveryDate({
            el: snm.$(this),
            model: new snm.module.model.DeliveryDate({})
        })
    });
    snm.$(".js-dropdown").each(function() {
        new snm.module.view.Dropdown({
            el: snm.$(this),
            model: new snm.module.model.Dropdown({})
        })
    });
    snm.$(".js-giftEdit").each(function() {
        new snm.module.view.GiftEdit({
            el: snm.$(this),
            model: new snm.module.model.GiftEdit({})
        })
    });
    snm.$(".js-headerNav").each(function() {
        new snm.module.view.HeaderNav({
            el: snm.$(this)
        })
    });
    snm.$(".js-iconHidden").each(function() {
        new snm.module.view.IconHidden({
            el: snm.$(this),
            model: new snm.module.model.IconHidden({})
        })
    });
    snm.$(".js-layoutSwitching").each(function() {
        new snm.module.view.LayoutSwitching({
            el: snm.$(this),
            model: new snm.module.model.LayoutSwitching({})
        })
    });
    snm.$(".js-modalOpen").each(function() {
        new snm.module.Modal({
            el: snm.$(this)
        })
    });
    snm.$(".js-anniversary").each(function() {
        new snm.module.view.Anniversary({
            el: snm.$(this)
        })
    });
    snm.$(".js-mouseOnMenu").each(function() {
        new snm.module.view.MouseOnMenu({
            el: snm.$(this),
            model: new snm.module.model.MouseOnMenu({})
        })
    });
    snm.$(".js-nameNear").each(function() {
        new snm.module.view.NameNear({
            el: snm.$(this),
            model: new snm.module.model.NameNear({})
        })
    });
    snm.$(".js-numberDays").each(function() {
        new snm.module.view.NumberDays({
            el: snm.$(this),
            model: new snm.module.model.NumberDays({})
        })
    });
    snm.$(".js-numberSeparate").each(function() {
        new snm.module.view.NumberSeparate({
            el: snm.$(this),
            model: new snm.module.model.NumberSeparate({})
        })
    });
    snm.$("[placeholder]").each(function() {
        snm.module.placeholder.init(snm.$(this))
    });
    snm.$(".js-print").each(function() {
        snm.module.print.init(snm.$(this))
    });
    snm.$(".js-pointSetting").each(function() {
        new snm.module.view.PointSetting({
            el: snm.$(this),
            model: new snm.module.model.PointSetting({})
        })
    });
    snm.$(".js-passwordRouse").each(function() {
        new snm.module.view.PasswordRouse({
            el: snm.$(this),
            model: new snm.module.model.PasswordRouse({})
        })
    });
    snm.$(".js-popup").each(function() {
        new snm.module.view.Popup({
            el: snm.$(this),
            model: new snm.module.model.Popup({})
        })
    });
    snm.$(".js-popupInput").each(function() {
        new snm.module.view.PopupInput({
            el: snm.$(this)
        })
    });
    snm.$(".js-postagePart").each(function() {
        new snm.module.view.PostagePart({
            el: snm.$(this),
            model: new snm.module.model.PostagePart({})
        })
    });
    snm.$(".js-productInfo").each(function() {
        new snm.module.view.ProductInfo({
            el: snm.$(this),
            model: new snm.module.model.ProductInfo({})
        })
    });
    snm.$(".js-pressTwice").each(function() {
        new snm.module.PressTwice({
            el: snm.$(this)
        })
    });
    snm.$(".js-selectAction").each(function() {
        new snm.module.view.SelectAction({
            el: snm.$(this),
            model: new snm.module.model.SelectAction({})
        })
    });
    snm.$(".js-setPurchase").each(function() {
        new snm.module.view.SetPurchase({
            el: snm.$(this),
            model: new snm.module.model.SetPurchase({})
        })
    });
    snm.$(".js-shopingList").each(function() {
        new snm.module.view.ShopingList({
            el: snm.$(this),
            model: new snm.module.model.ShopingList({})
        })
    });
    snm.$(".js-showAll").each(function() {
        new snm.module.view.ShowAll({
            el: snm.$(this),
            model: new snm.module.model.ShowAll({})
        })
    });
    snm.$(document).on("click", ".js-smoothScroll", function(e) {
        //alert("Called");
        snm.module.smoothScroll(snm.$(this), e)
    });
    snm.$(".js-tabPanel").each(function() {
        new snm.module.view.Tabpanel({
            el: snm.$(this),
            model: new snm.module.model.Tabpanel({})
        })
    });
    snm.$(".js-textEllipsis").each(function() {
        new snm.module.view.TextEllipsis({
            el: snm.$(this),
            model: new snm.module.model.TextEllipsis({})
        })
    });
    snm.$(".js-weightLimit").each(function() {
        new snm.module.view.WeightLimit({
            el: snm.$(this),
            model: new snm.module.model.WeightLimit({})
        })
    });
    snm.$(".js-iframeResize").each(function() {
        new snm.module.view.IframeResize({
            el: snm.$(this)
        })
    });
    snm.$(".js-ajaxCatalogSearch").each(function() {
        new snm.module.view.AjaxCatalogSearch({
            el: snm.$(this)
        })
    });
    snm.$("#js-contactAttentionModal").each(function() {
        new snm.module.view.ContactAttention({
            el: snm.$(this)
        })
    });
    snm.$(".js-medicineCheck").each(function() {
        new snm.module.view.MedicineCheck({
            el: snm.$(this)
        })
    });
    snm.$(".js-floating").each(function() {
        new snm.module.view.Floating({
            el: snm.$(this)
        })
    });
    snm.$(".js-openWindow").each(function() {
        new snm.module.view.OpenWindow({
            el: snm.$(this)
        })
    });
    snm.$(".js-accordionNest").each(function() {
        new snm.module.view.AccordionNest({
            el: snm.$(this)
        })
    });
    snm.$(".js-deliverySetting").each(function() {
        new snm.module.view.DeliverySetting({
            el: snm.$(this)
        })
    });
    snm.$(".js-selectImage").each(function() {
        new snm.module.view.SelectImage({
            el: snm.$(this),
            model: new snm.module.model.SelectImage({})
        })
    });
    snm.$(".js-closeWindow").each(function() {
        new snm.module.view.CloseWindow({
            el: snm.$(this)
        })
    });
    snm.$(".js-oneWayAccordion").each(function() {
        new snm.module.view.oneWayAccordion({
            el: snm.$(this)
        })
    });
    snm.$(".js-selectWrap").each(function() {
        new snm.module.view.SelectSynchronization({
            el: snm.$(this),
            selectSynchronizationTarget: ".js-selectLink"
        })
    });
    snm.$(".js-selectCalendar").each(function() {
        new snm.module.view.SelectCalendar({
            el: snm.$(this),
            collection: new snm.module.collection.SelectCalendar
        })
    });
    snm.$(".js-displayChange").each(function() {
        new snm.module.view.DisplayChange({
            el: snm.$(this),
            model: new snm.module.model.DisplayChange({})
        })
    });
    snm.$(".js-setDate").each(function() {
        new snm.module.view.SetDate({
            el: snm.$(this),
            model: new snm.module.model.SetDate({})
        })
    });
    if (snm.$(".js-inputCheck")[0]) {
        snm.module.InputCheck.init()
    }
    setTimeout(function() {
        if (snm.$(".js-setPosition")[0]) {
            new snm.module.view.SetPosition({
                el: snm.$(".js-setPosition")[0]
            })
        }
    }, 100)
});
